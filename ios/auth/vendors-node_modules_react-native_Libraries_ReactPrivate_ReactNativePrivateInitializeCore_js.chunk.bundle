(self["webpackChunksas_auth"] = self["webpackChunksas_auth"] || []).push([["vendors-node_modules_react-native_Libraries_ReactPrivate_ReactNativePrivateInitializeCore_js"], {
10220: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _create_class = __webpack_require__(51302);
var _inherits = __webpack_require__(85428);
var _type_of = __webpack_require__(29936);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var eventTargetShim = __webpack_require__(28987);
/**
 * The signal class.
 * @see https://dom.spec.whatwg.org/#abortsignal
 */ var AbortSignal = /*#__PURE__*/ function(_eventTargetShim_EventTarget) {
    _inherits._(AbortSignal, _eventTargetShim_EventTarget);
    function AbortSignal() {
        var _this;
        _this = _eventTargetShim_EventTarget.call(this) || this;
        throw new TypeError("AbortSignal cannot be constructed directly");
        return _this;
    }
    _create_class._(AbortSignal, [
        {
            key: "aborted",
            get: /**
     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
     */ function get() {
                var aborted = abortedFlags.get(this);
                if (typeof aborted !== "boolean") {
                    throw new TypeError("Expected 'this' to be an 'AbortSignal' object, but got " + (this === null ? "null" : _type_of._(this)));
                }
                return aborted;
            }
        }
    ]);
    return AbortSignal;
}(eventTargetShim.EventTarget);
eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
/**
 * Create an AbortSignal object.
 */ function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    eventTargetShim.EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
}
/**
 * Abort a given signal.
 */ function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
        return;
    }
    abortedFlags.set(signal, true);
    signal.dispatchEvent({
        type: "abort"
    });
}
/**
 * Aborted flag for each instances.
 */ var abortedFlags = new WeakMap();
// Properties should be enumerable.
Object.defineProperties(AbortSignal.prototype, {
    aborted: {
        enumerable: true
    }
});
// `toString()` should return `"[object AbortSignal]"`
if (typeof Symbol === "function" && _type_of._(Symbol.toStringTag) === "symbol") {
    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortSignal"
    });
}
/**
 * The AbortController.
 * @see https://dom.spec.whatwg.org/#abortcontroller
 */ var AbortController = /*#__PURE__*/ function() {
    function AbortController() {
        signals.set(this, createAbortSignal());
    }
    var _proto = AbortController.prototype;
    /**
     * Abort and signal to any observers that the associated activity is to be aborted.
     */ _proto.abort = function abort() {
        abortSignal(getSignal(this));
    };
    _create_class._(AbortController, [
        {
            key: "signal",
            get: /**
     * Returns the `AbortSignal` object associated with this object.
     */ function get() {
                return getSignal(this);
            }
        }
    ]);
    return AbortController;
}();
/**
 * Associated signals.
 */ var signals = new WeakMap();
/**
 * Get the associated signal of a given controller.
 */ function getSignal(controller) {
    var signal = signals.get(controller);
    if (signal == null) {
        throw new TypeError("Expected 'this' to be an 'AbortController' object, but got " + (controller === null ? "null" : typeof controller === "undefined" ? "undefined" : _type_of._(controller)));
    }
    return signal;
}
// Properties should be enumerable.
Object.defineProperties(AbortController.prototype, {
    signal: {
        enumerable: true
    },
    abort: {
        enumerable: true
    }
});
if (typeof Symbol === "function" && _type_of._(Symbol.toStringTag) === "symbol") {
    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortController"
    });
}
exports.AbortController = AbortController;
exports.AbortSignal = AbortSignal;
exports["default"] = AbortController;
module.exports = AbortController;
module.exports.AbortController = module.exports["default"] = AbortController;
module.exports.AbortSignal = AbortSignal //# sourceMappingURL=abort-controller.js.map
;


}),
1236: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * The JSDoc comments in this file have been extracted from [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly).
 * Content by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/contributors.txt),
 * licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).
 */ // flowlint sketchy-null:off, unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DOMRectReadOnly;
    }
}));
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _create_class = __webpack_require__(51302);
function castToNumber(value) {
    return value ? Number(value) : 0;
}
var _x = /*#__PURE__*/ _class_private_field_loose_key._("_x"), _y = /*#__PURE__*/ _class_private_field_loose_key._("_y"), _width = /*#__PURE__*/ _class_private_field_loose_key._("_width"), _height = /*#__PURE__*/ _class_private_field_loose_key._("_height");
var DOMRectReadOnly = /*#__PURE__*/ function() {
    "use strict";
    function DOMRectReadOnly(x, y, width, height) {
        Object.defineProperty(this, _x, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _y, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _width, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _height, {
            writable: true,
            value: void 0
        });
        this.__setInternalX(x);
        this.__setInternalY(y);
        this.__setInternalWidth(width);
        this.__setInternalHeight(height);
    }
    var _proto = DOMRectReadOnly.prototype;
    _proto.toJSON = function toJSON() {
        var _this = this, x = _this.x, y = _this.y, width = _this.width, height = _this.height, top = _this.top, left = _this.left, bottom = _this.bottom, right = _this.right;
        return {
            x: x,
            y: y,
            width: width,
            height: height,
            top: top,
            left: left,
            bottom: bottom,
            right: right
        };
    };
    _proto.__getInternalX = function __getInternalX() {
        return _class_private_field_loose_base._(this, _x)[_x];
    };
    _proto.__getInternalY = function __getInternalY() {
        return _class_private_field_loose_base._(this, _y)[_y];
    };
    _proto.__getInternalWidth = function __getInternalWidth() {
        return _class_private_field_loose_base._(this, _width)[_width];
    };
    _proto.__getInternalHeight = function __getInternalHeight() {
        return _class_private_field_loose_base._(this, _height)[_height];
    };
    _proto.__setInternalX = function __setInternalX(x) {
        _class_private_field_loose_base._(this, _x)[_x] = castToNumber(x);
    };
    _proto.__setInternalY = function __setInternalY(y) {
        _class_private_field_loose_base._(this, _y)[_y] = castToNumber(y);
    };
    _proto.__setInternalWidth = function __setInternalWidth(width) {
        _class_private_field_loose_base._(this, _width)[_width] = castToNumber(width);
    };
    _proto.__setInternalHeight = function __setInternalHeight(height) {
        _class_private_field_loose_base._(this, _height)[_height] = castToNumber(height);
    };
    /**
   * Creates a new `DOMRectReadOnly` object with a given location and dimensions.
   */ DOMRectReadOnly.fromRect = function fromRect(rect) {
        if (!rect) {
            return new DOMRectReadOnly();
        }
        return new DOMRectReadOnly(rect.x, rect.y, rect.width, rect.height);
    };
    _create_class._(DOMRectReadOnly, [
        {
            key: "x",
            get: /**
   * The x coordinate of the `DOMRectReadOnly`'s origin.
   */ function get() {
                return _class_private_field_loose_base._(this, _x)[_x];
            }
        },
        {
            key: "y",
            get: /**
   * The y coordinate of the `DOMRectReadOnly`'s origin.
   */ function get() {
                return _class_private_field_loose_base._(this, _y)[_y];
            }
        },
        {
            key: "width",
            get: /**
   * The width of the `DOMRectReadOnly`.
   */ function get() {
                return _class_private_field_loose_base._(this, _width)[_width];
            }
        },
        {
            key: "height",
            get: /**
   * The height of the `DOMRectReadOnly`.
   */ function get() {
                return _class_private_field_loose_base._(this, _height)[_height];
            }
        },
        {
            key: "top",
            get: /**
   * Returns the top coordinate value of the `DOMRect` (has the same value as `y`, or `y + height` if `height` is negative).
   */ function get() {
                var height = _class_private_field_loose_base._(this, _height)[_height];
                var y = _class_private_field_loose_base._(this, _y)[_y];
                if (height < 0) {
                    return y + height;
                }
                return y;
            }
        },
        {
            key: "right",
            get: /**
   * Returns the right coordinate value of the `DOMRect` (has the same value as ``x + width`, or `x` if `width` is negative).
   */ function get() {
                var width = _class_private_field_loose_base._(this, _width)[_width];
                var x = _class_private_field_loose_base._(this, _x)[_x];
                if (width < 0) {
                    return x;
                }
                return x + width;
            }
        },
        {
            key: "bottom",
            get: /**
   * Returns the bottom coordinate value of the `DOMRect` (has the same value as `y + height`, or `y` if `height` is negative).
   */ function get() {
                var height = _class_private_field_loose_base._(this, _height)[_height];
                var y = _class_private_field_loose_base._(this, _y)[_y];
                if (height < 0) {
                    return y;
                }
                return y + height;
            }
        },
        {
            key: "left",
            get: /**
   * Returns the left coordinate value of the `DOMRect` (has the same value as `x`, or `x + width` if `width` is negative).
   */ function get() {
                var width = _class_private_field_loose_base._(this, _width)[_width];
                var x = _class_private_field_loose_base._(this, _x)[_x];
                if (width < 0) {
                    return x + width;
                }
                return x;
            }
        }
    ]);
    return DOMRectReadOnly;
}();


}),
13106: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * The JSDoc comments in this file have been extracted from [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect).
 * Content by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect/contributors.txt),
 * licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DOMRect;
    }
}));
var _create_class = __webpack_require__(51302);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _wrap_native_super = __webpack_require__(67381);
var _DOMRectReadOnly = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1236));
var DOMRect = /*#__PURE__*/ function(DOMRectReadOnly) {
    "use strict";
    _inherits._(DOMRect, DOMRectReadOnly);
    function DOMRect() {
        return DOMRectReadOnly.apply(this, arguments) || this;
    }
    /**
   * Creates a new `DOMRect` object with a given location and dimensions.
   */ DOMRect.fromRect = function fromRect(rect) {
        if (!rect) {
            return new DOMRect();
        }
        return new DOMRect(rect.x, rect.y, rect.width, rect.height);
    };
    _create_class._(DOMRect, [
        {
            key: "x",
            get: /**
   * The x coordinate of the `DOMRect`'s origin.
   */ function get() {
                return this.__getInternalX();
            },
            set: function set(x) {
                this.__setInternalX(x);
            }
        },
        {
            key: "y",
            get: /**
   * The y coordinate of the `DOMRect`'s origin.
   */ function get() {
                return this.__getInternalY();
            },
            set: function set(y) {
                this.__setInternalY(y);
            }
        },
        {
            key: "width",
            get: /**
   * The width of the `DOMRect`.
   */ function get() {
                return this.__getInternalWidth();
            },
            set: function set(width) {
                this.__setInternalWidth(width);
            }
        },
        {
            key: "height",
            get: /**
   * The height of the `DOMRect`.
   */ function get() {
                return this.__getInternalHeight();
            },
            set: function set(height) {
                this.__setInternalHeight(height);
            }
        }
    ]);
    return DOMRect;
}(_wrap_native_super._(_DOMRectReadOnly.default));


}),
1493: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _create_class = __webpack_require__(51302);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _to_consumable_array = __webpack_require__(8034);
var _NativeFileReaderModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4988));
var _base64js = __webpack_require__(18959);
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28987));
// DONE
var READER_EVENTS = [
    'abort',
    'error',
    'load',
    'loadstart',
    'loadend',
    'progress'
];
var EMPTY = 0;
var LOADING = 1;
var DONE = 2;
var FileReader = /*#__PURE__*/ function(_EventTarget) {
    "use strict";
    _inherits._(FileReader, _EventTarget);
    function FileReader() {
        var _this;
        _this = _EventTarget.call(this) || this, _this.EMPTY = EMPTY, _this.LOADING = LOADING, _this.DONE = DONE, _this._aborted = false;
        _this._reset();
        return _this;
    }
    var _proto = FileReader.prototype;
    _proto._reset = function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
    };
    _proto._setReadyState = function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
            type: 'readystatechange'
        });
        if (newState === DONE) {
            if (this._aborted) {
                this.dispatchEvent({
                    type: 'abort'
                });
            } else if (this._error) {
                this.dispatchEvent({
                    type: 'error'
                });
            } else {
                this.dispatchEvent({
                    type: 'load'
                });
            }
            this.dispatchEvent({
                type: 'loadend'
            });
        }
    };
    _proto.readAsArrayBuffer = function readAsArrayBuffer(blob) {
        var _this = this;
        this._aborted = false;
        if (blob == null) {
            throw new TypeError("Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(function(text) {
            if (_this._aborted) {
                return;
            }
            var base64 = text.split(',')[1];
            var typedArray = (0, _base64js.toByteArray)(base64);
            _this._result = typedArray.buffer;
            _this._setReadyState(DONE);
        }, function(error) {
            if (_this._aborted) {
                return;
            }
            _this._error = error;
            _this._setReadyState(DONE);
        });
    };
    _proto.readAsDataURL = function readAsDataURL(blob) {
        var _this = this;
        this._aborted = false;
        if (blob == null) {
            throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(function(text) {
            if (_this._aborted) {
                return;
            }
            _this._result = text;
            _this._setReadyState(DONE);
        }, function(error) {
            if (_this._aborted) {
                return;
            }
            _this._error = error;
            _this._setReadyState(DONE);
        });
    };
    _proto.readAsText = function readAsText(blob, encoding) {
        var _this = this;
        if (encoding === void 0) encoding = 'UTF-8';
        this._aborted = false;
        if (blob == null) {
            throw new TypeError("Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsText(blob.data, encoding).then(function(text) {
            if (_this._aborted) {
                return;
            }
            _this._result = text;
            _this._setReadyState(DONE);
        }, function(error) {
            if (_this._aborted) {
                return;
            }
            _this._error = error;
            _this._setReadyState(DONE);
        });
    };
    _proto.abort = function abort() {
        this._aborted = true;
        // only call onreadystatechange if there is something to abort, as per spec
        if (this._readyState !== EMPTY && this._readyState !== DONE) {
            this._reset();
            this._setReadyState(DONE);
        }
        // Reset again after, in case modified in handler
        this._reset();
    };
    _create_class._(FileReader, [
        {
            key: "readyState",
            get: function get() {
                return this._readyState;
            }
        },
        {
            key: "error",
            get: function get() {
                return this._error;
            }
        },
        {
            key: "result",
            get: function get() {
                return this._result;
            }
        }
    ]);
    return FileReader;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(READER_EVENTS)));
FileReader.EMPTY = EMPTY;
FileReader.LOADING = LOADING;
FileReader.DONE = DONE;
module.exports = FileReader;


}),
15417: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('NativeMicrotasksCxx');


}),
1827: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('JSCSamplingProfiler');


}),
18693: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PerformanceLongTaskTiming () {
        return PerformanceLongTaskTiming;
    },
    get TaskAttributionTiming () {
        return TaskAttributionTiming;
    }
});
var _create_class = __webpack_require__(51302);
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _wrap_native_super = __webpack_require__(67381);
var _PerformanceEntry = __webpack_require__(89697);
var TaskAttributionTiming = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(TaskAttributionTiming, PerformanceEntry);
    function TaskAttributionTiming() {
        return PerformanceEntry.apply(this, arguments) || this;
    }
    return TaskAttributionTiming;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));
var EMPTY_ATTRIBUTION = Object.preventExtensions([]);
var PerformanceLongTaskTiming = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceLongTaskTiming, PerformanceEntry);
    function PerformanceLongTaskTiming() {
        return PerformanceEntry.apply(this, arguments) || this;
    }
    var _proto = PerformanceLongTaskTiming.prototype;
    _proto.toJSON = function toJSON() {
        return _extends._({}, PerformanceEntry.prototype.toJSON.call(this), {
            attribution: this.attribution
        });
    };
    _create_class._(PerformanceLongTaskTiming, [
        {
            key: "attribution",
            get: function get() {
                return EMPTY_ATTRIBUTION;
            }
        }
    ]);
    return PerformanceLongTaskTiming;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));


}),
18820: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeJSCHeapCapture = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(82156), exports));
var _default = _NativeJSCHeapCapture.default;


}),
19089: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeWebSocketModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(68491), exports));
var _default = _NativeWebSocketModule.default;


}),
21591: (function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ /**
 * @return whether or not a @param {function} f is provided natively by calling
 * `toString` and check if the result includes `[native code]` in it.
 *
 * Note that a polyfill can technically fake this behavior but few does it.
 * Therefore, this is usually good enough for our purpose.
 */ function isNativeFunction(f) {
    return typeof f === 'function' && f.toString().indexOf('[native code]') > -1;
}
/**
 * @return whether or not the constructor of @param {object} o is an native
 * function named with @param {string} expectedName.
 */ function hasNativeConstructor(o, expectedName) {
    var con = Object.getPrototypeOf(o).constructor;
    return con.name === expectedName && isNativeFunction(con);
}
module.exports = {
    isNativeFunction: isNativeFunction,
    hasNativeConstructor: hasNativeConstructor
};


}),
21904: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
/**
 * Set up SegmentFetcher.
 * You can use this module directly, or just require InitializeCore.
 */ function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = (__webpack_require__(32464)/* ["default"] */["default"]);
    SegmentFetcher.fetchSegment(segmentId, options, function(errorObject) {
        if (errorObject) {
            var error = new Error(errorObject.message);
            error.code = errorObject.code; // flowlint-line unclear-type: off
            callback(error);
        }
        callback(null);
    });
}
__webpack_require__.g.__fetchSegment = __fetchSegment;


}),
22880: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return queueMicrotask;
    }
}));
var resolvedPromise;
function queueMicrotask(callback) {
    if (arguments.length < 1) {
        throw new TypeError('queueMicrotask must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
        throw new TypeError('The argument to queueMicrotask must be a function.');
    }
    // Try to reuse a lazily allocated resolved promise from closure.
    (resolvedPromise || (resolvedPromise = Promise.resolve())).then(callback)["catch"](function(error) {
        return(// Report the exception until the next tick.
        setTimeout(function() {
            throw error;
        }, 0));
    });
}


}),
25936: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeJSCHeapCapture = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18820));
var HeapCapture = {
    captureHeap: function captureHeap(path) {
        var error = null;
        try {
            __webpack_require__.g.nativeCaptureHeap(path);
            console.log('HeapCapture.captureHeap succeeded: ' + path);
        } catch (e) {
            console.log('HeapCapture.captureHeap error: ' + e.toString());
            error = e.toString();
        }
        if (_NativeJSCHeapCapture.default) {
            _NativeJSCHeapCapture.default.captureComplete(path, error);
        }
    }
};
module.exports = HeapCapture;


}),
28676: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('FileReaderModule');


}),
29042: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get EventCounts () {
        return EventCounts;
    },
    get PerformanceEventTiming () {
        return PerformanceEventTiming;
    }
});
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _create_class = __webpack_require__(51302);
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _wrap_native_super = __webpack_require__(67381);
var _PerformanceEntry = __webpack_require__(89697);
var _PerformanceObserver = __webpack_require__(64629);
var _NativePerformanceObserver = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40653));
var _processingStart = /*#__PURE__*/ _class_private_field_loose_key._("_processingStart"), _processingEnd = /*#__PURE__*/ _class_private_field_loose_key._("_processingEnd"), _interactionId = /*#__PURE__*/ _class_private_field_loose_key._("_interactionId");
var PerformanceEventTiming = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceEventTiming, PerformanceEntry);
    function PerformanceEventTiming(init) {
        var _this;
        var _init_startTime, _init_duration;
        _this = PerformanceEntry.call(this, {
            name: init.name,
            entryType: 'event',
            startTime: (_init_startTime = init.startTime) != null ? _init_startTime : 0,
            duration: (_init_duration = init.duration) != null ? _init_duration : 0
        }) || this, Object.defineProperty(_this, _processingStart, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _processingEnd, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _interactionId, {
            writable: true,
            value: void 0
        });
        var _init_processingStart;
        _class_private_field_loose_base._(_this, _processingStart)[_processingStart] = (_init_processingStart = init.processingStart) != null ? _init_processingStart : 0;
        var _init_processingEnd;
        _class_private_field_loose_base._(_this, _processingEnd)[_processingEnd] = (_init_processingEnd = init.processingEnd) != null ? _init_processingEnd : 0;
        var _init_interactionId;
        _class_private_field_loose_base._(_this, _interactionId)[_interactionId] = (_init_interactionId = init.interactionId) != null ? _init_interactionId : 0;
        return _this;
    }
    var _proto = PerformanceEventTiming.prototype;
    _proto.toJSON = function toJSON() {
        return _extends._({}, PerformanceEntry.prototype.toJSON.call(this), {
            processingStart: _class_private_field_loose_base._(this, _processingStart)[_processingStart],
            processingEnd: _class_private_field_loose_base._(this, _processingEnd)[_processingEnd],
            interactionId: _class_private_field_loose_base._(this, _interactionId)[_interactionId]
        });
    };
    _create_class._(PerformanceEventTiming, [
        {
            key: "processingStart",
            get: function get() {
                return _class_private_field_loose_base._(this, _processingStart)[_processingStart];
            }
        },
        {
            key: "processingEnd",
            get: function get() {
                return _class_private_field_loose_base._(this, _processingEnd)[_processingEnd];
            }
        },
        {
            key: "interactionId",
            get: function get() {
                return _class_private_field_loose_base._(this, _interactionId)[_interactionId];
            }
        }
    ]);
    return PerformanceEventTiming;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));
var cachedEventCounts;
function getCachedEventCounts() {
    if (cachedEventCounts) {
        return cachedEventCounts;
    }
    if (!_NativePerformanceObserver.default) {
        (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
        return new Map();
    }
    cachedEventCounts = new Map(_NativePerformanceObserver.default.getEventCounts());
    // $FlowFixMe[incompatible-call]
    __webpack_require__.g.queueMicrotask(function() {
        // To be consistent with the calls to the API from the same task,
        // but also not to refetch the data from native too often,
        // schedule to invalidate the cache later,
        // after the current task is guaranteed to have finished.
        cachedEventCounts = null;
    });
    return cachedEventCounts != null ? cachedEventCounts : new Map();
}
var EventCounts = /*#__PURE__*/ function() {
    "use strict";
    function EventCounts() {}
    var _proto = EventCounts.prototype;
    _proto.entries = function entries() {
        return getCachedEventCounts().entries();
    };
    _proto.forEach = function forEach(callback) {
        return getCachedEventCounts().forEach(callback);
    };
    _proto.get = function get(key) {
        return getCachedEventCounts().get(key);
    };
    _proto.has = function has(key) {
        return getCachedEventCounts().has(key);
    };
    _proto.keys = function keys() {
        return getCachedEventCounts().keys();
    };
    _proto.values = function values() {
        return getCachedEventCounts().values();
    };
    _create_class._(EventCounts, [
        {
            key: "size",
            get: function get() {
                return getCachedEventCounts().size;
            }
        }
    ]);
    return EventCounts;
}();


}),
32464: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeSegmentFetcher = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(39321), exports));
var _default = _NativeSegmentFetcher.default;


}),
32670: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('Timing');


}),
35200: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RawPerformanceEntryTypeValues () {
        return RawPerformanceEntryTypeValues;
    },
    get performanceEntryTypeToRaw () {
        return performanceEntryTypeToRaw;
    },
    get rawToPerformanceEntry () {
        return rawToPerformanceEntry;
    },
    get rawToPerformanceEntryType () {
        return rawToPerformanceEntryType;
    }
});
var _EventTiming = __webpack_require__(29042);
var _LongTasks = __webpack_require__(18693);
var _PerformanceEntry = __webpack_require__(89697);
var _UserTiming = __webpack_require__(63842);
var RawPerformanceEntryTypeValues = {
    MARK: 1,
    MEASURE: 2,
    EVENT: 3,
    LONGTASK: 4
};
function rawToPerformanceEntry(entry) {
    if (entry.entryType === RawPerformanceEntryTypeValues.EVENT) {
        return new _EventTiming.PerformanceEventTiming({
            name: entry.name,
            startTime: entry.startTime,
            duration: entry.duration,
            processingStart: entry.processingStart,
            processingEnd: entry.processingEnd,
            interactionId: entry.interactionId
        });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.LONGTASK) {
        return new _LongTasks.PerformanceLongTaskTiming({
            name: entry.name,
            entryType: rawToPerformanceEntryType(entry.entryType),
            startTime: entry.startTime,
            duration: entry.duration
        });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.MARK) {
        return new _UserTiming.PerformanceMark(entry.name, {
            startTime: entry.startTime
        });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.MEASURE) {
        return new _UserTiming.PerformanceMeasure(entry.name, {
            startTime: entry.startTime,
            duration: entry.duration
        });
    } else {
        return new _PerformanceEntry.PerformanceEntry({
            name: entry.name,
            entryType: rawToPerformanceEntryType(entry.entryType),
            startTime: entry.startTime,
            duration: entry.duration
        });
    }
}
function rawToPerformanceEntryType(type) {
    switch(type){
        case RawPerformanceEntryTypeValues.MARK:
            return 'mark';
        case RawPerformanceEntryTypeValues.MEASURE:
            return 'measure';
        case RawPerformanceEntryTypeValues.EVENT:
            return 'event';
        case RawPerformanceEntryTypeValues.LONGTASK:
            return 'longtask';
        default:
            throw new TypeError("rawToPerformanceEntryType: unexpected performance entry type received: " + type);
    }
}
function performanceEntryTypeToRaw(type) {
    switch(type){
        case 'mark':
            return RawPerformanceEntryTypeValues.MARK;
        case 'measure':
            return RawPerformanceEntryTypeValues.MEASURE;
        case 'event':
            return RawPerformanceEntryTypeValues.EVENT;
        case 'longtask':
            return RawPerformanceEntryTypeValues.LONGTASK;
        default:
            // Verify exhaustive check with Flow
            type;
            throw new TypeError("performanceEntryTypeToRaw: unexpected performance entry type received: " + type);
    }
}


}),
37051: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ // Small subset from whatwg-url: https://github.com/jsdom/whatwg-url/tree/master/src
// The reference code bloat comes from Unicode issues with URLs, so those won't work here.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "URLSearchParams", ({
    enumerable: true,
    get: function() {
        return URLSearchParams;
    }
}));
var _type_of = __webpack_require__(29936);
var URLSearchParams = /*#__PURE__*/ function() {
    "use strict";
    function URLSearchParams(params) {
        var _this = this;
        this._searchParams = [];
        if ((typeof params === "undefined" ? "undefined" : _type_of._(params)) === 'object') {
            Object.keys(params).forEach(function(key) {
                return _this.append(key, params[key]);
            });
        }
    }
    var _proto = URLSearchParams.prototype;
    _proto.append = function append(key, value) {
        this._searchParams.push([
            key,
            value
        ]);
    };
    _proto["delete"] = function _delete(name) {
        throw new Error('URLSearchParams.delete is not implemented');
    };
    _proto.get = function get(name) {
        throw new Error('URLSearchParams.get is not implemented');
    };
    _proto.getAll = function getAll(name) {
        throw new Error('URLSearchParams.getAll is not implemented');
    };
    _proto.has = function has(name) {
        throw new Error('URLSearchParams.has is not implemented');
    };
    _proto.set = function set(name, value) {
        throw new Error('URLSearchParams.set is not implemented');
    };
    _proto.sort = function sort() {
        throw new Error('URLSearchParams.sort is not implemented');
    };
    // $FlowFixMe[unsupported-syntax]
    // $FlowFixMe[missing-local-annot]
    _proto[Symbol.iterator] = function() {
        return this._searchParams[Symbol.iterator]();
    };
    _proto.toString = function toString() {
        if (this._searchParams.length === 0) {
            return '';
        }
        var last = this._searchParams.length - 1;
        return this._searchParams.reduce(function(acc, curr, index) {
            return acc + encodeURIComponent(curr[0]) + '=' + encodeURIComponent(curr[1]) + (index === last ? '' : '&');
        }, '');
    };
    return URLSearchParams;
}();


}),
38506: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('NativePerformanceCxx');


}),
39321: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('SegmentFetcher');


}),
40653: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('NativePerformanceObserverCxx');


}),
41678: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
// Globally Unique Immediate ID.
var GUIID = 1;
// A global set of the currently cleared immediates.
var clearedImmediates = new Set();
/**
 * Shim the setImmediate API on top of queueMicrotask.
 * @param {function} func Callback to be invoked before the end of the
 * current JavaScript execution loop.
 */ function setImmediate(callback) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    if (arguments.length < 1) {
        throw new TypeError('setImmediate must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
        throw new TypeError('The first argument to setImmediate must be a function.');
    }
    var id = GUIID++;
    // This is an edgey case in which the sequentially assigned ID has been
    // "guessed" and "cleared" ahead of time, so we need to clear it up first.
    if (clearedImmediates.has(id)) {
        clearedImmediates["delete"](id);
    }
    // $FlowFixMe[incompatible-call]
    __webpack_require__.g.queueMicrotask(function() {
        if (!clearedImmediates.has(id)) {
            callback.apply(undefined, args);
        } else {
            // Free up the Set entry.
            clearedImmediates["delete"](id);
        }
    });
    return id;
}
/**
 * @param {number} immediateID The ID of the immediate to be clearred.
 */ function clearImmediate(immediateID) {
    clearedImmediates.add(immediateID);
}
var immediateShim = {
    setImmediate: setImmediate,
    clearImmediate: clearImmediate
};
module.exports = immediateShim;


}),
42867: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 * @oncall react_native
 */ // flowlint unsafe-getters-setters:off
// Read-only object with JS memory information. This is returned by the performance.memory API.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return MemoryInfo;
    }
}));
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _create_class = __webpack_require__(51302);
var _jsHeapSizeLimit = /*#__PURE__*/ _class_private_field_loose_key._("_jsHeapSizeLimit"), _totalJSHeapSize = /*#__PURE__*/ _class_private_field_loose_key._("_totalJSHeapSize"), _usedJSHeapSize = /*#__PURE__*/ _class_private_field_loose_key._("_usedJSHeapSize");
var MemoryInfo = /*#__PURE__*/ function() {
    "use strict";
    function MemoryInfo(memoryInfo) {
        Object.defineProperty(this, _jsHeapSizeLimit, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _totalJSHeapSize, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _usedJSHeapSize, {
            writable: true,
            value: void 0
        });
        if (memoryInfo != null) {
            _class_private_field_loose_base._(this, _jsHeapSizeLimit)[_jsHeapSizeLimit] = memoryInfo.jsHeapSizeLimit;
            _class_private_field_loose_base._(this, _totalJSHeapSize)[_totalJSHeapSize] = memoryInfo.totalJSHeapSize;
            _class_private_field_loose_base._(this, _usedJSHeapSize)[_usedJSHeapSize] = memoryInfo.usedJSHeapSize;
        }
    }
    _create_class._(MemoryInfo, [
        {
            key: "jsHeapSizeLimit",
            get: /**
   * The maximum size of the heap, in bytes, that is available to the context
   */ function get() {
                return _class_private_field_loose_base._(this, _jsHeapSizeLimit)[_jsHeapSizeLimit];
            }
        },
        {
            key: "totalJSHeapSize",
            get: /**
   * The total allocated heap size, in bytes
   */ function get() {
                return _class_private_field_loose_base._(this, _totalJSHeapSize)[_totalJSHeapSize];
            }
        },
        {
            key: "usedJSHeapSize",
            get: /**
   * The currently active segment of JS heap, in bytes.
   */ function get() {
                return _class_private_field_loose_base._(this, _usedJSHeapSize)[_usedJSHeapSize];
            }
        }
    ]);
    return MemoryInfo;
}();


}),
48250: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */ 
/**
 * Event object passed to the `onopen`, `onclose`, `onmessage`, `onerror`
 * callbacks of `WebSocket`.
 *
 * The `type` property is "open", "close", "message", "error" respectively.
 *
 * In case of "message", the `data` property contains the incoming data.
 */ var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    this.type = type.toString();
    Object.assign(this, eventInitDict);
};
module.exports = WebSocketEvent;


}),
49629: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return setUpDOM;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _DOMRect = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13106));
var _DOMRectReadOnly = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1236));
var initialized = false;
function setUpDOM() {
    if (initialized) {
        return;
    }
    initialized = true;
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it
    __webpack_require__.g.DOMRect = _DOMRect.default;
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it
    __webpack_require__.g.DOMRectReadOnly = _DOMRectReadOnly.default;
}


}),
4988: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeFileReaderModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(28676), exports));
var _default = _NativeFileReaderModule.default;


}),
50653: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var Promise = __webpack_require__(50810);
__webpack_require__(99507);
if (false) {}
module.exports = Promise;


}),
50810: (function (module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(29936);
//This file contains the ES6 extensions to the core Promises/A+ API
var Promise = __webpack_require__(89801);
module.exports = Promise;
/* Static Functions */ var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');
function valuePromise(value) {
    var p = new Promise(Promise._D);
    p._y = 1;
    p._z = value;
    return p;
}
Promise.resolve = function(value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;
    if ((typeof value === "undefined" ? "undefined" : _type_of._(value)) === 'object' || typeof value === 'function') {
        try {
            var then = value.then;
            if (typeof then === 'function') {
                return new Promise(then.bind(value));
            }
        } catch (ex) {
            return new Promise(function(resolve, reject) {
                reject(ex);
            });
        }
    }
    return valuePromise(value);
};
var iterableToArray = function iterableToArray1(iterable) {
    if (typeof Array.from === 'function') {
        // ES2015+, iterables exist
        iterableToArray = Array.from;
        return Array.from(iterable);
    }
    // ES5, only arrays and array-likes exist
    iterableToArray = function iterableToArray(x) {
        return Array.prototype.slice.call(x);
    };
    return Array.prototype.slice.call(iterable);
};
Promise.all = function(arr) {
    var args = iterableToArray(arr);
    return new Promise(function(resolve, reject) {
        if (args.length === 0) return resolve([]);
        var remaining = args.length;
        function res(i, val) {
            if (val && ((typeof val === "undefined" ? "undefined" : _type_of._(val)) === 'object' || typeof val === 'function')) {
                if (val instanceof Promise && val.then === Promise.prototype.then) {
                    while(val._y === 3){
                        val = val._z;
                    }
                    if (val._y === 1) return res(i, val._z);
                    if (val._y === 2) reject(val._z);
                    val.then(function(val) {
                        res(i, val);
                    }, reject);
                    return;
                } else {
                    var then = val.then;
                    if (typeof then === 'function') {
                        var p = new Promise(then.bind(val));
                        p.then(function(val) {
                            res(i, val);
                        }, reject);
                        return;
                    }
                }
            }
            args[i] = val;
            if (--remaining === 0) {
                resolve(args);
            }
        }
        for(var i = 0; i < args.length; i++){
            res(i, args[i]);
        }
    });
};
function onSettledFulfill(value) {
    return {
        status: 'fulfilled',
        value: value
    };
}
function onSettledReject(reason) {
    return {
        status: 'rejected',
        reason: reason
    };
}
function mapAllSettled(item) {
    if (item && ((typeof item === "undefined" ? "undefined" : _type_of._(item)) === 'object' || typeof item === 'function')) {
        if (item instanceof Promise && item.then === Promise.prototype.then) {
            return item.then(onSettledFulfill, onSettledReject);
        }
        var then = item.then;
        if (typeof then === 'function') {
            return new Promise(then.bind(item)).then(onSettledFulfill, onSettledReject);
        }
    }
    return onSettledFulfill(item);
}
Promise.allSettled = function(iterable) {
    return Promise.all(iterableToArray(iterable).map(mapAllSettled));
};
Promise.reject = function(value) {
    return new Promise(function(resolve, reject) {
        reject(value);
    });
};
Promise.race = function(values) {
    return new Promise(function(resolve, reject) {
        iterableToArray(values).forEach(function(value) {
            Promise.resolve(value).then(resolve, reject);
        });
    });
};
/* Prototype Methods */ Promise.prototype['catch'] = function(onRejected) {
    return this.then(null, onRejected);
};
function getAggregateError(errors) {
    if (typeof AggregateError === 'function') {
        return new AggregateError(errors, 'All promises were rejected');
    }
    var error = new Error('All promises were rejected');
    error.name = 'AggregateError';
    error.errors = errors;
    return error;
}
Promise.any = function promiseAny(values) {
    return new Promise(function(resolve, reject) {
        var promises = iterableToArray(values);
        var hasResolved = false;
        var rejectionReasons = [];
        function resolveOnce(value) {
            if (!hasResolved) {
                hasResolved = true;
                resolve(value);
            }
        }
        function rejectionCheck(reason) {
            rejectionReasons.push(reason);
            if (rejectionReasons.length === promises.length) {
                reject(getAggregateError(rejectionReasons));
            }
        }
        if (promises.length === 0) {
            reject(getAggregateError(rejectionReasons));
        } else {
            promises.forEach(function(value) {
                Promise.resolve(value).then(resolveOnce, rejectionCheck);
            });
        }
    });
};


}),
52395: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get URL () {
        return URL;
    },
    get URLSearchParams () {
        return _URLSearchParams.URLSearchParams;
    }
});
var _create_class = __webpack_require__(51302);
var _interop_require_default = __webpack_require__(48810);
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(50270));
var _URLSearchParams = __webpack_require__(37051);
var BLOB_URL_PREFIX = null;
if (_NativeBlobModule.default && typeof _NativeBlobModule.default.getConstants().BLOB_URI_SCHEME === 'string') {
    var constants = _NativeBlobModule.default.getConstants();
    // $FlowFixMe[incompatible-type] asserted above
    // $FlowFixMe[unsafe-addition]
    BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';
    if (typeof constants.BLOB_URI_HOST === 'string') {
        BLOB_URL_PREFIX += "//" + constants.BLOB_URI_HOST + "/";
    }
}
function validateBaseUrl(url) {
    // from this MIT-licensed gist: https://gist.github.com/dperini/729294
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)*(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/.test(url);
}
var URL = /*#__PURE__*/ function() {
    "use strict";
    function URL(url, base) {
        this._searchParamsInstance = null;
        var baseUrl = null;
        if (!base || validateBaseUrl(url)) {
            this._url = url;
            if (!this._url.endsWith('/')) {
                this._url += '/';
            }
        } else {
            if (typeof base === 'string') {
                baseUrl = base;
                if (!validateBaseUrl(baseUrl)) {
                    throw new TypeError("Invalid base URL: " + baseUrl);
                }
            } else {
                baseUrl = base.toString();
            }
            if (baseUrl.endsWith('/')) {
                baseUrl = baseUrl.slice(0, baseUrl.length - 1);
            }
            if (!url.startsWith('/')) {
                url = "/" + url;
            }
            if (baseUrl.endsWith(url)) {
                url = '';
            }
            this._url = "" + baseUrl + url;
        }
    }
    var _proto = URL.prototype;
    _proto.toJSON = function toJSON() {
        return this.toString();
    };
    _proto.toString = function toString() {
        if (this._searchParamsInstance === null) {
            return this._url;
        }
        // $FlowFixMe[incompatible-use]
        var instanceString = this._searchParamsInstance.toString();
        var separator = this._url.indexOf('?') > -1 ? '&' : '?';
        return this._url + separator + instanceString;
    };
    URL.createObjectURL = function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
            throw new Error('Cannot create URL for blob!');
        }
        return "" + BLOB_URL_PREFIX + blob.data.blobId + "?offset=" + blob.data.offset + "&size=" + blob.size;
    };
    URL.revokeObjectURL = function revokeObjectURL(url) {
    // Do nothing.
    };
    _create_class._(URL, [
        {
            key: "hash",
            get: function get() {
                throw new Error('URL.hash is not implemented');
            }
        },
        {
            key: "host",
            get: function get() {
                throw new Error('URL.host is not implemented');
            }
        },
        {
            key: "hostname",
            get: function get() {
                throw new Error('URL.hostname is not implemented');
            }
        },
        {
            key: "href",
            get: function get() {
                return this.toString();
            }
        },
        {
            key: "origin",
            get: function get() {
                throw new Error('URL.origin is not implemented');
            }
        },
        {
            key: "password",
            get: function get() {
                throw new Error('URL.password is not implemented');
            }
        },
        {
            key: "pathname",
            get: function get() {
                throw new Error('URL.pathname not implemented');
            }
        },
        {
            key: "port",
            get: function get() {
                throw new Error('URL.port is not implemented');
            }
        },
        {
            key: "protocol",
            get: function get() {
                throw new Error('URL.protocol is not implemented');
            }
        },
        {
            key: "search",
            get: function get() {
                throw new Error('URL.search is not implemented');
            }
        },
        {
            key: "searchParams",
            get: function get() {
                if (this._searchParamsInstance == null) {
                    this._searchParamsInstance = new URLSearchParams();
                }
                return this._searchParamsInstance;
            }
        },
        {
            key: "username",
            get: function get() {
                throw new Error('URL.username is not implemented');
            }
        }
    ]);
    return URL;
}();


}),
52566: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('NativeIdleCallbacksCxx');


}),
52801: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _create_class = __webpack_require__(51302);
var _inherits = __webpack_require__(85428);
var _wrap_native_super = __webpack_require__(67381);
var Blob = __webpack_require__(88829);
var invariant = __webpack_require__(27761);
/**
 * The File interface provides information about files.
 */ var File = /*#__PURE__*/ function(Blob) {
    _inherits._(File, Blob);
    function File(parts, name, options) {
        var _this;
        invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');
        _this = Blob.call(this, parts, options) || this;
        _this.data.name = name;
        return _this;
    }
    _create_class._(File, [
        {
            key: "name",
            get: /**
   * Name of the file.
   */ function get() {
                invariant(this.data.name != null, 'Files must have a name set.');
                return this.data.name;
            }
        },
        {
            key: "lastModified",
            get: /*
   * Last modified time of the file.
   */ function get() {
                return this.data.lastModified || 0;
            }
        }
    ]);
    return File;
}(_wrap_native_super._(Blob));
module.exports = File;


}),
56215: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /* globals Headers, Request, Response */ 
// side-effectful require() to put fetch,
// Headers, Request, Response in global scope
__webpack_require__(92763);
module.exports = {
    fetch: fetch,
    Headers: Headers,
    Request: Request,
    Response: Response
};


}),
56831: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var polyfillGlobal = (__webpack_require__(6086)/* .polyfillGlobal */.polyfillGlobal);
/**
 * Set up XMLHttpRequest. The native XMLHttpRequest in Chrome dev tools is CORS
 * aware and won't let you fetch anything from the internet.
 *
 * You can use this module directly, or just require InitializeCore.
 */ polyfillGlobal('XMLHttpRequest', function() {
    return __webpack_require__(68769);
});
polyfillGlobal('FormData', function() {
    return __webpack_require__(59975);
});
polyfillGlobal('fetch', function() {
    return (__webpack_require__(56215)/* .fetch */.fetch);
});
polyfillGlobal('Headers', function() {
    return (__webpack_require__(56215)/* .Headers */.Headers);
});
polyfillGlobal('Request', function() {
    return (__webpack_require__(56215)/* .Request */.Request);
});
polyfillGlobal('Response', function() {
    return (__webpack_require__(56215)/* .Response */.Response);
});
polyfillGlobal('WebSocket', function() {
    return __webpack_require__(98882);
});
polyfillGlobal('Blob', function() {
    return __webpack_require__(88829);
});
polyfillGlobal('File', function() {
    return __webpack_require__(52801);
});
polyfillGlobal('FileReader', function() {
    return __webpack_require__(1493);
});
polyfillGlobal('URL', function() {
    return (__webpack_require__(52395)/* .URL */.URL);
}); // flowlint-line untyped-import:off
polyfillGlobal('URLSearchParams', function() {
    return (__webpack_require__(52395)/* .URLSearchParams */.URLSearchParams);
}); // flowlint-line untyped-import:off
polyfillGlobal('AbortController', function() {
    return (__webpack_require__(10220)/* .AbortController */.AbortController);
});
polyfillGlobal('AbortSignal', function() {
    return (__webpack_require__(10220)/* .AbortSignal */.AbortSignal);
});


}),
6086: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var defineLazyObjectProperty = __webpack_require__(78716);
/**
 * Sets an object's property. If a property with the same name exists, this will
 * replace it but maintain its descriptor configuration. The property will be
 * replaced with a lazy getter.
 *
 * In DEV mode the original property value will be preserved as `original[PropertyName]`
 * so that, if necessary, it can be restored. For example, if you want to route
 * network requests through DevTools (to trace them):
 *
 *   global.XMLHttpRequest = global.originalXMLHttpRequest;
 *
 * @see https://github.com/facebook/react-native/issues/934
 */ function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);
    if (false) { var backupName }
    var _ref = descriptor || {}, enumerable = _ref.enumerable, writable = _ref.writable, _ref_configurable = _ref.configurable, configurable = _ref_configurable === void 0 ? false : _ref_configurable;
    if (descriptor && !configurable) {
        console.error('Failed to set polyfill. ' + name + ' is not configurable.');
        return;
    }
    defineLazyObjectProperty(object, name, {
        get: getValue,
        enumerable: enumerable !== false,
        writable: writable !== false
    });
}
function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(__webpack_require__.g, name, getValue);
}
module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
};


}),
61036: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 'use client';
/**
 * Sets up global variables typical in most JavaScript environments.
 *
 *   1. Global timers (via `setTimeout` etc).
 *   2. Global console object.
 *   3. Hooks for printing stack traces with source maps.
 *
 * Leaves enough room in the environment for implementing your own:
 *
 *   1. Require system.
 *   2. Bridged modules.
 *
 */ 'use strict';
var start = Date.now();
__webpack_require__(94852);
(__webpack_require__(49629)/* ["default"] */["default"])();
__webpack_require__(86023);
__webpack_require__(86137);
__webpack_require__(89283);
__webpack_require__(93425);
__webpack_require__(99890);
__webpack_require__(56831);
__webpack_require__(96468);
__webpack_require__(67648);
__webpack_require__(69027);
__webpack_require__(21904);
if (false) {}
__webpack_require__(98542);
var GlobalPerformanceLogger = __webpack_require__(22069);
// We could just call GlobalPerformanceLogger.markPoint at the top of the file,
// but then we'd be excluding the time it took to require the logger.
// Instead, we just use Date.now and backdate the timestamp.
GlobalPerformanceLogger.markPoint('initializeCore_start', GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start));
GlobalPerformanceLogger.markPoint('initializeCore_end');


}),
61220: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeTiming = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(32670), exports));
var _default = _NativeTiming.default;


}),
63842: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PerformanceMark () {
        return PerformanceMark;
    },
    get PerformanceMeasure () {
        return PerformanceMeasure;
    }
});
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _create_class = __webpack_require__(51302);
var _inherits = __webpack_require__(85428);
var _wrap_native_super = __webpack_require__(67381);
var _PerformanceEntry = __webpack_require__(89697);
var PerformanceMark = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceMark, PerformanceEntry);
    function PerformanceMark(markName, markOptions) {
        var _this;
        var _markOptions_startTime;
        _this = PerformanceEntry.call(this, {
            name: markName,
            entryType: 'mark',
            startTime: (_markOptions_startTime = markOptions == null ? void 0 : markOptions.startTime) != null ? _markOptions_startTime : performance.now(),
            duration: 0
        }) || this;
        if (markOptions) {
            _this.detail = markOptions.detail;
        }
        return _this;
    }
    return PerformanceMark;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));
var _detail = /*#__PURE__*/ _class_private_field_loose_key._("_detail");
var PerformanceMeasure = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceMeasure, PerformanceEntry);
    function PerformanceMeasure(measureName, measureOptions) {
        var _this;
        var _measureOptions_startTime, _measureOptions_duration;
        _this = PerformanceEntry.call(this, {
            name: measureName,
            entryType: 'measure',
            startTime: (_measureOptions_startTime = measureOptions == null ? void 0 : measureOptions.startTime) != null ? _measureOptions_startTime : 0,
            duration: (_measureOptions_duration = measureOptions == null ? void 0 : measureOptions.duration) != null ? _measureOptions_duration : 0
        }) || this, Object.defineProperty(_this, _detail, {
            writable: true,
            value: void 0
        });
        if (measureOptions) {
            _class_private_field_loose_base._(_this, _detail)[_detail] = measureOptions.detail;
        }
        return _this;
    }
    _create_class._(PerformanceMeasure, [
        {
            key: "detail",
            get: function get() {
                return _class_private_field_loose_base._(this, _detail)[_detail];
            }
        }
    ]);
    return PerformanceMeasure;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));


}),
64629: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PerformanceEntry () {
        return _PerformanceEntry.PerformanceEntry;
    },
    get PerformanceEventTiming () {
        return _EventTiming.PerformanceEventTiming;
    },
    get PerformanceObserver () {
        return PerformanceObserver;
    },
    get PerformanceObserverEntryList () {
        return PerformanceObserverEntryList;
    },
    get warnNoNativePerformanceObserver () {
        return warnNoNativePerformanceObserver;
    }
});
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _interop_require_default = __webpack_require__(48810);
var _sliced_to_array = __webpack_require__(21193);
var _to_consumable_array = __webpack_require__(8034);
var _warnOnce = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53013));
var _EventTiming = __webpack_require__(29042);
var _PerformanceEntry = __webpack_require__(89697);
var _RawPerformanceEntry = __webpack_require__(35200);
var _NativePerformanceObserver = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40653));
var _entries = /*#__PURE__*/ _class_private_field_loose_key._("_entries");
var PerformanceObserverEntryList = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceObserverEntryList(entries) {
        Object.defineProperty(this, _entries, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _entries)[_entries] = entries;
    }
    var _proto = PerformanceObserverEntryList.prototype;
    _proto.getEntries = function getEntries() {
        return _class_private_field_loose_base._(this, _entries)[_entries];
    };
    _proto.getEntriesByType = function getEntriesByType(type) {
        return _class_private_field_loose_base._(this, _entries)[_entries].filter(function(entry) {
            return entry.entryType === type;
        });
    };
    _proto.getEntriesByName = function getEntriesByName(name, type) {
        if (type === undefined) {
            return _class_private_field_loose_base._(this, _entries)[_entries].filter(function(entry) {
                return entry.name === name;
            });
        } else {
            return _class_private_field_loose_base._(this, _entries)[_entries].filter(function(entry) {
                return entry.name === name && entry.entryType === type;
            });
        }
    };
    return PerformanceObserverEntryList;
}();
var observerCountPerEntryType = new Map();
var registeredObservers = new Map();
var isOnPerformanceEntryCallbackSet = false;
// This is a callback that gets scheduled and periodically called from the native side
var onPerformanceEntry = function() {
    var _loop = function(_i, _registeredObservers_entries) {
        var _registeredObservers_entries__i = _sliced_to_array._(_registeredObservers_entries[_i], 2), observer = _registeredObservers_entries__i[0], observerConfig = _registeredObservers_entries__i[1];
        var entriesForObserver = entries.filter(function(entry) {
            if (!observerConfig.entryTypes.has(entry.entryType)) {
                return false;
            }
            if (entry.entryType === 'event' && observerConfig.durationThreshold != null) {
                return entry.duration >= observerConfig.durationThreshold;
            }
            return true;
        });
        if (entriesForObserver.length !== 0) {
            try {
                observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), observer, droppedEntriesCount);
            } catch (error) {
                console.error(error);
            }
        }
    };
    if (!_NativePerformanceObserver.default) {
        return;
    }
    var entryResult = _NativePerformanceObserver.default.popPendingEntries();
    var _entryResult_entries;
    var rawEntries = (_entryResult_entries = entryResult == null ? void 0 : entryResult.entries) != null ? _entryResult_entries : [];
    var droppedEntriesCount = entryResult == null ? void 0 : entryResult.droppedEntriesCount;
    if (rawEntries.length === 0) {
        return;
    }
    var entries = rawEntries.map(_RawPerformanceEntry.rawToPerformanceEntry);
    for(var _i = 0, _registeredObservers_entries = registeredObservers.entries(); _i < _registeredObservers_entries.length; _i++)_loop(_i, _registeredObservers_entries);
};
function warnNoNativePerformanceObserver() {
    (0, _warnOnce.default)('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');
}
function applyDurationThresholds() {
    var _Math;
    var durationThresholds = Array.from(registeredObservers.values()).map(function(observerConfig) {
        return observerConfig.durationThreshold;
    }).filter(Boolean);
    return (_Math = Math).min.apply(_Math, _to_consumable_array._(durationThresholds));
}
function getSupportedPerformanceEntryTypes() {
    if (!_NativePerformanceObserver.default) {
        return Object.freeze([]);
    }
    if (!_NativePerformanceObserver.default.getSupportedPerformanceEntryTypes) {
        // fallback if getSupportedPerformanceEntryTypes is not defined on native side
        return Object.freeze([
            'mark',
            'measure',
            'event'
        ]);
    }
    return Object.freeze(_NativePerformanceObserver.default.getSupportedPerformanceEntryTypes().map(_RawPerformanceEntry.rawToPerformanceEntryType));
}
var _callback = /*#__PURE__*/ _class_private_field_loose_key._("_callback"), _type = /*#__PURE__*/ _class_private_field_loose_key._("_type"), _validateObserveOptions = /*#__PURE__*/ _class_private_field_loose_key._("_validateObserveOptions");
var PerformanceObserver = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceObserver(callback) {
        Object.defineProperty(this, _validateObserveOptions, {
            value: validateObserveOptions
        });
        Object.defineProperty(this, _callback, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _type, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _callback)[_callback] = callback;
    }
    var _proto = PerformanceObserver.prototype;
    _proto.observe = function observe(options) {
        var _registeredObservers_get;
        if (!_NativePerformanceObserver.default) {
            warnNoNativePerformanceObserver();
            return;
        }
        _class_private_field_loose_base._(this, _validateObserveOptions)[_validateObserveOptions](options);
        var requestedEntryTypes;
        if (options.entryTypes) {
            _class_private_field_loose_base._(this, _type)[_type] = 'multiple';
            requestedEntryTypes = new Set(options.entryTypes);
        } else {
            _class_private_field_loose_base._(this, _type)[_type] = 'single';
            requestedEntryTypes = new Set([
                options.type
            ]);
        }
        // The same observer may receive multiple calls to "observe", so we need
        // to check what is new on this call vs. previous ones.
        var currentEntryTypes = (_registeredObservers_get = registeredObservers.get(this)) == null ? void 0 : _registeredObservers_get.entryTypes;
        var nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;
        // This `observe` call is a no-op because there are no new things to observe.
        if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {
            return;
        }
        registeredObservers.set(this, {
            callback: _class_private_field_loose_base._(this, _callback)[_callback],
            durationThreshold: options.type === 'event' ? options.durationThreshold : undefined,
            entryTypes: nextEntryTypes
        });
        if (!isOnPerformanceEntryCallbackSet) {
            _NativePerformanceObserver.default.setOnPerformanceEntryCallback(onPerformanceEntry);
            isOnPerformanceEntryCallbackSet = true;
        }
        // We only need to start listenening to new entry types being observed in
        // this observer.
        var newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());
        for(var _i = 0; _i < newEntryTypes.length; _i++){
            var type = newEntryTypes[_i];
            if (!observerCountPerEntryType.has(type)) {
                var rawType = (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type);
                _NativePerformanceObserver.default.startReporting(rawType);
            }
            var _observerCountPerEntryType_get;
            observerCountPerEntryType.set(type, ((_observerCountPerEntryType_get = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntryType_get : 0) + 1);
        }
        applyDurationThresholds();
    };
    _proto.disconnect = function disconnect() {
        if (!_NativePerformanceObserver.default) {
            warnNoNativePerformanceObserver();
            return;
        }
        var observerConfig = registeredObservers.get(this);
        if (!observerConfig) {
            return;
        }
        // Disconnect this observer
        for(var _i = 0, _observerConfig_entryTypes_keys = observerConfig.entryTypes.keys(); _i < _observerConfig_entryTypes_keys.length; _i++){
            var type = _observerConfig_entryTypes_keys[_i];
            var _observerCountPerEntryType_get;
            var numberOfObserversForThisType = (_observerCountPerEntryType_get = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntryType_get : 0;
            if (numberOfObserversForThisType === 1) {
                observerCountPerEntryType["delete"](type);
                _NativePerformanceObserver.default.stopReporting((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type));
            } else if (numberOfObserversForThisType !== 0) {
                observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);
            }
        }
        // Disconnect all observers if this was the last one
        registeredObservers["delete"](this);
        if (registeredObservers.size === 0) {
            _NativePerformanceObserver.default.setOnPerformanceEntryCallback(undefined);
            isOnPerformanceEntryCallbackSet = false;
        }
        applyDurationThresholds();
    };
    return PerformanceObserver;
}();
PerformanceObserver.supportedEntryTypes = getSupportedPerformanceEntryTypes();
function validateObserveOptions(options) {
    var type = options.type, entryTypes = options.entryTypes, durationThreshold = options.durationThreshold;
    if (!type && !entryTypes) {
        throw new TypeError("Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.");
    }
    if (entryTypes && type) {
        throw new TypeError("Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.");
    }
    if (_class_private_field_loose_base._(this, _type)[_type] === 'multiple' && type) {
        throw new Error("Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})");
    }
    if (_class_private_field_loose_base._(this, _type)[_type] === 'single' && entryTypes) {
        throw new Error("Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})");
    }
    if (entryTypes && durationThreshold !== undefined) {
        throw new TypeError("Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.");
    }
}
function union(a, b) {
    return new Set(_to_consumable_array._(a).concat(_to_consumable_array._(b)));
}
function difference(a, b) {
    return new Set(_to_consumable_array._(a).filter(function(x) {
        return !b.has(x);
    }));
}


}),
67648: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var polyfillObjectProperty = (__webpack_require__(6086)/* .polyfillObjectProperty */.polyfillObjectProperty);
var navigator = __webpack_require__.g.navigator;
if (navigator === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.navigator = {
        product: 'ReactNative'
    };
} else {
    // see https://github.com/facebook/react-native/issues/10881
    polyfillObjectProperty(navigator, 'product', function() {
        return 'ReactNative';
    });
}


}),
68491: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('WebSocketModule');


}),
69027: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var registerModule;
if (__webpack_require__.g.RN$Bridgeless === true && __webpack_require__.g.RN$registerCallableModule) {
    registerModule = __webpack_require__.g.RN$registerCallableModule;
} else {
    var BatchedBridge = __webpack_require__(70572);
    registerModule = function(moduleName, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
     * Flow's LTI update could not be added via codemod */ factory) {
        return BatchedBridge.registerLazyCallableModule(moduleName, factory);
    };
}
registerModule('Systrace', function() {
    return __webpack_require__(87354);
});
if (!(__webpack_require__.g.RN$Bridgeless === true)) {
    registerModule('JSTimers', function() {
        return __webpack_require__(82869);
    });
}
registerModule('HeapCapture', function() {
    return __webpack_require__(25936);
});
registerModule('SamplingProfiler', function() {
    return __webpack_require__(95151);
});
registerModule('RCTLog', function() {
    return __webpack_require__(28462);
});
registerModule('RCTDeviceEventEmitter', function() {
    return (__webpack_require__(70973)/* ["default"] */["default"]);
});
registerModule('RCTNativeAppEventEmitter', function() {
    return __webpack_require__(10059);
});
registerModule('GlobalPerformanceLogger', function() {
    return __webpack_require__(22069);
});
if (false) {} else {
    registerModule('HMRClient', function() {
        return __webpack_require__(96659);
    });
}


}),
69573: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 * @oncall react_native
 */ // flowlint unsafe-getters-setters:off
// Read-only object with RN startup timing information.
// This is returned by the performance.reactNativeStartup API.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ReactNativeStartupTiming;
    }
}));
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _create_class = __webpack_require__(51302);
var // All time information here are in ms. The values may be null if not provided.
// We do NOT match web spect here for two reasons:
// 1. The `ReactNativeStartupTiming` is non-standard API
// 2. The timing information is relative to the time origin, which means `0` has valid meaning
_startTime = /*#__PURE__*/ _class_private_field_loose_key._("_startTime"), _endTime = /*#__PURE__*/ _class_private_field_loose_key._("_endTime"), _initializeRuntimeStart = /*#__PURE__*/ _class_private_field_loose_key._("_initializeRuntimeStart"), _initializeRuntimeEnd = /*#__PURE__*/ _class_private_field_loose_key._("_initializeRuntimeEnd"), _executeJavaScriptBundleEntryPointStart = /*#__PURE__*/ _class_private_field_loose_key._("_executeJavaScriptBundleEntryPointStart"), _executeJavaScriptBundleEntryPointEnd = /*#__PURE__*/ _class_private_field_loose_key._("_executeJavaScriptBundleEntryPointEnd");
var ReactNativeStartupTiming = /*#__PURE__*/ function() {
    "use strict";
    function ReactNativeStartupTiming(startUpTiming) {
        Object.defineProperty(this, _startTime, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _endTime, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _initializeRuntimeStart, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _initializeRuntimeEnd, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _executeJavaScriptBundleEntryPointStart, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _executeJavaScriptBundleEntryPointEnd, {
            writable: true,
            value: void 0
        });
        if (startUpTiming != null) {
            _class_private_field_loose_base._(this, _startTime)[_startTime] = startUpTiming.startTime;
            _class_private_field_loose_base._(this, _endTime)[_endTime] = startUpTiming.endTime;
            _class_private_field_loose_base._(this, _initializeRuntimeStart)[_initializeRuntimeStart] = startUpTiming.initializeRuntimeStart;
            _class_private_field_loose_base._(this, _initializeRuntimeEnd)[_initializeRuntimeEnd] = startUpTiming.initializeRuntimeEnd;
            _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointStart)[_executeJavaScriptBundleEntryPointStart] = startUpTiming.executeJavaScriptBundleEntryPointStart;
            _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointEnd)[_executeJavaScriptBundleEntryPointEnd] = startUpTiming.executeJavaScriptBundleEntryPointEnd;
        }
    }
    _create_class._(ReactNativeStartupTiming, [
        {
            key: "startTime",
            get: /**
   * Start time of the RN app startup process. This is provided by the platform by implementing the `ReactMarker.setAppStartTime` API in the native platform code.
   */ function get() {
                return _class_private_field_loose_base._(this, _startTime)[_startTime];
            }
        },
        {
            key: "endTime",
            get: /**
   * End time of the RN app startup process. This is equal to `executeJavaScriptBundleEntryPointEnd`.
   */ function get() {
                return _class_private_field_loose_base._(this, _endTime)[_endTime];
            }
        },
        {
            key: "initializeRuntimeStart",
            get: /**
   * Start time when RN runtime get initialized. This is when RN infra first kicks in app startup process.
   */ function get() {
                return _class_private_field_loose_base._(this, _initializeRuntimeStart)[_initializeRuntimeStart];
            }
        },
        {
            key: "initializeRuntimeEnd",
            get: /**
   * End time when RN runtime get initialized. This is the last marker before ends of the app startup process.
   */ function get() {
                return _class_private_field_loose_base._(this, _initializeRuntimeEnd)[_initializeRuntimeEnd];
            }
        },
        {
            key: "executeJavaScriptBundleEntryPointStart",
            get: /**
   * Start time of JS bundle being executed. This indicates the RN JS bundle is loaded and start to be evaluated.
   */ function get() {
                return _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointStart)[_executeJavaScriptBundleEntryPointStart];
            }
        },
        {
            key: "executeJavaScriptBundleEntryPointEnd",
            get: /**
   * End time of JS bundle being executed. This indicates all the synchronous entry point jobs are finished.
   */ function get() {
                return _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointEnd)[_executeJavaScriptBundleEntryPointEnd];
            }
        }
    ]);
    return ReactNativeStartupTiming;
}();


}),
81688: (function (module, exports, __webpack_require__) {
/* module decorator */ module = __webpack_require__.nmd(module);
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(29936);
var runtime = function(exports1) {
    "use strict";
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var defineProperty = Object.defineProperty || function(obj, key, desc) {
        obj[key] = desc.value;
    };
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        return obj[key];
    }
    try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
    } catch (err) {
        define = function define(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        defineProperty(generator, "_invoke", {
            value: makeInvokeMethod(innerFn, self, context)
        });
        return generator;
    }
    exports1.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    defineProperty(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
    });
    defineProperty(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
    });
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    exports1.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports1.mark = function(genFun) {
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports1.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") {
                reject(record.arg);
            } else {
                var result = record.arg;
                var value = result.value;
                if (value && (typeof value === "undefined" ? "undefined" : _type_of._(value)) === "object" && hasOwn.call(value, "__await")) {
                    return PromiseImpl.resolve(value.__await).then(function(value) {
                        invoke("next", value, resolve, reject);
                    }, function(err) {
                        invoke("throw", err, resolve, reject);
                    });
                }
                return PromiseImpl.resolve(value).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration.
                    result.value = unwrapped;
                    resolve(result);
                }, function(error) {
                    // If a rejected Promise was yielded, throw the rejection back
                    // into the async generator function so it can be handled there.
                    return invoke("throw", error, resolve, reject);
                });
            }
        }
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        defineProperty(this, "_invoke", {
            value: enqueue
        });
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    });
    exports1.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports1.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports1.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
         : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) {
                throw new Error("Generator is already running");
            }
            if (state === GenStateCompleted) {
                if (method === "throw") {
                    throw arg;
                }
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") {
                    // Setting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    context.sent = context._sent = context.arg;
                } else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") {
                    context.abrupt("return", context.arg);
                }
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) {
                        continue;
                    }
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method;
        var method = delegate.iterator[methodName];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method, or a missing .next mehtod, always terminate the
            // yield* loop.
            context.delegate = null;
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (methodName === "throw" && delegate.iterator["return"]) {
                // If the delegate iterator has a return method, give it a
                // chance to clean up.
                context.method = "return";
                context.arg = undefined;
                maybeInvokeDelegate(delegate, context);
                if (context.method === "throw") {
                    // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
            }
            if (methodName !== "return") {
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else {
            // Re-yield the result returned by the delegate method.
            return info;
        }
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
        return this;
    });
    define(Gp, "toString", function() {
        return "[object Generator]";
    });
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) {
            entry.catchLoc = locs[1];
        }
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    exports1.keys = function(val) {
        var object = Object(val);
        var keys = [];
        for(var key in object){
            keys.push(key);
        }
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key = keys.pop();
                if (key in object) {
                    next.value = key;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
                return iteratorMethod.call(iterable);
            }
            if (typeof iterable.next === "function") {
                return iterable;
            }
            if (!isNaN(iterable.length)) {
                var i = -1, next = function next() {
                    while(++i < iterable.length){
                        if (hasOwn.call(iterable, i)) {
                            next.value = iterable[i];
                            next.done = false;
                            return next;
                        }
                    }
                    next.value = undefined;
                    next.done = true;
                    return next;
                };
                return next.next = next;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    exports1.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this){
                    // Not sure about the optimal order of these conditions:
                    if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                        this[name] = undefined;
                    }
                }
            }
        },
        stop: function stop() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
                throw rootRecord.arg;
            }
            return this.rval;
        },
        dispatchException: function dispatchException(exception) {
            if (this.done) {
                throw exception;
            }
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") {
                    // Exception thrown outside of any try block that could handle
                    // it, so set the completion value of the entire function to
                    // throw the exception.
                    return handle("end");
                }
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                        }
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                        }
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                        }
                    } else {
                        throw new Error("try statement without catch or finally");
                    }
                }
            }
        },
        abrupt: function abrupt(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                // Ignore the finally entry if control is not jumping to a
                // location outside the try/catch block.
                finallyEntry = null;
            }
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
            if (record.type === "throw") {
                throw record.arg;
            }
            if (record.type === "break" || record.type === "continue") {
                this.next = record.arg;
            } else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
                this.next = afterLoc;
            }
            return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                this.arg = undefined;
            }
            return ContinueSentinel;
        }
    };
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports1;
}(// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
( false ? 0 : _type_of._(module)) === "object" ? module.exports : {});
try {
    regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if ((typeof globalThis === "undefined" ? "undefined" : _type_of._(globalThis)) === "object") {
        globalThis.regeneratorRuntime = runtime;
    } else {
        Function("r", "regeneratorRuntime = r")(runtime);
    }
}


}),
82156: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('JSCHeapCapture');


}),
82869: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeTiming = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61220));
var BatchedBridge = __webpack_require__(70572);
var Systrace = __webpack_require__(87354);
var invariant = __webpack_require__(27761);
/**
 * JS implementation of timer functions. Must be completely driven by an
 * external clock signal, all that's stored here is timerID, timer type, and
 * callback.
 */ // These timing constants should be kept in sync with the ones in native ios and
// android `RCTTiming` module.
var FRAME_DURATION = 1000 / 60;
var IDLE_CALLBACK_FRAME_DEADLINE = 1;
// Parallel arrays
var callbacks = [];
var types = [];
var timerIDs = [];
var reactNativeMicrotasks = [];
var requestIdleCallbacks = [];
var requestIdleCallbackTimeouts = {};
var GUID = 1;
var errors = [];
var hasEmittedTimeDriftWarning = false;
// Returns a free index if one is available, and the next consecutive index otherwise.
function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);
    if (freeIndex === -1) {
        freeIndex = timerIDs.length;
    }
    return freeIndex;
}
function _allocateCallback(func, type) {
    var id = GUID++;
    var freeIndex = _getFreeIndex();
    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
}
/**
 * Calls the callback associated with the ID. Also unregister that callback
 * if it was a one time timer (setTimeout), and not unregister it if it was
 * recurring (setInterval).
 */ function _callTimer(timerID, frameTime, didTimeout) {
    if (timerID > GUID) {
        console.warn('Tried to call timer with ID %s but no such timer exists.', timerID);
    }
    // timerIndex of -1 means that no timer with that ID exists. There are
    // two situations when this happens, when a garbage timer ID was given
    // and when a previously existing timer was deleted before this callback
    // fired. In both cases we want to ignore the timer id, but in the former
    // case we warn as well.
    var timerIndex = timerIDs.indexOf(timerID);
    if (timerIndex === -1) {
        return;
    }
    var type = types[timerIndex];
    var callback = callbacks[timerIndex];
    if (!callback || !type) {
        console.error('No callback found for timerID ' + timerID);
        return;
    }
    if (false) {}
    // Clear the metadata
    if (type !== 'setInterval') {
        _clearIndex(timerIndex);
    }
    try {
        if (type === 'setTimeout' || type === 'setInterval' || type === 'queueReactNativeMicrotask') {
            callback();
        } else if (type === 'requestAnimationFrame') {
            callback(__webpack_require__.g.performance.now());
        } else if (type === 'requestIdleCallback') {
            callback({
                timeRemaining: function timeRemaining() {
                    // TODO: Optimisation: allow running for longer than one frame if
                    // there are no pending JS calls on the bridge from native. This
                    // would require a way to check the bridge queue synchronously.
                    return Math.max(0, FRAME_DURATION - (__webpack_require__.g.performance.now() - frameTime));
                },
                didTimeout: !!didTimeout
            });
        } else {
            console.error('Tried to call a callback with invalid type: ' + type);
        }
    } catch (e) {
        // Don't rethrow so that we can run all timers.
        errors.push(e);
    }
    if (false) {}
}
/**
 * Performs a single pass over the enqueued reactNativeMicrotasks. Returns whether
 * more reactNativeMicrotasks are queued up (can be used as a condition a while loop).
 */ function _callReactNativeMicrotasksPass() {
    if (reactNativeMicrotasks.length === 0) {
        return false;
    }
    if (false) {}
    // The main reason to extract a single pass is so that we can track
    // in the system trace
    var passReactNativeMicrotasks = reactNativeMicrotasks;
    reactNativeMicrotasks = [];
    // Use for loop rather than forEach as per @vjeux's advice
    // https://github.com/facebook/react-native/commit/c8fd9f7588ad02d2293cac7224715f4af7b0f352#commitcomment-14570051
    for(var i = 0; i < passReactNativeMicrotasks.length; ++i){
        _callTimer(passReactNativeMicrotasks[i], 0);
    }
    if (false) {}
    return reactNativeMicrotasks.length > 0;
}
function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
}
function _freeCallback(timerID) {
    // timerIDs contains nulls after timers have been removed;
    // ignore nulls upfront so indexOf doesn't find them
    if (timerID == null) {
        return;
    }
    var index = timerIDs.indexOf(timerID);
    // See corresponding comment in `callTimers` for reasoning behind this
    if (index !== -1) {
        var type = types[index];
        _clearIndex(index);
        if (type !== 'queueReactNativeMicrotask' && type !== 'requestIdleCallback') {
            deleteTimer(timerID);
        }
    }
}
/**
 * JS implementation of timer functions. Must be completely driven by an
 * external clock signal, all that's stored here is timerID, timer type, and
 * callback.
 */ var JSTimers = {
    /**
   * @param {function} func Callback to be invoked after `duration` ms.
   * @param {number} duration Number of milliseconds.
   */ setTimeout: function setTimeout(func, duration) {
        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
            args[_key - 2] = arguments[_key];
        }
        var id = _allocateCallback(function() {
            return func.apply(undefined, args);
        }, 'setTimeout');
        createTimer(id, duration || 0, Date.now(), /* recurring */ false);
        return id;
    },
    /**
   * @param {function} func Callback to be invoked every `duration` ms.
   * @param {number} duration Number of milliseconds.
   */ setInterval: function setInterval(func, duration) {
        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
            args[_key - 2] = arguments[_key];
        }
        var id = _allocateCallback(function() {
            return func.apply(undefined, args);
        }, 'setInterval');
        createTimer(id, duration || 0, Date.now(), /* recurring */ true);
        return id;
    },
    /**
   * The React Native microtask mechanism is used to back public APIs e.g.
   * `queueMicrotask`, `clearImmediate`, and `setImmediate` (which is used by
   * the Promise polyfill) when the JSVM microtask mechanism is not used.
   *
   * @param {function} func Callback to be invoked before the end of the
   * current JavaScript execution loop.
   */ queueReactNativeMicrotask: function queueReactNativeMicrotask(func) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        var id = _allocateCallback(function() {
            return func.apply(undefined, args);
        }, 'queueReactNativeMicrotask');
        reactNativeMicrotasks.push(id);
        return id;
    },
    /**
   * @param {function} func Callback to be invoked every frame.
   */ requestAnimationFrame: function requestAnimationFrame(func) {
        var id = _allocateCallback(func, 'requestAnimationFrame');
        createTimer(id, 1, Date.now(), /* recurring */ false);
        return id;
    },
    /**
   * @param {function} func Callback to be invoked every frame and provided
   * with time remaining in frame.
   * @param {?object} options
   */ requestIdleCallback: function requestIdleCallback(func, options) {
        if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(true);
        }
        var timeout = options && options.timeout;
        var id = _allocateCallback(timeout != null ? function(deadline) {
            var timeoutId = requestIdleCallbackTimeouts[id];
            if (timeoutId) {
                JSTimers.clearTimeout(timeoutId);
                delete requestIdleCallbackTimeouts[id];
            }
            return func(deadline);
        } : func, 'requestIdleCallback');
        requestIdleCallbacks.push(id);
        if (timeout != null) {
            var timeoutId = JSTimers.setTimeout(function() {
                var index = requestIdleCallbacks.indexOf(id);
                if (index > -1) {
                    requestIdleCallbacks.splice(index, 1);
                    _callTimer(id, __webpack_require__.g.performance.now(), true);
                }
                delete requestIdleCallbackTimeouts[id];
                if (requestIdleCallbacks.length === 0) {
                    setSendIdleEvents(false);
                }
            }, timeout);
            requestIdleCallbackTimeouts[id] = timeoutId;
        }
        return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
        _freeCallback(timerID);
        var index = requestIdleCallbacks.indexOf(timerID);
        if (index !== -1) {
            requestIdleCallbacks.splice(index, 1);
        }
        var timeoutId = requestIdleCallbackTimeouts[timerID];
        if (timeoutId) {
            JSTimers.clearTimeout(timeoutId);
            delete requestIdleCallbackTimeouts[timerID];
        }
        if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
        }
    },
    clearTimeout: function clearTimeout(timerID) {
        _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
        _freeCallback(timerID);
    },
    clearReactNativeMicrotask: function clearReactNativeMicrotask(timerID) {
        _freeCallback(timerID);
        var index = reactNativeMicrotasks.indexOf(timerID);
        if (index !== -1) {
            reactNativeMicrotasks.splice(index, 1);
        }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
        _freeCallback(timerID);
    },
    /**
   * This is called from the native side. We are passed an array of timerIDs,
   * and
   */ callTimers: function callTimers(timersToCall) {
        invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
        errors.length = 0;
        for(var i = 0; i < timersToCall.length; i++){
            _callTimer(timersToCall[i], 0);
        }
        var errorCount = errors.length;
        if (errorCount > 0) {
            if (errorCount > 1) {
                // Throw all the other errors in a setTimeout, which will throw each
                // error one at a time
                for(var ii = 1; ii < errorCount; ii++){
                    JSTimers.setTimeout((function(error) {
                        throw error;
                    }).bind(null, errors[ii]), 0);
                }
            }
            throw errors[0];
        }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
        if (FRAME_DURATION - (Date.now() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
            return;
        }
        errors.length = 0;
        if (requestIdleCallbacks.length > 0) {
            var passIdleCallbacks = requestIdleCallbacks;
            requestIdleCallbacks = [];
            for(var i = 0; i < passIdleCallbacks.length; ++i){
                _callTimer(passIdleCallbacks[i], frameTime);
            }
        }
        if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
        }
        errors.forEach(function(error) {
            return JSTimers.setTimeout(function() {
                throw error;
            }, 0);
        });
    },
    /**
   * This is called after we execute any command we receive from native but
   * before we hand control back to native.
   */ callReactNativeMicrotasks: function() {
        errors.length = 0;
        while(_callReactNativeMicrotasksPass()){}
        errors.forEach(function(error) {
            return JSTimers.setTimeout(function() {
                throw error;
            }, 0);
        });
    },
    /**
   * Called from native (in development) when environment times are out-of-sync.
   */ emitTimeDriftWarning: function(warningMessage) {
        if (hasEmittedTimeDriftWarning) {
            return;
        }
        hasEmittedTimeDriftWarning = true;
        console.warn(warningMessage);
    }
};
function createTimer(callbackID, duration, jsSchedulingTime, repeats) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.createTimer(callbackID, duration, jsSchedulingTime, repeats);
}
function deleteTimer(timerID) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.deleteTimer(timerID);
}
function setSendIdleEvents(sendIdleEvents) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.setSendIdleEvents(sendIdleEvents);
}
var ExportedJSTimers;
if (!_NativeTiming.default) {
    console.warn("Timing native module is not available, can't set timers.");
    // $FlowFixMe[prop-missing] : we can assume timers are generally available
    ExportedJSTimers = {
        callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,
        queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask
    };
} else {
    ExportedJSTimers = JSTimers;
}
BatchedBridge.setReactNativeMicrotasksCallback(JSTimers.callReactNativeMicrotasks);
module.exports = ExportedJSTimers;


}),
83369: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeJSCSamplingProfiler = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(1827), exports));
var _default = _NativeJSCSamplingProfiler.default;


}),
84423: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Performance;
    }
}));
var _create_class = __webpack_require__(51302);
var _interop_require_default = __webpack_require__(48810);
var _warnOnce = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53013));
var _EventTiming = __webpack_require__(29042);
var _MemoryInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(42867));
var _PerformanceEntry = __webpack_require__(89697);
var _PerformanceObserver = __webpack_require__(64629);
var _RawPerformanceEntry = __webpack_require__(35200);
var _ReactNativeStartupTiming = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69573));
var _NativePerformance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(38506));
var _NativePerformanceObserver = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40653));
var _UserTiming = __webpack_require__(63842);
var _NativePerformance_now, _ref;
var getCurrentTimeStamp = (_ref = (_NativePerformance_now = _NativePerformance.default == null ? void 0 : _NativePerformance.default.now) != null ? _NativePerformance_now : __webpack_require__.g.nativePerformanceNow) != null ? _ref : function() {
    return Date.now();
};
// We want some of the performance entry types to be always logged,
// even if they are not currently observed - this is either to be able to
// retrieve them at any time via Performance.getEntries* or to refer by other entries
// (such as when measures may refer to marks, even if the latter are not observed)
if (_NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.setIsBuffered) {
    _NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.setIsBuffered(_PerformanceEntry.ALWAYS_LOGGED_ENTRY_TYPES.map(_RawPerformanceEntry.performanceEntryTypeToRaw), true);
}
function warnNoNativePerformance() {
    (0, _warnOnce.default)('missing-native-performance', 'Missing native implementation of Performance');
}
var Performance = /*#__PURE__*/ function() {
    "use strict";
    function Performance() {
        this.eventCounts = new _EventTiming.EventCounts();
    }
    var _proto = Performance.prototype;
    _proto.mark = function mark(markName, markOptions) {
        var mark = new _UserTiming.PerformanceMark(markName, markOptions);
        if (_NativePerformance.default == null ? void 0 : _NativePerformance.default.mark) {
            _NativePerformance.default.mark(markName, mark.startTime);
        } else {
            warnNoNativePerformance();
        }
        return mark;
    };
    _proto.clearMarks = function clearMarks(markName) {
        if (!(_NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.clearEntries)) {
            (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
            return;
        }
        _NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.clearEntries(_RawPerformanceEntry.RawPerformanceEntryTypeValues.MARK, markName);
    };
    _proto.measure = function measure(measureName, startMarkOrOptions, endMark) {
        var options;
        var startMarkName, endMarkName = endMark, duration, startTime = 0, endTime = 0;
        if (typeof startMarkOrOptions === 'string') {
            startMarkName = startMarkOrOptions;
        } else if (startMarkOrOptions !== undefined) {
            options = startMarkOrOptions;
            if (endMark !== undefined) {
                throw new TypeError("Performance.measure: Can't have both options and endMark");
            }
            if (options.start === undefined && options.end === undefined) {
                throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');
            }
            if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {
                throw new TypeError("Performance.measure: Can't have both start/end and duration explicitly in options");
            }
            if (typeof options.start === 'number') {
                startTime = options.start;
            } else {
                startMarkName = options.start;
            }
            if (typeof options.end === 'number') {
                endTime = options.end;
            } else {
                endMarkName = options.end;
            }
            var _options_duration;
            duration = (_options_duration = options.duration) != null ? _options_duration : duration;
        }
        var measure = new _UserTiming.PerformanceMeasure(measureName, {
            // FIXME(T196011255): this is incorrect, as we're only assigning the
            // start/end if they're specified as a number, but not if they're
            // specified as previous mark names.
            startTime: startTime,
            duration: duration
        });
        if (_NativePerformance.default == null ? void 0 : _NativePerformance.default.measure) {
            _NativePerformance.default.measure(measureName, startTime, endTime, duration, startMarkName, endMarkName);
        } else {
            warnNoNativePerformance();
        }
        return measure;
    };
    _proto.clearMeasures = function clearMeasures(measureName) {
        if (!(_NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.clearEntries)) {
            (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
            return;
        }
        _NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.clearEntries(_RawPerformanceEntry.RawPerformanceEntryTypeValues.MEASURE, measureName);
    };
    /**
   * Returns a double, measured in milliseconds.
   * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
   */ _proto.now = function now() {
        return getCurrentTimeStamp();
    };
    /**
   * An extension that allows to get back to JS all currently logged marks/measures
   * (in our case, be it from JS or native), see
   * https://www.w3.org/TR/performance-timeline/#extensions-to-the-performance-interface
   */ _proto.getEntries = function getEntries() {
        if (!(_NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.getEntries)) {
            (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
            return [];
        }
        return _NativePerformanceObserver.default.getEntries().map(_RawPerformanceEntry.rawToPerformanceEntry);
    };
    _proto.getEntriesByType = function getEntriesByType(entryType) {
        if (!_PerformanceEntry.ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {
            console.warn("Performance.getEntriesByType: Only valid for " + JSON.stringify(_PerformanceEntry.ALWAYS_LOGGED_ENTRY_TYPES) + " entry types, got " + entryType);
            return [];
        }
        if (!(_NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.getEntries)) {
            (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
            return [];
        }
        return _NativePerformanceObserver.default.getEntries((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType)).map(_RawPerformanceEntry.rawToPerformanceEntry);
    };
    _proto.getEntriesByName = function getEntriesByName(entryName, entryType) {
        if (entryType !== undefined && !_PerformanceEntry.ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {
            console.warn("Performance.getEntriesByName: Only valid for " + JSON.stringify(_PerformanceEntry.ALWAYS_LOGGED_ENTRY_TYPES) + " entry types, got " + entryType);
            return [];
        }
        if (!(_NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.getEntries)) {
            (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
            return [];
        }
        return _NativePerformanceObserver.default.getEntries(entryType != null ? (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType) : undefined, entryName).map(_RawPerformanceEntry.rawToPerformanceEntry);
    };
    _create_class._(Performance, [
        {
            key: "memory",
            get: // Get the current JS memory information.
            function get() {
                if (_NativePerformance.default == null ? void 0 : _NativePerformance.default.getSimpleMemoryInfo) {
                    // JSI API implementations may have different variants of names for the JS
                    // heap information we need here. We will parse the result based on our
                    // guess of the implementation for now.
                    var memoryInfo = _NativePerformance.default.getSimpleMemoryInfo();
                    if (memoryInfo.hasOwnProperty('hermes_heapSize')) {
                        // We got memory information from Hermes
                        var totalJSHeapSize = memoryInfo.hermes_heapSize, usedJSHeapSize = memoryInfo.hermes_allocatedBytes;
                        return new _MemoryInfo.default({
                            jsHeapSizeLimit: null,
                            totalJSHeapSize: totalJSHeapSize,
                            usedJSHeapSize: usedJSHeapSize
                        });
                    } else {
                        // JSC and V8 has no native implementations for memory information in JSI::Instrumentation
                        return new _MemoryInfo.default();
                    }
                }
                return new _MemoryInfo.default();
            }
        },
        {
            key: "rnStartupTiming",
            get: // Startup metrics is not used in web, but only in React Native.
            function get() {
                if (_NativePerformance.default == null ? void 0 : _NativePerformance.default.getReactNativeStartupTiming) {
                    var _NativePerformance_getReactNativeStartupTiming = _NativePerformance.default.getReactNativeStartupTiming(), startTime = _NativePerformance_getReactNativeStartupTiming.startTime, endTime = _NativePerformance_getReactNativeStartupTiming.endTime, initializeRuntimeStart = _NativePerformance_getReactNativeStartupTiming.initializeRuntimeStart, initializeRuntimeEnd = _NativePerformance_getReactNativeStartupTiming.initializeRuntimeEnd, executeJavaScriptBundleEntryPointStart = _NativePerformance_getReactNativeStartupTiming.executeJavaScriptBundleEntryPointStart, executeJavaScriptBundleEntryPointEnd = _NativePerformance_getReactNativeStartupTiming.executeJavaScriptBundleEntryPointEnd;
                    return new _ReactNativeStartupTiming.default({
                        startTime: startTime,
                        endTime: endTime,
                        initializeRuntimeStart: initializeRuntimeStart,
                        initializeRuntimeEnd: initializeRuntimeEnd,
                        executeJavaScriptBundleEntryPointStart: executeJavaScriptBundleEntryPointStart,
                        executeJavaScriptBundleEntryPointEnd: executeJavaScriptBundleEntryPointEnd
                    });
                }
                return new _ReactNativeStartupTiming.default();
            }
        }
    ]);
    return Performance;
}();


}),
86023: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _Performance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84423));
var _NativePerformance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(38506));
// In case if the native implementation of the Performance API is available, use it,
// otherwise fall back to the legacy/default one, which only defines 'Performance.now()'
if (_NativePerformance.default) {
    // $FlowExpectedError[cannot-write]
    __webpack_require__.g.performance = new _Performance.default();
} else {
    if (!__webpack_require__.g.performance) {
        // $FlowExpectedError[cannot-write]
        __webpack_require__.g.performance = {
            mark: function() {},
            measure: function() {},
            now: function() {
                var performanceNow = __webpack_require__.g.nativePerformanceNow || Date.now;
                return performanceNow();
            }
        };
    }
}


}),
86137: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
/**
 * Sets up the console and exception handling (redbox) for React Native.
 * You can use this module directly, or just require InitializeCore.
 */ var ExceptionsManager = __webpack_require__(31726);
ExceptionsManager.installConsoleErrorReporter();
// Set up error handler
if (!__webpack_require__.g.__fbDisableExceptionsManager) {
    var handleError = function(e, isFatal) {
        try {
            // TODO(T196834299): We should really use a c++ turbomodule for this
            if (!__webpack_require__.g.RN$handleException || !__webpack_require__.g.RN$handleException(e, isFatal)) {
                ExceptionsManager.handleException(e, isFatal);
            }
        } catch (ee) {
            console.log('Failed to print error: ', ee.message);
            throw e;
        }
    };
    var ErrorUtils = __webpack_require__(50940);
    ErrorUtils.setGlobalHandler(handleError);
}


}),
87720: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
__webpack_require__(61036);


}),
89283: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var _global_HermesInternal_hasPromise, _global_HermesInternal, _global;
var polyfillGlobal = (__webpack_require__(6086)/* .polyfillGlobal */.polyfillGlobal);
/**
 * Set up Promise. The native Promise implementation throws the following error:
 * ERROR: Event loop not supported.
 *
 * If you don't need these polyfills, don't use InitializeCore; just directly
 * require the modules you need from InitializeCore for setup.
 */ // If global.Promise is provided by Hermes, we are confident that it can provide
// all the methods needed by React Native, so we can directly use it.
if ((_global = __webpack_require__.g) == null ? void 0 : (_global_HermesInternal = _global.HermesInternal) == null ? void 0 : (_global_HermesInternal_hasPromise = _global_HermesInternal.hasPromise) == null ? void 0 : _global_HermesInternal_hasPromise.call(_global_HermesInternal)) {
    var HermesPromise = __webpack_require__.g.Promise;
    if (false) { var _global_HermesInternal_enablePromiseRejectionTracker, _global_HermesInternal1 }
} else {
    polyfillGlobal('Promise', function() {
        return __webpack_require__(50653);
    });
}


}),
89697: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ALWAYS_LOGGED_ENTRY_TYPES () {
        return ALWAYS_LOGGED_ENTRY_TYPES;
    },
    get PerformanceEntry () {
        return PerformanceEntry;
    }
});
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _create_class = __webpack_require__(51302);
var ALWAYS_LOGGED_ENTRY_TYPES = [
    'mark',
    'measure'
];
var _name = /*#__PURE__*/ _class_private_field_loose_key._("_name"), _entryType = /*#__PURE__*/ _class_private_field_loose_key._("_entryType"), _startTime = /*#__PURE__*/ _class_private_field_loose_key._("_startTime"), _duration = /*#__PURE__*/ _class_private_field_loose_key._("_duration");
var PerformanceEntry = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceEntry(init) {
        Object.defineProperty(this, _name, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _entryType, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _startTime, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _duration, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _name)[_name] = init.name;
        _class_private_field_loose_base._(this, _entryType)[_entryType] = init.entryType;
        _class_private_field_loose_base._(this, _startTime)[_startTime] = init.startTime;
        _class_private_field_loose_base._(this, _duration)[_duration] = init.duration;
    }
    var _proto = PerformanceEntry.prototype;
    _proto.toJSON = function toJSON() {
        return {
            name: _class_private_field_loose_base._(this, _name)[_name],
            entryType: _class_private_field_loose_base._(this, _entryType)[_entryType],
            startTime: _class_private_field_loose_base._(this, _startTime)[_startTime],
            duration: _class_private_field_loose_base._(this, _duration)[_duration]
        };
    };
    _create_class._(PerformanceEntry, [
        {
            key: "name",
            get: function get() {
                return _class_private_field_loose_base._(this, _name)[_name];
            }
        },
        {
            key: "entryType",
            get: function get() {
                return _class_private_field_loose_base._(this, _entryType)[_entryType];
            }
        },
        {
            key: "startTime",
            get: function get() {
                return _class_private_field_loose_base._(this, _startTime)[_startTime];
            }
        },
        {
            key: "duration",
            get: function get() {
                return _class_private_field_loose_base._(this, _duration)[_duration];
            }
        }
    ]);
    return PerformanceEntry;
}();


}),
89801: (function (module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(29936);
function noop() {}
// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable
// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.
// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
    try {
        return obj.then;
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
function tryCallOne(fn, a) {
    try {
        return fn(a);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
function tryCallTwo(fn, a, b) {
    try {
        fn(a, b);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
module.exports = Promise;
function Promise(fn) {
    if (_type_of._(this) !== 'object') {
        throw new TypeError('Promises must be constructed via new');
    }
    if (typeof fn !== 'function') {
        throw new TypeError('Promise constructor\'s argument is not a function');
    }
    this._x = 0;
    this._y = 0;
    this._z = null;
    this._A = null;
    if (fn === noop) return;
    doResolve(fn, this);
}
Promise._B = null;
Promise._C = null;
Promise._D = noop;
Promise.prototype.then = function(onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
        return safeThen(this, onFulfilled, onRejected);
    }
    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
};
function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function(resolve, reject) {
        var res = new Promise(noop);
        res.then(resolve, reject);
        handle(self, new Handler(onFulfilled, onRejected, res));
    });
}
function handle(self, deferred) {
    while(self._y === 3){
        self = self._z;
    }
    if (Promise._B) {
        Promise._B(self);
    }
    if (self._y === 0) {
        if (self._x === 0) {
            self._x = 1;
            self._A = deferred;
            return;
        }
        if (self._x === 1) {
            self._x = 2;
            self._A = [
                self._A,
                deferred
            ];
            return;
        }
        self._A.push(deferred);
        return;
    }
    handleResolved(self, deferred);
}
function handleResolved(self, deferred) {
    setImmediate(function() {
        var cb = self._y === 1 ? deferred.onFulfilled : deferred.onRejected;
        if (cb === null) {
            if (self._y === 1) {
                resolve(deferred.promise, self._z);
            } else {
                reject(deferred.promise, self._z);
            }
            return;
        }
        var ret = tryCallOne(cb, self._z);
        if (ret === IS_ERROR) {
            reject(deferred.promise, LAST_ERROR);
        } else {
            resolve(deferred.promise, ret);
        }
    });
}
function resolve(self, newValue) {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self) {
        return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }
    if (newValue && ((typeof newValue === "undefined" ? "undefined" : _type_of._(newValue)) === 'object' || typeof newValue === 'function')) {
        var then = getThen(newValue);
        if (then === IS_ERROR) {
            return reject(self, LAST_ERROR);
        }
        if (then === self.then && newValue instanceof Promise) {
            self._y = 3;
            self._z = newValue;
            finale(self);
            return;
        } else if (typeof then === 'function') {
            doResolve(then.bind(newValue), self);
            return;
        }
    }
    self._y = 1;
    self._z = newValue;
    finale(self);
}
function reject(self, newValue) {
    self._y = 2;
    self._z = newValue;
    if (Promise._C) {
        Promise._C(self, newValue);
    }
    finale(self);
}
function finale(self) {
    if (self._x === 1) {
        handle(self, self._A);
        self._A = null;
    }
    if (self._x === 2) {
        for(var i = 0; i < self._A.length; i++){
            handle(self, self._A[i]);
        }
        self._A = null;
    }
}
function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
}
/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */ function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function(value) {
        if (done) return;
        done = true;
        resolve(promise, value);
    }, function(reason) {
        if (done) return;
        done = true;
        reject(promise, reason);
    });
    if (!done && res === IS_ERROR) {
        done = true;
        reject(promise, LAST_ERROR);
    }
}


}),
92763: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(29936);
(function(global1, factory) {
    ( false ? 0 : _type_of._(exports)) === 'object' && 'object' !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define([
        'exports'
    ], factory) : factory(global1.WHATWGFetch = {});
})(void 0, function(exports1) {
    'use strict';
    /* eslint-disable no-prototype-builtins */ var g = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || // eslint-disable-next-line no-undef
    typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g || {};
    var support = {
        searchParams: 'URLSearchParams' in g,
        iterable: 'Symbol' in g && 'iterator' in Symbol,
        blob: 'FileReader' in g && 'Blob' in g && function() {
            try {
                new Blob();
                return true;
            } catch (e) {
                return false;
            }
        }(),
        formData: 'FormData' in g,
        arrayBuffer: 'ArrayBuffer' in g
    };
    function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
    }
    if (support.arrayBuffer) {
        var viewClasses = [
            '[object Int8Array]',
            '[object Uint8Array]',
            '[object Uint8ClampedArray]',
            '[object Int16Array]',
            '[object Uint16Array]',
            '[object Int32Array]',
            '[object Uint32Array]',
            '[object Float32Array]',
            '[object Float64Array]'
        ];
        var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
        };
    }
    function normalizeName(name) {
        if (typeof name !== 'string') {
            name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
        }
        return name.toLowerCase();
    }
    function normalizeValue(value) {
        if (typeof value !== 'string') {
            value = String(value);
        }
        return value;
    }
    // Build a destructive iterator for the value list
    function iteratorFor(items) {
        var iterator = {
            next: function next() {
                var value = items.shift();
                return {
                    done: value === undefined,
                    value: value
                };
            }
        };
        if (support.iterable) {
            iterator[Symbol.iterator] = function() {
                return iterator;
            };
        }
        return iterator;
    }
    function Headers(headers) {
        this.map = {};
        if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
                this.append(name, value);
            }, this);
        } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
                if (header.length != 2) {
                    throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
                }
                this.append(header[0], header[1]);
            }, this);
        } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
                this.append(name, headers[name]);
            }, this);
        }
    }
    Headers.prototype.append = function(name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };
    Headers.prototype['delete'] = function(name) {
        delete this.map[normalizeName(name)];
    };
    Headers.prototype.get = function(name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null;
    };
    Headers.prototype.has = function(name) {
        return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers.prototype.set = function(name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers.prototype.forEach = function(callback, thisArg) {
        for(var name in this.map){
            if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
            }
        }
    };
    Headers.prototype.keys = function() {
        var items = [];
        this.forEach(function(value, name) {
            items.push(name);
        });
        return iteratorFor(items);
    };
    Headers.prototype.values = function() {
        var items = [];
        this.forEach(function(value) {
            items.push(value);
        });
        return iteratorFor(items);
    };
    Headers.prototype.entries = function() {
        var items = [];
        this.forEach(function(value, name) {
            items.push([
                name,
                value
            ]);
        });
        return iteratorFor(items);
    };
    if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
    function consumed(body) {
        if (body._noBody) return;
        if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'));
        }
        body.bodyUsed = true;
    }
    function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
            reader.onload = function() {
                resolve(reader.result);
            };
            reader.onerror = function() {
                reject(reader.error);
            };
        });
    }
    function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
    }
    function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
        var encoding = match ? match[1] : 'utf-8';
        reader.readAsText(blob, encoding);
        return promise;
    }
    function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for(var i = 0; i < view.length; i++){
            chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join('');
    }
    function bufferClone(buf) {
        if (buf.slice) {
            return buf.slice(0);
        } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
        }
    }
    function Body() {
        this.bodyUsed = false;
        this._initBody = function(body) {
            /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */ // eslint-disable-next-line no-self-assign
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
                this._noBody = true;
                this._bodyText = '';
            } else if (typeof body === 'string') {
                this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                // IE 10-11 can't handle a DataView body.
                this._bodyInit = new Blob([
                    this._bodyArrayBuffer
                ]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
            } else {
                this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get('content-type')) {
                if (typeof body === 'string') {
                    this.headers.set('content-type', 'text/plain;charset=UTF-8');
                } else if (this._bodyBlob && this._bodyBlob.type) {
                    this.headers.set('content-type', this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                }
            }
        };
        if (support.blob) {
            this.blob = function() {
                var rejected = consumed(this);
                if (rejected) {
                    return rejected;
                }
                if (this._bodyBlob) {
                    return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                    return Promise.resolve(new Blob([
                        this._bodyArrayBuffer
                    ]));
                } else if (this._bodyFormData) {
                    throw new Error('could not read FormData body as blob');
                } else {
                    return Promise.resolve(new Blob([
                        this._bodyText
                    ]));
                }
            };
        }
        this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);
                if (isConsumed) {
                    return isConsumed;
                } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                    return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                } else {
                    return Promise.resolve(this._bodyArrayBuffer);
                }
            } else if (support.blob) {
                return this.blob().then(readBlobAsArrayBuffer);
            } else {
                throw new Error('could not read as ArrayBuffer');
            }
        };
        this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
                return rejected;
            }
            if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as text');
            } else {
                return Promise.resolve(this._bodyText);
            }
        };
        if (support.formData) {
            this.formData = function() {
                return this.text().then(decode);
            };
        }
        this.json = function() {
            return this.text().then(JSON.parse);
        };
        return this;
    }
    // HTTP methods whose capitalization should be normalized
    var methods = [
        'CONNECT',
        'DELETE',
        'GET',
        'HEAD',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
        'TRACE'
    ];
    function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
    }
    function Request(input, options) {
        if (!(this instanceof Request)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        options = options || {};
        var body = options.body;
        if (input instanceof Request) {
            if (input.bodyUsed) {
                throw new TypeError('Already read');
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
                this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
            }
        } else {
            this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || 'same-origin';
        if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal || function() {
            if ('AbortController' in g) {
                var ctrl = new AbortController();
                return ctrl.signal;
            }
        }();
        this.referrer = null;
        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests');
        }
        this._initBody(body);
        if (this.method === 'GET' || this.method === 'HEAD') {
            if (options.cache === 'no-store' || options.cache === 'no-cache') {
                // Search for a '_' parameter in the query string
                var reParamSearch = /([?&])_=[^&]*/;
                if (reParamSearch.test(this.url)) {
                    // If it already exists then set the value with the current time
                    this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
                } else {
                    // Otherwise add a new '_' parameter to the end with the current time
                    var reQueryString = /\?/;
                    this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
                }
            }
        }
    }
    Request.prototype.clone = function() {
        return new Request(this, {
            body: this._bodyInit
        });
    };
    function decode(body) {
        var form = new FormData();
        body.trim().split('&').forEach(function(bytes) {
            if (bytes) {
                var split = bytes.split('=');
                var name = split.shift().replace(/\+/g, ' ');
                var value = split.join('=').replace(/\+/g, ' ');
                form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
        });
        return form;
    }
    function parseHeaders(rawHeaders) {
        var headers = new Headers();
        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
        // https://tools.ietf.org/html/rfc7230#section-3.2
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
        // https://github.com/github/fetch/issues/748
        // https://github.com/zloirock/core-js/issues/751
        preProcessedHeaders.split('\r').map(function(header) {
            return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
        }).forEach(function(line) {
            var parts = line.split(':');
            var key = parts.shift().trim();
            if (key) {
                var value = parts.join(':').trim();
                try {
                    headers.append(key, value);
                } catch (error) {
                    console.warn('Response ' + error.message);
                }
            }
        });
        return headers;
    }
    Body.call(Request.prototype);
    function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        if (!options) {
            options = {};
        }
        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
        }
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
    }
    Body.call(Response.prototype);
    Response.prototype.clone = function() {
        return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
        });
    };
    Response.error = function() {
        var response = new Response(null, {
            status: 200,
            statusText: ''
        });
        response.ok = false;
        response.status = 0;
        response.type = 'error';
        return response;
    };
    var redirectStatuses = [
        301,
        302,
        303,
        307,
        308
    ];
    Response.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code');
        }
        return new Response(null, {
            status: status,
            headers: {
                location: url
            }
        });
    };
    exports1.DOMException = g.DOMException;
    try {
        new exports1.DOMException();
    } catch (err) {
        exports1.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
        };
        exports1.DOMException.prototype = Object.create(Error.prototype);
        exports1.DOMException.prototype.constructor = exports1.DOMException;
    }
    function fetch(input, init) {
        return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
                return reject(new exports1.DOMException('Aborted', 'AbortError'));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
                xhr.abort();
            }
            xhr.onload = function() {
                var options = {
                    statusText: xhr.statusText,
                    headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                };
                // This check if specifically for when a user fetches a file locally from the file system
                // Only if the status is out of a normal range
                if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
                    options.status = 200;
                } else {
                    options.status = xhr.status;
                }
                options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                var body = 'response' in xhr ? xhr.response : xhr.responseText;
                setTimeout(function() {
                    resolve(new Response(body, options));
                }, 0);
            };
            xhr.onerror = function() {
                setTimeout(function() {
                    reject(new TypeError('Network request failed'));
                }, 0);
            };
            xhr.ontimeout = function() {
                setTimeout(function() {
                    reject(new TypeError('Network request timed out'));
                }, 0);
            };
            xhr.onabort = function() {
                setTimeout(function() {
                    reject(new exports1.DOMException('Aborted', 'AbortError'));
                }, 0);
            };
            function fixUrl(url) {
                try {
                    return url === '' && g.location.href ? g.location.href : url;
                } catch (e) {
                    return url;
                }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === 'include') {
                xhr.withCredentials = true;
            } else if (request.credentials === 'omit') {
                xhr.withCredentials = false;
            }
            if ('responseType' in xhr) {
                if (support.blob) {
                    xhr.responseType = 'blob';
                } else if (support.arrayBuffer) {
                    xhr.responseType = 'arraybuffer';
                }
            }
            if (init && _type_of._(init.headers) === 'object' && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
                var names = [];
                Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                    names.push(normalizeName(name));
                    xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                });
                request.headers.forEach(function(value, name) {
                    if (names.indexOf(name) === -1) {
                        xhr.setRequestHeader(name, value);
                    }
                });
            } else {
                request.headers.forEach(function(value, name) {
                    xhr.setRequestHeader(name, value);
                });
            }
            if (request.signal) {
                request.signal.addEventListener('abort', abortXhr);
                xhr.onreadystatechange = function() {
                    // DONE (success or failure)
                    if (xhr.readyState === 4) {
                        request.signal.removeEventListener('abort', abortXhr);
                    }
                };
            }
            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
        });
    }
    fetch.polyfill = true;
    if (!g.fetch) {
        g.fetch = fetch;
        g.Headers = Headers;
        g.Request = Request;
        g.Response = Response;
    }
    exports1.Headers = Headers;
    exports1.Request = Request;
    exports1.Response = Response;
    exports1.fetch = fetch;
    Object.defineProperty(exports1, '__esModule', {
        value: true
    });
});


}),
93425: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _ts_generator = __webpack_require__(63563);
var hasNativeConstructor = (__webpack_require__(21591)/* .hasNativeConstructor */.hasNativeConstructor);
var polyfillGlobal = (__webpack_require__(6086)/* .polyfillGlobal */.polyfillGlobal);
/**
 * Set up regenerator.
 * You can use this module directly, or just require InitializeCore.
 */ var hasNativeGenerator;
try {
    // If this function was lowered by regenerator-transform, it will try to
    // access `global.regeneratorRuntime` which doesn't exist yet and will throw.
    hasNativeGenerator = hasNativeConstructor(function() {
        return _ts_generator._(this, function(_state) {
            return [
                2
            ];
        });
    }, 'GeneratorFunction');
} catch (e) {
    // In this case, we know generators are not provided natively.
    hasNativeGenerator = false;
}
// If generators are provided natively, which suggests that there was no
// regenerator-transform, then there is no need to set up the runtime.
if (!hasNativeGenerator) {
    polyfillGlobal('regeneratorRuntime', function() {
        // The require just sets up the global, so make sure when we first
        // invoke it the global does not exist
        delete __webpack_require__.g.regeneratorRuntime;
        // regenerator-runtime/runtime exports the regeneratorRuntime object, so we
        // can return it safely.
        return __webpack_require__(81688); // flowlint-line untyped-import:off
    });
}


}),
94852: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 'use client';
'use strict';
/**
 * Sets up global variables for React Native.
 * You can use this module directly, or just require InitializeCore.
 */ if (__webpack_require__.g.window === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.window = __webpack_require__.g;
}
if (__webpack_require__.g.self === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.self = __webpack_require__.g;
}
// Set up process
// $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
__webpack_require__.g.process = __webpack_require__.g.process || {};
// $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
__webpack_require__.g.process.env = __webpack_require__.g.process.env || {};
if (!__webpack_require__.g.process.env.NODE_ENV) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.process.env.NODE_ENV =  false ? 0 : 'production';
}


}),
95151: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var SamplingProfiler = {
    poke: function poke(token) {
        var error = null;
        var result = null;
        try {
            result = __webpack_require__.g.pokeSamplingProfiler();
            if (result === null) {
                console.log('The JSC Sampling Profiler has started');
            } else {
                console.log('The JSC Sampling Profiler has stopped');
            }
        } catch (e) {
            console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
            error = e.toString();
        }
        var NativeJSCSamplingProfiler = (__webpack_require__(83369)/* ["default"] */["default"]);
        if (NativeJSCSamplingProfiler) {
            NativeJSCSamplingProfiler.operationComplete(token, result, error);
        }
    }
};
module.exports = SamplingProfiler;


}),
96468: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
/**
 * Set up alert().
 * You can use this module directly, or just require InitializeCore.
 */ if (!__webpack_require__.g.alert) {
    __webpack_require__.g.alert = function(text) {
        // Require Alert on demand. Requiring it too early can lead to issues
        // with things like Platform not being fully initialized.
        (__webpack_require__(50792)/* .alert */.alert)('Alert', '' + text);
    };
}


}),
96659: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
// This shim ensures DEV binary builds don't crash in JS
// when they're combined with a PROD JavaScript build.
var HMRClientProdShim = {
    setup: function() {},
    enable: function() {
        console.error('Fast Refresh is disabled in JavaScript bundles built in production mode. ' + 'Did you forget to run Metro?');
    },
    disable: function() {},
    registerBundle: function() {},
    log: function() {},
    unstable_notifyFuseboxConsoleEnabled: function() {}
};
module.exports = HMRClientProdShim;


}),
98882: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _create_class = __webpack_require__(51302);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _object_without_properties_loose = __webpack_require__(35684);
var _to_consumable_array = __webpack_require__(8034);
var _Blob = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88829));
var _BlobManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89892));
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31043));
var _binaryToBase64 = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73532));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93839));
var _NativeWebSocketModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19089));
var _WebSocketEvent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(48250));
var _base64js = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18959));
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28987));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var CONNECTING = 0;
var OPEN = 1;
var CLOSING = 2;
var CLOSED = 3;
var CLOSE_NORMAL = 1000;
// Abnormal closure where no code is provided in a control frame
// https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5
var CLOSE_ABNORMAL = 1006;
var WEBSOCKET_EVENTS = [
    'close',
    'error',
    'message',
    'open'
];
var nextWebSocketId = 0;
/**
 * Browser-compatible WebSockets implementation.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
 * See https://github.com/websockets/ws
 */ var WebSocket = /*#__PURE__*/ function(_EventTarget) {
    "use strict";
    _inherits._(WebSocket, _EventTarget);
    function WebSocket(url, protocols, options) {
        var _this;
        _this = _EventTarget.call(this) || this, _this.CONNECTING = CONNECTING, _this.OPEN = OPEN, _this.CLOSING = CLOSING, _this.CLOSED = CLOSED, _this.readyState = CONNECTING;
        _this.url = url;
        if (typeof protocols === 'string') {
            protocols = [
                protocols
            ];
        }
        var _ref = options || {}, _ref_headers = _ref.headers, headers = _ref_headers === void 0 ? {} : _ref_headers, unrecognized = _object_without_properties_loose._(_ref, [
            "headers"
        ]);
        // Preserve deprecated backwards compatibility for the 'origin' option
        // $FlowFixMe[prop-missing]
        if (unrecognized && typeof unrecognized.origin === 'string') {
            console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
            /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
       * oss) This comment suppresses an error found when Flow v0.54 was
       * deployed. To see the error delete this comment and run Flow. */ headers.origin = unrecognized.origin;
            /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
       * oss) This comment suppresses an error found when Flow v0.54 was
       * deployed. To see the error delete this comment and run Flow. */ delete unrecognized.origin;
        }
        // Warn about and discard anything else
        if (Object.keys(unrecognized).length > 0) {
            console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
        }
        if (!Array.isArray(protocols)) {
            protocols = null;
        }
        _this._eventEmitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeWebSocketModule.default);
        _this._socketId = nextWebSocketId++;
        _this._registerEvents();
        _NativeWebSocketModule.default.connect(url, protocols, {
            headers: headers
        }, _this._socketId);
        return _this;
    }
    var _proto = WebSocket.prototype;
    _proto.close = function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
            return;
        }
        this.readyState = this.CLOSING;
        this._close(code, reason);
    };
    _proto.send = function send(data) {
        if (this.readyState === this.CONNECTING) {
            throw new Error('INVALID_STATE_ERR');
        }
        if (data instanceof _Blob.default) {
            (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
            _BlobManager.default.sendOverSocket(data, this._socketId);
            return;
        }
        if (typeof data === 'string') {
            _NativeWebSocketModule.default.send(data, this._socketId);
            return;
        }
        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
            _NativeWebSocketModule.default.sendBinary((0, _binaryToBase64.default)(data), this._socketId);
            return;
        }
        throw new Error('Unsupported data type');
    };
    _proto.ping = function ping() {
        if (this.readyState === this.CONNECTING) {
            throw new Error('INVALID_STATE_ERR');
        }
        _NativeWebSocketModule.default.ping(this._socketId);
    };
    _proto._close = function _close(code, reason) {
        // See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';
        _NativeWebSocketModule.default.close(statusCode, closeReason, this._socketId);
        if (_BlobManager.default.isAvailable && this._binaryType === 'blob') {
            _BlobManager.default.removeWebSocketHandler(this._socketId);
        }
    };
    _proto._unregisterEvents = function _unregisterEvents() {
        this._subscriptions.forEach(function(e) {
            return e.remove();
        });
        this._subscriptions = [];
    };
    _proto._registerEvents = function _registerEvents() {
        var _this = this;
        this._subscriptions = [
            this._eventEmitter.addListener('websocketMessage', function(ev) {
                if (ev.id !== _this._socketId) {
                    return;
                }
                var data = ev.data;
                switch(ev.type){
                    case 'binary':
                        data = _base64js.default.toByteArray(ev.data).buffer;
                        break;
                    case 'blob':
                        data = _BlobManager.default.createFromOptions(ev.data);
                        break;
                }
                _this.dispatchEvent(new _WebSocketEvent.default('message', {
                    data: data
                }));
            }),
            this._eventEmitter.addListener('websocketOpen', function(ev) {
                if (ev.id !== _this._socketId) {
                    return;
                }
                _this.readyState = _this.OPEN;
                _this.protocol = ev.protocol;
                _this.dispatchEvent(new _WebSocketEvent.default('open'));
            }),
            this._eventEmitter.addListener('websocketClosed', function(ev) {
                if (ev.id !== _this._socketId) {
                    return;
                }
                _this.readyState = _this.CLOSED;
                _this.dispatchEvent(new _WebSocketEvent.default('close', {
                    code: ev.code,
                    reason: ev.reason
                }));
                _this._unregisterEvents();
                _this.close();
            }),
            this._eventEmitter.addListener('websocketFailed', function(ev) {
                if (ev.id !== _this._socketId) {
                    return;
                }
                _this.readyState = _this.CLOSED;
                _this.dispatchEvent(new _WebSocketEvent.default('error', {
                    message: ev.message
                }));
                _this.dispatchEvent(new _WebSocketEvent.default('close', {
                    code: CLOSE_ABNORMAL,
                    reason: ev.message
                }));
                _this._unregisterEvents();
                _this.close();
            })
        ];
    };
    _create_class._(WebSocket, [
        {
            key: "binaryType",
            get: function get() {
                return this._binaryType;
            },
            set: function set(binaryType) {
                if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
                    throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
                }
                if (this._binaryType === 'blob' || binaryType === 'blob') {
                    (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
                    if (binaryType === 'blob') {
                        _BlobManager.default.addWebSocketHandler(this._socketId);
                    } else {
                        _BlobManager.default.removeWebSocketHandler(this._socketId);
                    }
                }
                this._binaryType = binaryType;
            }
        }
    ]);
    return WebSocket;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(WEBSOCKET_EVENTS)));
WebSocket.CONNECTING = CONNECTING;
WebSocket.OPEN = OPEN;
WebSocket.CLOSING = CLOSING;
WebSocket.CLOSED = CLOSED;
module.exports = WebSocket;


}),
99507: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

var Promise = __webpack_require__(89801);
module.exports = Promise;
Promise.prototype["finally"] = function(f) {
    return this.then(function(value) {
        return Promise.resolve(f()).then(function() {
            return value;
        });
    }, function(err) {
        return Promise.resolve(f()).then(function() {
            throw err;
        });
    });
};


}),
99890: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var ReactNativeFeatureFlags = __webpack_require__(26044);
var NativeReactNativeFeatureFlags = (__webpack_require__(73827)/* ["default"] */["default"]);
var polyfillGlobal = (__webpack_require__(6086)/* .polyfillGlobal */.polyfillGlobal);
if (false) {}
// In bridgeless mode, timers are host functions installed from cpp.
if (__webpack_require__.g.RN$Bridgeless !== true) {
    /**
   * Set up timers.
   * You can use this module directly, or just require InitializeCore.
   */ var defineLazyTimer = function(name) {
        polyfillGlobal(name, function() {
            return __webpack_require__(82869)[name];
        });
    };
    defineLazyTimer('setTimeout');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('clearInterval');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
} else if (// TODO remove this condition when bridgeless == modern scheduler everywhere.
NativeReactNativeFeatureFlags != null && // eslint-disable-next-line react-hooks/rules-of-hooks -- false positive due to `use` prefix
ReactNativeFeatureFlags.useModernRuntimeScheduler()) {
    polyfillGlobal('requestIdleCallback', function() {
        return (__webpack_require__(52566)/* ["default"].requestIdleCallback */["default"].requestIdleCallback);
    });
    polyfillGlobal('cancelIdleCallback', function() {
        return (__webpack_require__(52566)/* ["default"].cancelIdleCallback */["default"].cancelIdleCallback);
    });
}
// We need to check if the native module is available before accessing the
// feature flag, because otherwise the API would throw an error in the legacy
// architecture in OSS, where the native module isn't available.
if (NativeReactNativeFeatureFlags != null && ReactNativeFeatureFlags.enableMicrotasks()) {
    // This is the flag that tells React to use `queueMicrotask` to batch state
    // updates, instead of using the scheduler to schedule a regular task.
    // We use a global variable because we don't currently have any other
    // mechanism to pass feature flags from RN to React in OSS.
    __webpack_require__.g.RN$enableMicrotasksInReact = true;
    polyfillGlobal('queueMicrotask', function() {
        return (__webpack_require__(15417)/* ["default"].queueMicrotask */["default"].queueMicrotask);
    });
    // We shim the immediate APIs via `queueMicrotask` to maintain the backward
    // compatibility.
    polyfillGlobal('setImmediate', function() {
        return (__webpack_require__(41678)/* .setImmediate */.setImmediate);
    });
    polyfillGlobal('clearImmediate', function() {
        return (__webpack_require__(41678)/* .clearImmediate */.clearImmediate);
    });
} else {
    // Polyfill it with promise (regardless it's polyfilled or native) otherwise.
    polyfillGlobal('queueMicrotask', function() {
        return (__webpack_require__(22880)/* ["default"] */["default"]);
    });
    // When promise was polyfilled hence is queued to the RN microtask queue,
    // we polyfill the immediate APIs as aliases to the ReactNativeMicrotask APIs.
    // Note that in bridgeless mode, immediate APIs are installed from cpp.
    if (__webpack_require__.g.RN$Bridgeless !== true) {
        polyfillGlobal('setImmediate', function() {
            return (__webpack_require__(82869)/* .queueReactNativeMicrotask */.queueReactNativeMicrotask);
        });
        polyfillGlobal('clearImmediate', function() {
            return (__webpack_require__(82869)/* .clearReactNativeMicrotask */.clearReactNativeMicrotask);
        });
    }
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_ReactPrivate_ReactNativePrivateInitializeCore_js.chunk.bundle.map?platform=ios/* RCSSB */eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYXNoIjoiZWM3MGVmZjJlOWNjYmIwNmQxNjg4MDNhYTExOWM5MGQwZGU0NDhhZDY5OTJlZDhiMjYxODBhODViYjY4MDU3MiIsImlhdCI6MTc0ODg0NzM0MX0.aPj_fBxQ2unJ37iIIZ1TTAaUGRyR6des5hNBzzVifjYrcEOC52vtCkkHYjSDhlMNqOF9Z4BfN0vF5sdidZFFcxoJsYLhxtebtjdhtIeiZsrtCsQcxJ4p8UMI-lcSsYo7g5p9gMrIwZaSUAB2pB2uKwDzsH7EZmMCqOaz43qGzEpcefn99ZLV1HZ3g3gkDyDvGNXcKqrczHSHGoRXrMSL0Co-u4DdHWqjsyd9KaKo1po3HCim_6ZlRaqjUh7Xm8ASM4Wt9wI92souiDc2abdm0TdEj0JWSXwziEgOmdb_GR2vZ3FZV66ZXHoq4sYHEcYPj3mSNt0KJghBGTt_1PcM9w                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              