{"version":3,"file":"vendors-node_modules_react-native_virtualized-lists_index_js.chunk.bundle","sources":["webpack:///./node_modules/@react-native/virtualized-lists/Utilities/clamp.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/VirtualizedListCellRenderer.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/VirtualizeUtils.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/VirtualizedListContext.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/FillRateHelper.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/VirtualizedSectionList.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/CellRenderMask.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/ListMetricsAggregator.js","webpack:///./node_modules/@react-native/virtualized-lists/Interaction/Batchinator.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/VirtualizedList.js","webpack:///./node_modules/@react-native/virtualized-lists/index.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/ChildListCollection.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/VirtualizedListProps.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/ViewabilityHelper.js","webpack:///./node_modules/@react-native/virtualized-lists/Lists/StateSafePureComponent.js","webpack:///./node_modules/@react-native/virtualized-lists/Utilities/infoLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n'use strict';\n\nfunction clamp(min        , value        , max        )         {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\nmodule.exports = clamp;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\nimport * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';\n                                                                              \n                                                                                \n             \n             \n              \n                                                     \n\nimport {VirtualizedListCellContextProvider} from './VirtualizedListContext.js';\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\n\n                            \n                                                                         \n                                               \n                                                      \n    \n                                                                       \n                  \n                       \n                \n                                \n              \n                                                                              \n                                                 \n                                       \n                       \n                             \n                                          \n            \n                       \n                                      \n     \n  \n\n                                         \n                       \n                      \n    \n\n                     \n                                        \n     \n  \n\nexport default class CellRenderer        extends React.PureComponent \n               \n               \n  {\n  state               = {\n    separatorProps: {\n      highlighted: false,\n      leadingItem: this.props.item,\n    },\n  };\n\n  static getDerivedStateFromProps(\n    props              ,\n    prevState              ,\n  )                {\n    if (ReactNativeFeatureFlags.enableOptimisedVirtualizedCells()) {\n      if (props.item !== prevState.separatorProps.leadingItem) {\n        return {\n          separatorProps: {\n            ...prevState.separatorProps,\n            leadingItem: props.item,\n          },\n        };\n      }\n      return null;\n    } else {\n      return {\n        separatorProps: {\n          ...prevState.separatorProps,\n          leadingItem: props.item,\n        },\n      };\n    }\n  }\n\n  // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not\n  // reused by SectionList and we can keep VirtualizedList simpler.\n  // $FlowFixMe[missing-local-annot]\n  _separators = {\n    highlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: true,\n      });\n    },\n    unhighlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: false,\n      });\n    },\n    updateProps: (\n      select                        ,\n      newProps                       ,\n    ) => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators(\n        [select === 'leading' ? prevCellKey : cellKey],\n        newProps,\n      );\n    },\n  };\n\n  updateSeparatorProps(newProps                       ) {\n    this.setState(state => ({\n      separatorProps: {...state.separatorProps, ...newProps},\n    }));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount(this.props.cellKey);\n  }\n\n  _onLayout = (nativeEvent             )       => {\n    this.props.onCellLayout?.(\n      nativeEvent,\n      this.props.cellKey,\n      this.props.index,\n    );\n  };\n\n  _onCellFocusCapture = (e            )       => {\n    this.props.onCellFocusCapture?.(this.props.cellKey);\n  };\n\n  _renderElement(\n    renderItem                        ,\n    ListItemComponent     ,\n    item       ,\n    index        ,\n  )             {\n    if (renderItem && ListItemComponent) {\n      console.warn(\n        'VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' +\n          ' precedence over renderItem.',\n      );\n    }\n\n    if (ListItemComponent) {\n      return (\n        <ListItemComponent\n          item={item}\n          index={index}\n          separators={this._separators}\n        />\n      );\n    }\n\n    if (renderItem) {\n      return renderItem({\n        item,\n        index,\n        separators: this._separators,\n      });\n    }\n\n    invariant(\n      false,\n      'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.',\n    );\n  }\n\n  render()             {\n    const {\n      CellRendererComponent,\n      ItemSeparatorComponent,\n      ListItemComponent,\n      cellKey,\n      horizontal,\n      item,\n      index,\n      inversionStyle,\n      onCellLayout,\n      renderItem,\n    } = this.props;\n    const element = this._renderElement(\n      renderItem,\n      ListItemComponent,\n      item,\n      index,\n    );\n\n    // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and\n    // called explicitly by `ScrollViewStickyHeader`.\n    const itemSeparator             = React.isValidElement(\n      ItemSeparatorComponent,\n    )\n      ? // $FlowFixMe[incompatible-type]\n        ItemSeparatorComponent\n      : // $FlowFixMe[incompatible-type]\n        ItemSeparatorComponent && (\n          <ItemSeparatorComponent {...this.state.separatorProps} />\n        );\n    const cellStyle = inversionStyle\n      ? horizontal\n        ? [styles.rowReverse, inversionStyle]\n        : [styles.columnReverse, inversionStyle]\n      : horizontal\n        ? [styles.row, inversionStyle]\n        : inversionStyle;\n    const result = !CellRendererComponent ? (\n      <View\n        style={cellStyle}\n        onFocusCapture={this._onCellFocusCapture}\n        {...(onCellLayout && {onLayout: this._onLayout})}>\n        {element}\n        {itemSeparator}\n      </View>\n    ) : (\n      <CellRendererComponent\n        cellKey={cellKey}\n        index={index}\n        item={item}\n        style={cellStyle}\n        onFocusCapture={this._onCellFocusCapture}\n        {...(onCellLayout && {onLayout: this._onLayout})}>\n        {element}\n        {itemSeparator}\n      </CellRendererComponent>\n    );\n\n    return (\n      <VirtualizedListCellContextProvider cellKey={this.props.cellKey}>\n        {result}\n      </VirtualizedListCellContextProvider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  rowReverse: {\n    flexDirection: 'row-reverse',\n  },\n  columnReverse: {\n    flexDirection: 'column-reverse',\n  },\n});\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n'use strict';\n\n                                    \n                  \n                                 \n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nexport function elementsThatOverlapOffsets(\n  offsets               ,\n  props                 ,\n  listMetrics                       ,\n  zoomScale         = 1,\n)                {\n  const itemCount = props.getItemCount(props.data);\n  const result = [];\n  for (let offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {\n    const currentOffset = offsets[offsetIndex];\n    let left = 0;\n    let right = itemCount - 1;\n\n    while (left <= right) {\n      const mid = left + Math.floor((right - left) / 2);\n      const frame = listMetrics.getCellMetricsApprox(mid, props);\n      const scaledOffsetStart = frame.offset * zoomScale;\n      const scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;\n\n      // We want the first frame that contains the offset, with inclusive bounds. Thus, for the\n      // first frame the scaledOffsetStart is inclusive, while for other frames it is exclusive.\n      if (\n        (mid === 0 && currentOffset < scaledOffsetStart) ||\n        (mid !== 0 && currentOffset <= scaledOffsetStart)\n      ) {\n        right = mid - 1;\n      } else if (currentOffset > scaledOffsetEnd) {\n        left = mid + 1;\n      } else {\n        result[offsetIndex] = mid;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nexport function newRangeCount(\n  prev   \n                  \n                 \n       \n   ,\n  next   \n                  \n                 \n       \n   ,\n)         {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nexport function computeWindowedRenderLimits(\n  props                 ,\n  maxToRenderPerBatch        ,\n  windowSize        ,\n  prev   \n                  \n                 \n   ,\n  listMetrics                       ,\n  scrollMetrics   \n               \n                   \n                     \n                          \n                      \n       \n   ,\n)   \n                \n               \n  {\n  const itemCount = props.getItemCount(props.data);\n  if (itemCount === 0) {\n    return {first: 0, last: -1};\n  }\n  const {offset, velocity, visibleLength, zoomScale = 1} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset =\n    listMetrics.getCellMetricsApprox(itemCount - 1, props).offset * zoomScale;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    props,\n    listMetrics,\n    zoomScale,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n    const firstWillAddMore = first <= prev.first || first > prev.last;\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastWillAddMore = last >= prev.last || last < prev.first;\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nexport function keyExtractor(item     , index        )         {\n  if (typeof item === 'object' && item?.key != null) {\n    return item.key;\n  }\n  if (typeof item === 'object' && item?.id != null) {\n    return item.id;\n  }\n  return String(index);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n                                                       \n\nimport * as React from 'react';\nimport {useContext, useMemo} from 'react';\n\n                          \n                   \n                           \n                          \n                    \n               \n                   \n                      \n                     \n                          \n                      \n    \n                       \n                                                                     \n                           \n                    \n                                           \n             \n                                                                              \n   \n\nexport const VirtualizedListContext                          =\n  React.createContext(null);\nif (__DEV__) {\n  VirtualizedListContext.displayName = 'VirtualizedListContext';\n}\n\n/**\n * Resets the context. Intended for use by portal-like components (e.g. Modal).\n */\nexport function VirtualizedListContextResetter({\n  children,\n}   \n                       \n )             {\n  return (\n    <VirtualizedListContext.Provider value={null}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the context with memoization. Intended to be used by `VirtualizedList`.\n */\nexport function VirtualizedListContextProvider({\n  children,\n  value,\n}   \n                       \n                 \n )             {\n  // Avoid setting a newly created context object if the values are identical.\n  const context = useMemo(\n    () => ({\n      cellKey: null,\n      getScrollMetrics: value.getScrollMetrics,\n      horizontal: value.horizontal,\n      getOutermostParentListRef: value.getOutermostParentListRef,\n      registerAsNestedChild: value.registerAsNestedChild,\n      unregisterAsNestedChild: value.unregisterAsNestedChild,\n    }),\n    [\n      value.getScrollMetrics,\n      value.horizontal,\n      value.getOutermostParentListRef,\n      value.registerAsNestedChild,\n      value.unregisterAsNestedChild,\n    ],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the `cellKey`. Intended to be used by `VirtualizedList` for each cell.\n */\nexport function VirtualizedListCellContextProvider({\n  cellKey,\n  children,\n}   \n                  \n                       \n )             {\n  // Avoid setting a newly created context object if the values are identical.\n  const currContext = useContext(VirtualizedListContext);\n  const context = useMemo(\n    () => (currContext == null ? null : {...currContext, cellKey}),\n    [currContext, cellKey],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n'use strict';\n\n                                                             \n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\n                                \n\nclass Info {\n  any_blank_count         = 0;\n  any_blank_ms         = 0;\n  any_blank_speed_sum         = 0;\n  mostly_blank_count         = 0;\n  mostly_blank_ms         = 0;\n  pixels_blank         = 0;\n  pixels_sampled         = 0;\n  pixels_scrolled         = 0;\n  total_time_spent         = 0;\n  sample_count         = 0;\n}\n\nconst DEBUG = false;\n\nlet _listeners                        = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime          = null;\n  _enabled = false;\n  _listMetrics                       ;\n  _info       = new Info();\n  _mostlyBlankStartTime          = null;\n  _samplesStartTime          = null;\n\n  static addListener(callback                      )   \n                       \n       \n    {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate        ) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount        ) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(listMetrics                       ) {\n    this._listMetrics = listMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info      = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        // $FlowFixMe[prop-missing]\n        // $FlowFixMe[invalid-computed-prop]\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props   \n                         \n                                   \n         \n     ,\n    cellsAroundViewport   \n                    \n                   \n         \n     ,\n    scrollMetrics   \n                      \n                     \n                       \n                            \n         \n     ,\n  )         {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      cellsAroundViewport.last < cellsAroundViewport.first ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = cellsAroundViewport.first;\n    let firstFrame = this._listMetrics.getCellMetrics(first, props);\n    while (\n      first <= cellsAroundViewport.last &&\n      (!firstFrame || !firstFrame.isMounted)\n    ) {\n      firstFrame = this._listMetrics.getCellMetrics(first, props);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = cellsAroundViewport.last;\n    let lastFrame = this._listMetrics.getCellMetrics(last, props);\n    while (\n      last >= cellsAroundViewport.first &&\n      (!lastFrame || !lastFrame.isMounted)\n    ) {\n      lastFrame = this._listMetrics.getCellMetrics(last, props);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled()          {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n                                                   \n\nimport VirtualizedList from './VirtualizedList';\nimport {keyExtractor as defaultKeyExtractor} from './VirtualizeUtils';\nimport invariant from 'invariant';\nimport * as React from 'react';\n                \n\n                                         \n     \n                                                  \n     \n                                     \n     \n                                                                                                  \n                                             \n     \n               \n                                                                        \n                        \n                       \n                  \n                                       \n                 \n                            \n                              \n                                                                              \n         \n      \n       \n                                  \n                                                     \n                                                                 \n     \n  \n\n                                                   \n                                     \n   \n\n                                                   \n     \n                                                      \n     \n                       \n               \n                  \n                      \n                 \n                            \n                              \n                                                                              \n         \n      \n       \n                          \n     \n                                                                                                  \n                                            \n     \n                                                                               \n     \n                                            \n     \n                                                                               \n     \n                                                                                \n                                                                                                   \n                                                                                                \n                                                                                                 \n                                                        \n     \n                                                        \n     \n                                                                                                \n                                                                           \n     \n                                        \n                                                           \n   \n\n                                                                        \n\n                                \n                             \n                             \n           \n                         \n     \n                                                                    \n                                                        \n         \n      \n    \n   \n                                           \n                      \n                    \n                       \n                      \n                        \n   \n\n                                                     \n\n/**\n * Right now this just flattens everything into one list and uses VirtualizedList under the\n * hood. The only operation that might not scale well is concatting the data arrays of all the\n * sections when new props are received, which should be plenty fast for up to ~10,000 items.\n */\nclass VirtualizedSectionList \n                             \n  extends React.PureComponent                         {\n  scrollToLocation(params                            ) {\n    let index = params.itemIndex;\n    for (let i = 0; i < params.sectionIndex; i++) {\n      index += this.props.getItemCount(this.props.sections[i].data) + 2;\n    }\n    let viewOffset = params.viewOffset || 0;\n    if (this._listRef == null) {\n      return;\n    }\n    const listRef = this._listRef;\n    if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {\n      const frame = listRef\n        .__getListMetrics()\n        .getCellMetricsApprox(index - params.itemIndex, listRef.props);\n      viewOffset += frame.length;\n    }\n    const toIndexParams = {\n      ...params,\n      viewOffset,\n      index,\n    };\n    // $FlowFixMe[incompatible-use]\n    this._listRef.scrollToIndex(toIndexParams);\n  }\n\n  getListRef()                                            {\n    return this._listRef;\n  }\n\n  render()             {\n    const {\n      ItemSeparatorComponent, // don't pass through, rendered with renderItem\n      SectionSeparatorComponent,\n      renderItem: _renderItem,\n      renderSectionFooter,\n      renderSectionHeader,\n      sections: _sections,\n      stickySectionHeadersEnabled,\n      ...passThroughProps\n    } = this.props;\n\n    const listHeaderOffset = this.props.ListHeaderComponent ? 1 : 0;\n\n    const stickyHeaderIndices = this.props.stickySectionHeadersEnabled\n      ? ([]               )\n      : undefined;\n\n    let itemCount = 0;\n    for (const section of this.props.sections) {\n      // Track the section header indices\n      if (stickyHeaderIndices != null) {\n        stickyHeaderIndices.push(itemCount + listHeaderOffset);\n      }\n\n      // Add two for the section header and footer.\n      itemCount += 2;\n      itemCount += this.props.getItemCount(section.data);\n    }\n    const renderItem = this._renderItem(itemCount);\n\n    return (\n      <VirtualizedList\n        {...passThroughProps}\n        keyExtractor={this._keyExtractor}\n        stickyHeaderIndices={stickyHeaderIndices}\n        renderItem={renderItem}\n        data={this.props.sections}\n        getItem={(sections, index) =>\n          this._getItem(this.props, sections, index)\n        }\n        getItemCount={() => itemCount}\n        onViewableItemsChanged={\n          this.props.onViewableItemsChanged\n            ? this._onViewableItemsChanged\n            : undefined\n        }\n        ref={this._captureRef}\n      />\n    );\n  }\n\n  _getItem(\n    props                 ,\n    sections                       ,\n    index        ,\n  )        {\n    if (!sections) {\n      return null;\n    }\n    let itemIdx = index - 1;\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const sectionData = section.data;\n      const itemCount = props.getItemCount(sectionData);\n      if (itemIdx === -1 || itemIdx === itemCount) {\n        // We intend for there to be overflow by one on both ends of the list.\n        // This will be for headers and footers. When returning a header or footer\n        // item the section itself is the item.\n        return section;\n      } else if (itemIdx < itemCount) {\n        // If we are in the bounds of the list's data then return the item.\n        return props.getItem(sectionData, itemIdx);\n      } else {\n        itemIdx -= itemCount + 2; // Add two for the header and footer\n      }\n    }\n    return null;\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _keyExtractor = (item      , index        ) => {\n    const info = this._subExtractor(index);\n    return (info && info.key) || String(index);\n  };\n\n  _subExtractor(index        )    \n                      \n                                                            \n                \n                                        \n                   \n                                         \n                      \n                        \n                               \n                         \n                                \n       \n    {\n    let itemIndex = index;\n    const {getItem, getItemCount, keyExtractor, sections} = this.props;\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const sectionData = section.data;\n      const key = section.key || String(i);\n      itemIndex -= 1; // The section adds an item for the header\n      if (itemIndex >= getItemCount(sectionData) + 1) {\n        itemIndex -= getItemCount(sectionData) + 1; // The section adds an item for the footer.\n      } else if (itemIndex === -1) {\n        return {\n          section,\n          key: key + ':header',\n          index: null,\n          header: true,\n          trailingSection: sections[i + 1],\n        };\n      } else if (itemIndex === getItemCount(sectionData)) {\n        return {\n          section,\n          key: key + ':footer',\n          index: null,\n          header: false,\n          trailingSection: sections[i + 1],\n        };\n      } else {\n        const extractor =\n          section.keyExtractor || keyExtractor || defaultKeyExtractor;\n        return {\n          section,\n          key:\n            key + ':' + extractor(getItem(sectionData, itemIndex), itemIndex),\n          index: itemIndex,\n          leadingItem: getItem(sectionData, itemIndex - 1),\n          leadingSection: sections[i - 1],\n          trailingItem: getItem(sectionData, itemIndex + 1),\n          trailingSection: sections[i + 1],\n        };\n      }\n    }\n  }\n\n  _convertViewable = (viewable           )             => {\n    invariant(viewable.index != null, 'Received a broken ViewToken');\n    const info = this._subExtractor(viewable.index);\n    if (!info) {\n      return null;\n    }\n    const keyExtractorWithNullableIndex = info.section.keyExtractor;\n    const keyExtractorWithNonNullableIndex =\n      this.props.keyExtractor || defaultKeyExtractor;\n    const key =\n      keyExtractorWithNullableIndex != null\n        ? keyExtractorWithNullableIndex(viewable.item, info.index)\n        : keyExtractorWithNonNullableIndex(viewable.item, info.index ?? 0);\n\n    return {\n      ...viewable,\n      index: info.index,\n      key,\n      section: info.section,\n    };\n  };\n\n  _onViewableItemsChanged = ({\n    viewableItems,\n    changed,\n  }   \n                                    \n                              \n       \n   ) => {\n    const onViewableItemsChanged = this.props.onViewableItemsChanged;\n    if (onViewableItemsChanged != null) {\n      onViewableItemsChanged({\n        viewableItems: viewableItems\n          .map(this._convertViewable, this)\n          .filter(Boolean),\n        changed: changed.map(this._convertViewable, this).filter(Boolean),\n      });\n    }\n  };\n\n  _renderItem =\n    (listItemCount        )             =>\n    // eslint-disable-next-line react/no-unstable-nested-components\n    ({item, index}                                  ) => {\n      const info = this._subExtractor(index);\n      if (!info) {\n        return null;\n      }\n      const infoIndex = info.index;\n      if (infoIndex == null) {\n        const {section} = info;\n        if (info.header === true) {\n          const {renderSectionHeader} = this.props;\n          return renderSectionHeader ? renderSectionHeader({section}) : null;\n        } else {\n          const {renderSectionFooter} = this.props;\n          return renderSectionFooter ? renderSectionFooter({section}) : null;\n        }\n      } else {\n        const renderItem = info.section.renderItem || this.props.renderItem;\n        const SeparatorComponent = this._getSeparatorComponent(\n          index,\n          info,\n          listItemCount,\n        );\n        invariant(renderItem, 'no renderItem!');\n        return (\n          <ItemWithSeparator\n            SeparatorComponent={SeparatorComponent}\n            LeadingSeparatorComponent={\n              infoIndex === 0 ? this.props.SectionSeparatorComponent : undefined\n            }\n            cellKey={info.key}\n            index={infoIndex}\n            item={item}\n            leadingItem={info.leadingItem}\n            leadingSection={info.leadingSection}\n            prevCellKey={(this._subExtractor(index - 1) || {}).key}\n            // Callback to provide updateHighlight for this item\n            setSelfHighlightCallback={this._setUpdateHighlightFor}\n            setSelfUpdatePropsCallback={this._setUpdatePropsFor}\n            // Provide child ability to set highlight/updateProps for previous item using prevCellKey\n            updateHighlightFor={this._updateHighlightFor}\n            updatePropsFor={this._updatePropsFor}\n            renderItem={renderItem}\n            section={info.section}\n            trailingItem={info.trailingItem}\n            trailingSection={info.trailingSection}\n            inverted={!!this.props.inverted}\n          />\n        );\n      }\n    };\n\n  _updatePropsFor = (cellKey        , value     ) => {\n    const updateProps = this._updatePropsMap[cellKey];\n    if (updateProps != null) {\n      updateProps(value);\n    }\n  };\n\n  _updateHighlightFor = (cellKey        , value         ) => {\n    const updateHighlight = this._updateHighlightMap[cellKey];\n    if (updateHighlight != null) {\n      updateHighlight(value);\n    }\n  };\n\n  _setUpdateHighlightFor = (\n    cellKey        ,\n    updateHighlightFn                    ,\n  ) => {\n    if (updateHighlightFn != null) {\n      this._updateHighlightMap[cellKey] = updateHighlightFn;\n    } else {\n      // $FlowFixMe[prop-missing]\n      delete this._updateHighlightFor[cellKey];\n    }\n  };\n\n  _setUpdatePropsFor = (cellKey        , updatePropsFn                    ) => {\n    if (updatePropsFn != null) {\n      this._updatePropsMap[cellKey] = updatePropsFn;\n    } else {\n      delete this._updatePropsMap[cellKey];\n    }\n  };\n\n  _getSeparatorComponent(\n    index        ,\n    info          ,\n    listItemCount        ,\n  )                            {\n    info = info || this._subExtractor(index);\n    if (!info) {\n      return null;\n    }\n    const ItemSeparatorComponent =\n      info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;\n    const {SectionSeparatorComponent} = this.props;\n    const isLastItemInList = index === listItemCount - 1;\n    const isLastItemInSection =\n      info.index === this.props.getItemCount(info.section.data) - 1;\n    if (SectionSeparatorComponent && isLastItemInSection) {\n      return SectionSeparatorComponent;\n    }\n    if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {\n      return ItemSeparatorComponent;\n    }\n    return null;\n  }\n\n  _updateHighlightMap                                = {};\n  _updatePropsMap                                       = {};\n  _listRef                  ;\n  _captureRef = (ref                        ) => {\n    this._listRef = ref;\n  };\n}\n\n                                                \n                     \n                          \n                  \n                      \n                           \n    \n\n                                          \n                                  \n                                                       \n                                                \n                  \n                \n             \n                             \n                    \n                                 \n            \n                               \n                    \n                                 \n            \n                        \n                                                                    \n                                                               \n                       \n                    \n    \n\nfunction ItemWithSeparator(props                        )             {\n  const {\n    LeadingSeparatorComponent,\n    // this is the trailing separator and is associated with this item\n    SeparatorComponent,\n    cellKey,\n    prevCellKey,\n    setSelfHighlightCallback,\n    updateHighlightFor,\n    setSelfUpdatePropsCallback,\n    updatePropsFor,\n    item,\n    index,\n    section,\n    inverted,\n  } = props;\n\n  const [leadingSeparatorHiglighted, setLeadingSeparatorHighlighted] =\n    React.useState(false);\n\n  const [separatorHighlighted, setSeparatorHighlighted] = React.useState(false);\n\n  const [leadingSeparatorProps, setLeadingSeparatorProps] = React.useState({\n    leadingItem: props.leadingItem,\n    leadingSection: props.leadingSection,\n    section: props.section,\n    trailingItem: props.item,\n    trailingSection: props.trailingSection,\n  });\n  const [separatorProps, setSeparatorProps] = React.useState({\n    leadingItem: props.item,\n    leadingSection: props.leadingSection,\n    section: props.section,\n    trailingItem: props.trailingItem,\n    trailingSection: props.trailingSection,\n  });\n\n  React.useEffect(() => {\n    setSelfHighlightCallback(cellKey, setSeparatorHighlighted);\n    // $FlowFixMe[incompatible-call]\n    setSelfUpdatePropsCallback(cellKey, setSeparatorProps);\n\n    return () => {\n      setSelfUpdatePropsCallback(cellKey, null);\n      setSelfHighlightCallback(cellKey, null);\n    };\n  }, [\n    cellKey,\n    setSelfHighlightCallback,\n    setSeparatorProps,\n    setSelfUpdatePropsCallback,\n  ]);\n\n  const separators = {\n    highlight: () => {\n      setLeadingSeparatorHighlighted(true);\n      setSeparatorHighlighted(true);\n      if (prevCellKey != null) {\n        updateHighlightFor(prevCellKey, true);\n      }\n    },\n    unhighlight: () => {\n      setLeadingSeparatorHighlighted(false);\n      setSeparatorHighlighted(false);\n      if (prevCellKey != null) {\n        updateHighlightFor(prevCellKey, false);\n      }\n    },\n    updateProps: (\n      select                        ,\n      newProps                                       ,\n    ) => {\n      if (select === 'leading') {\n        if (LeadingSeparatorComponent != null) {\n          setLeadingSeparatorProps({...leadingSeparatorProps, ...newProps});\n        } else if (prevCellKey != null) {\n          // update the previous item's separator\n          updatePropsFor(prevCellKey, {...leadingSeparatorProps, ...newProps});\n        }\n      } else if (select === 'trailing' && SeparatorComponent != null) {\n        setSeparatorProps({...separatorProps, ...newProps});\n      }\n    },\n  };\n  const element = props.renderItem({\n    item,\n    index,\n    section,\n    separators,\n  });\n  const leadingSeparator = LeadingSeparatorComponent != null && (\n    <LeadingSeparatorComponent\n      highlighted={leadingSeparatorHiglighted}\n      {...leadingSeparatorProps}\n    />\n  );\n  const separator = SeparatorComponent != null && (\n    <SeparatorComponent\n      highlighted={separatorHighlighted}\n      {...separatorProps}\n    />\n  );\n  const RenderSeparator = leadingSeparator || separator;\n  const firstSeparator = inverted === false ? leadingSeparator : separator;\n  const secondSeparator = inverted === false ? separator : leadingSeparator;\n\n  return (\n    <>\n      {RenderSeparator ? firstSeparator : null}\n      {element}\n      {RenderSeparator ? secondSeparator : null}\n    </>\n  );\n}\n\n/* $FlowFixMe[class-object-subtyping] added when improving typing for this\n * parameters */\n// $FlowFixMe[method-unbinding]\nmodule.exports = (VirtualizedSectionList                          \n                                                     \n             \n                                                                \n                                                                   \n       \n     \n );\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\nimport invariant from 'invariant';\n\n                          \n                \n               \n                    \n  \n\nexport class CellRenderMask {\n  _numCells        ;\n  _regions                   ;\n\n  constructor(numCells        ) {\n    invariant(\n      numCells >= 0,\n      'CellRenderMask must contain a non-negative number os cells',\n    );\n\n    this._numCells = numCells;\n\n    if (numCells === 0) {\n      this._regions = [];\n    } else {\n      this._regions = [\n        {\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true,\n        },\n      ];\n    }\n  }\n\n  enumerateRegions()                             {\n    return this._regions;\n  }\n\n  addCells(cells                               )       {\n    invariant(\n      cells.first >= 0 &&\n        cells.first < this._numCells &&\n        cells.last >= -1 &&\n        cells.last < this._numCells &&\n        cells.last >= cells.first - 1,\n      'CellRenderMask.addCells called with invalid cell range',\n    );\n\n    // VirtualizedList uses inclusive ranges, where zero-count states are\n    // possible. E.g. [0, -1] for no cells, starting at 0.\n    if (cells.last < cells.first) {\n      return;\n    }\n\n    const [firstIntersect, firstIntersectIdx] = this._findRegion(cells.first);\n    const [lastIntersect, lastIntersectIdx] = this._findRegion(cells.last);\n\n    // Fast-path if the cells to add are already all present in the mask. We\n    // will otherwise need to do some mutation.\n    if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n      return;\n    }\n\n    // We need to replace the existing covered regions with 1-3 new regions\n    // depending whether we need to split spacers out of overlapping regions.\n    const newLeadRegion                    = [];\n    const newTailRegion                    = [];\n    const newMainRegion             = {\n      ...cells,\n      isSpacer: false,\n    };\n\n    if (firstIntersect.first < newMainRegion.first) {\n      if (firstIntersect.isSpacer) {\n        newLeadRegion.push({\n          first: firstIntersect.first,\n          last: newMainRegion.first - 1,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.first = firstIntersect.first;\n      }\n    }\n\n    if (lastIntersect.last > newMainRegion.last) {\n      if (lastIntersect.isSpacer) {\n        newTailRegion.push({\n          first: newMainRegion.last + 1,\n          last: lastIntersect.last,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.last = lastIntersect.last;\n      }\n    }\n\n    const replacementRegions                    = [\n      ...newLeadRegion,\n      newMainRegion,\n      ...newTailRegion,\n    ];\n    const numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n    this._regions.splice(\n      firstIntersectIdx,\n      numRegionsToDelete,\n      ...replacementRegions,\n    );\n  }\n\n  numCells()         {\n    return this._numCells;\n  }\n\n  equals(other                )          {\n    return (\n      this._numCells === other._numCells &&\n      this._regions.length === other._regions.length &&\n      this._regions.every(\n        (region, i) =>\n          region.first === other._regions[i].first &&\n          region.last === other._regions[i].last &&\n          region.isSpacer === other._regions[i].isSpacer,\n      )\n    );\n  }\n\n  _findRegion(cellIdx        )                       {\n    let firstIdx = 0;\n    let lastIdx = this._regions.length - 1;\n\n    while (firstIdx <= lastIdx) {\n      const middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n      const middleRegion = this._regions[middleIdx];\n\n      if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n        return [middleRegion, middleIdx];\n      } else if (cellIdx < middleRegion.first) {\n        lastIdx = middleIdx - 1;\n      } else if (cellIdx > middleRegion.last) {\n        firstIdx = middleIdx + 1;\n      }\n    }\n\n    invariant(false, `A region was not found containing cellIdx ${cellIdx}`);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n                                                                          \n                                                                        \n\nimport {keyExtractor as defaultKeyExtractor} from './VirtualizeUtils';\nimport invariant from 'invariant';\n\n                           \n     \n                                  \n     \n                \n     \n                                                \n     \n                 \n     \n                                                                             \n         \n     \n                 \n     \n                                                 \n     \n                     \n  \n\n// TODO: `inverted` can be incorporated here if it is moved to an order\n// based implementation instead of transform.\n                               \n                      \n               \n  \n\n/**\n * Subset of VirtualizedList props needed to calculate cell metrics\n */\n                               \n                                     \n                                                     \n                                           \n                                                        \n                                                      \n     \n  \n\n/**\n * Provides an interface to query information about the metrics of a list and its cells.\n */\nexport default class ListMetricsAggregator {\n  _averageCellLength = 0;\n  _cellMetrics                           = new Map();\n  _contentLength         ;\n  _highestMeasuredCellIndex = 0;\n  _measuredCellsLength = 0;\n  _measuredCellsCount = 0;\n  _orientation                  = {\n    horizontal: false,\n    rtl: false,\n  };\n\n  /**\n   * Notify the ListMetricsAggregator that a cell has been laid out.\n   *\n   * @returns whether the cell layout has changed since last notification\n   */\n  notifyCellLayout({\n    cellIndex,\n    cellKey,\n    orientation,\n    layout,\n  }   \n                      \n                    \n                                 \n                   \n   )          {\n    this._invalidateIfOrientationChanged(orientation);\n\n    const next              = {\n      index: cellIndex,\n      length: this._selectLength(layout),\n      isMounted: true,\n      offset: this.flowRelativeOffset(layout),\n    };\n    const curr = this._cellMetrics.get(cellKey);\n\n    if (!curr || next.offset !== curr.offset || next.length !== curr.length) {\n      if (curr) {\n        const dLength = next.length - curr.length;\n        this._measuredCellsLength += dLength;\n      } else {\n        this._measuredCellsLength += next.length;\n        this._measuredCellsCount += 1;\n      }\n\n      this._averageCellLength =\n        this._measuredCellsLength / this._measuredCellsCount;\n      this._cellMetrics.set(cellKey, next);\n      this._highestMeasuredCellIndex = Math.max(\n        this._highestMeasuredCellIndex,\n        cellIndex,\n      );\n      return true;\n    } else {\n      curr.isMounted = true;\n      return false;\n    }\n  }\n\n  /**\n   * Notify ListMetricsAggregator that a cell has been unmounted.\n   */\n  notifyCellUnmounted(cellKey        )       {\n    const curr = this._cellMetrics.get(cellKey);\n    if (curr) {\n      curr.isMounted = false;\n    }\n  }\n\n  /**\n   * Notify ListMetricsAggregator that the lists content container has been laid out.\n   */\n  notifyListContentLayout({\n    orientation,\n    layout,\n  }   \n                                 \n                                                       \n   )       {\n    this._invalidateIfOrientationChanged(orientation);\n    this._contentLength = this._selectLength(layout);\n  }\n\n  /**\n   * Return the average length of the cells which have been measured\n   */\n  getAverageCellLength()         {\n    return this._averageCellLength;\n  }\n\n  /**\n   * Return the highest measured cell index (or 0 if nothing has been measured\n   * yet)\n   */\n  getHighestMeasuredCellIndex()         {\n    return this._highestMeasuredCellIndex;\n  }\n\n  /**\n   * Returns the exact metrics of a cell if it has already been laid out,\n   * otherwise an estimate based on the average length of previously measured\n   * cells\n   */\n  getCellMetricsApprox(index        , props                 )              {\n    const frame = this.getCellMetrics(index, props);\n    if (frame && frame.index === index) {\n      // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      const {data, getItemCount} = props;\n      invariant(\n        index >= 0 && index < getItemCount(data),\n        'Tried to get frame for out of range index ' + index,\n      );\n      return {\n        length: this._averageCellLength,\n        offset: this._averageCellLength * index,\n        index,\n        isMounted: false,\n      };\n    }\n  }\n\n  /**\n   * Returns the exact metrics of a cell if it has already been laid out\n   */\n  getCellMetrics(index        , props                 )               {\n    const {data, getItem, getItemCount, getItemLayout} = props;\n    invariant(\n      index >= 0 && index < getItemCount(data),\n      'Tried to get metrics for out of range cell index ' + index,\n    );\n    const keyExtractor = props.keyExtractor ?? defaultKeyExtractor;\n    const frame = this._cellMetrics.get(\n      keyExtractor(getItem(data, index), index),\n    );\n    if (frame && frame.index === index) {\n      return frame;\n    }\n\n    if (getItemLayout) {\n      const {length, offset} = getItemLayout(data, index);\n      // TODO: `isMounted` is used for both \"is exact layout\" and \"has been\n      // unmounted\". Should be refactored.\n      return {index, length, offset, isMounted: true};\n    }\n\n    return null;\n  }\n\n  /**\n   * Gets an approximate offset to an item at a given index. Supports\n   * fractional indices.\n   */\n  getCellOffsetApprox(index        , props                 )         {\n    if (Number.isInteger(index)) {\n      return this.getCellMetricsApprox(index, props).offset;\n    } else {\n      const frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);\n      const remainder = index - Math.floor(index);\n      return frameMetrics.offset + remainder * frameMetrics.length;\n    }\n  }\n\n  /**\n   * Returns the length of all ScrollView content along the scrolling axis.\n   */\n  getContentLength()         {\n    return this._contentLength ?? 0;\n  }\n\n  /**\n   * Whether a content length has been observed\n   */\n  hasContentLength()          {\n    return this._contentLength != null;\n  }\n\n  /**\n   * Finds the flow-relative offset (e.g. starting from the left in LTR, but\n   * right in RTL) from a layout box.\n   */\n  flowRelativeOffset(layout        , referenceContentLength          )         {\n    const {horizontal, rtl} = this._orientation;\n\n    if (horizontal && rtl) {\n      const contentLength = referenceContentLength ?? this._contentLength;\n      invariant(\n        contentLength != null,\n        'ListMetricsAggregator must be notified of list content layout before resolving offsets',\n      );\n      return (\n        contentLength -\n        (this._selectOffset(layout) + this._selectLength(layout))\n      );\n    } else {\n      return this._selectOffset(layout);\n    }\n  }\n\n  /**\n   * Converts a flow-relative offset to a cartesian offset\n   */\n  cartesianOffset(flowRelativeOffset        )         {\n    const {horizontal, rtl} = this._orientation;\n\n    if (horizontal && rtl) {\n      invariant(\n        this._contentLength != null,\n        'ListMetricsAggregator must be notified of list content layout before resolving offsets',\n      );\n      return this._contentLength - flowRelativeOffset;\n    } else {\n      return flowRelativeOffset;\n    }\n  }\n\n  _invalidateIfOrientationChanged(orientation                 )       {\n    if (orientation.rtl !== this._orientation.rtl) {\n      this._cellMetrics.clear();\n    }\n\n    if (orientation.horizontal !== this._orientation.horizontal) {\n      this._averageCellLength = 0;\n      this._highestMeasuredCellIndex = 0;\n      this._measuredCellsLength = 0;\n      this._measuredCellsCount = 0;\n    }\n\n    this._orientation = orientation;\n  }\n\n  _selectLength({\n    width,\n    height,\n  }                                                 )         {\n    return this._orientation.horizontal ? width : height;\n  }\n\n  _selectOffset({x, y}                                        )         {\n    return this._orientation.horizontal ? x : y;\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n'use strict';\n\nconst {InteractionManager} = require('react-native');\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\nclass Batchinator {\n  _callback            ;\n  _delay        ;\n  _taskHandle                            ;\n  constructor(callback            , delayMS        ) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n  dispose(options                        = {abort: false}) {\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  }\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n    const timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {cancel: () => clearTimeout(timeoutHandle)};\n  }\n}\n\nmodule.exports = Batchinator;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n                                                                              \n                                                   \n             \n       \n        \n                  \n                 \n             \n                                \n                                                                                                 \n                                                                                \n             \n              \n              \n                                                     \n\nimport Batchinator from '../Interaction/Batchinator';\nimport clamp from '../Utilities/clamp';\nimport infoLog from '../Utilities/infoLog';\nimport {CellRenderMask} from './CellRenderMask';\nimport ChildListCollection from './ChildListCollection';\nimport FillRateHelper from './FillRateHelper';\nimport ListMetricsAggregator from './ListMetricsAggregator';\nimport StateSafePureComponent from './StateSafePureComponent';\nimport ViewabilityHelper from './ViewabilityHelper';\nimport CellRenderer from './VirtualizedListCellRenderer';\nimport {\n  VirtualizedListCellContextProvider,\n  VirtualizedListContext,\n  VirtualizedListContextProvider,\n} from './VirtualizedListContext.js';\nimport {\n  horizontalOrDefault,\n  initialNumToRenderOrDefault,\n  maxToRenderPerBatchOrDefault,\n  onEndReachedThresholdOrDefault,\n  onStartReachedThresholdOrDefault,\n  windowSizeOrDefault,\n} from './VirtualizedListProps';\nimport {\n  computeWindowedRenderLimits,\n  keyExtractor as defaultKeyExtractor,\n} from './VirtualizeUtils';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\nimport {\n  I18nManager,\n  Platform,\n  RefreshControl,\n  ScrollView,\n  StyleSheet,\n  View,\n  findNodeHandle,\n} from 'react-native';\n\n                                                          \n\nconst ON_EDGE_REACHED_EPSILON = 0.001;\n\nlet _usedIndexForKey = false;\nlet _keylessItemComponentName         = '';\n\n                                       \n                                       \n                                  \n                                    \n                              \n       \n             \n     \n  \n\n              \n                             \n                                                     \n                                                                                           \n                               \n                                                                                             \n                                   \n  \n\nfunction getScrollingThreshold(threshold        , visibleLength        ) {\n  return (threshold * visibleLength) / 2;\n}\n\n/**\n * Base implementation for the more convenient [`<FlatList>`](https://reactnative.dev/docs/flatlist)\n * and [`<SectionList>`](https://reactnative.dev/docs/sectionlist) components, which are also better\n * documented. In general, this should only really be used if you need more flexibility than\n * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.\n *\n * Virtualization massively improves memory consumption and performance of large lists by\n * maintaining a finite render window of active items and replacing all items outside of the render\n * window with appropriately sized blank space. The window adapts to scrolling behavior, and items\n * are rendered incrementally with low-pri (after any running interactions) if they are far from the\n * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.\n *\n * Some caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` or `id` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n * - As an effort to remove defaultProps, use helper functions when referencing certain props\n *\n */\nclass VirtualizedList extends StateSafePureComponent               {\n  static contextType                                = VirtualizedListContext;\n\n  // scrollToEnd may be janky without getItemLayout prop\n  scrollToEnd(params                              ) {\n    const animated = params ? params.animated : true;\n    const veryLast = this.props.getItemCount(this.props.data) - 1;\n    if (veryLast < 0) {\n      return;\n    }\n    const frame = this._listMetrics.getCellMetricsApprox(veryLast, this.props);\n    const offset = Math.max(\n      0,\n      frame.offset +\n        frame.length +\n        this._footerLength -\n        this._scrollMetrics.visibleLength,\n    );\n\n    // TODO: consider using `ref.scrollToEnd` directly\n    this.scrollToOffset({animated, offset});\n  }\n\n  // scrollToIndex may be janky without getItemLayout prop\n  scrollToIndex(params   \n                        \n                  \n                        \n                          \n       \n   )             {\n    const {data, getItemCount, getItemLayout, onScrollToIndexFailed} =\n      this.props;\n    const {animated, index, viewOffset, viewPosition} = params;\n    invariant(\n      index >= 0,\n      `scrollToIndex out of range: requested index ${index} but minimum is 0`,\n    );\n    invariant(\n      getItemCount(data) >= 1,\n      `scrollToIndex out of range: item length ${getItemCount(\n        data,\n      )} but minimum is 1`,\n    );\n    invariant(\n      index < getItemCount(data),\n      `scrollToIndex out of range: requested index ${index} is out of 0 to ${\n        getItemCount(data) - 1\n      }`,\n    );\n    if (\n      !getItemLayout &&\n      index > this._listMetrics.getHighestMeasuredCellIndex()\n    ) {\n      invariant(\n        !!onScrollToIndexFailed,\n        'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' +\n          'otherwise there is no way to know the location of offscreen indices or handle failures.',\n      );\n      onScrollToIndexFailed({\n        averageItemLength: this._listMetrics.getAverageCellLength(),\n        highestMeasuredFrameIndex:\n          this._listMetrics.getHighestMeasuredCellIndex(),\n        index,\n      });\n      return;\n    }\n    const frame = this._listMetrics.getCellMetricsApprox(\n      Math.floor(index),\n      this.props,\n    );\n    const offset =\n      Math.max(\n        0,\n        this._listMetrics.getCellOffsetApprox(index, this.props) -\n          (viewPosition || 0) *\n            (this._scrollMetrics.visibleLength - frame.length),\n      ) - (viewOffset || 0);\n\n    this.scrollToOffset({offset, animated});\n  }\n\n  // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -\n  // use scrollToIndex instead if possible.\n  scrollToItem(params   \n                        \n               \n                        \n                          \n       \n   ) {\n    const {item} = params;\n    const {data, getItem, getItemCount} = this.props;\n    const itemCount = getItemCount(data);\n    for (let index = 0; index < itemCount; index++) {\n      if (getItem(data, index) === item) {\n        this.scrollToIndex({...params, index});\n        break;\n      }\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Param `offset` expects the offset to scroll to.\n   * In case of `horizontal` is true, the offset is the x-value,\n   * in any other case the offset is the y-value.\n   *\n   * Param `animated` (`true` by default) defines whether the list\n   * should do an animation while scrolling.\n   */\n  scrollToOffset(params                                            ) {\n    const {animated, offset} = params;\n    const scrollRef = this._scrollRef;\n\n    if (scrollRef == null) {\n      return;\n    }\n\n    if (scrollRef.scrollTo == null) {\n      console.warn(\n        'No scrollTo method provided. This may be because you have two nested ' +\n          'VirtualizedLists with the same orientation, or because you are ' +\n          'using a custom component that does not implement scrollTo.',\n      );\n      return;\n    }\n\n    const {horizontal, rtl} = this._orientation();\n    if (horizontal && rtl && !this._listMetrics.hasContentLength()) {\n      console.warn(\n        'scrollToOffset may not be called in RTL before content is laid out',\n      );\n      return;\n    }\n\n    scrollRef.scrollTo({\n      animated,\n      ...this._scrollToParamsFromOffset(offset),\n    });\n  }\n\n  _scrollToParamsFromOffset(offset        )                           {\n    const {horizontal, rtl} = this._orientation();\n    if (horizontal && rtl) {\n      // Add the visible length of the scrollview so that the offset is right-aligned\n      const cartOffset = this._listMetrics.cartesianOffset(\n        offset + this._scrollMetrics.visibleLength,\n      );\n      return horizontal ? {x: cartOffset} : {y: cartOffset};\n    } else {\n      return horizontal ? {x: offset} : {y: offset};\n    }\n  }\n\n  recordInteraction() {\n    this._nestedChildLists.forEach(childList => {\n      childList.recordInteraction();\n    });\n    this._viewabilityTuples.forEach(t => {\n      t.viewabilityHelper.recordInteraction();\n    });\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n  }\n\n  flashScrollIndicators() {\n    if (this._scrollRef == null) {\n      return;\n    }\n\n    this._scrollRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollRef` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder()                       {\n    if (this._scrollRef && this._scrollRef.getScrollResponder) {\n      return this._scrollRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode()          {\n    if (this._scrollRef && this._scrollRef.getScrollableNode) {\n      return this._scrollRef.getScrollableNode();\n    } else {\n      return findNodeHandle(this._scrollRef);\n    }\n  }\n\n  getScrollRef() \n                                          \n                                     {\n    if (this._scrollRef && this._scrollRef.getScrollRef) {\n      return this._scrollRef.getScrollRef();\n    } else {\n      return this._scrollRef;\n    }\n  }\n\n  setNativeProps(props        ) {\n    if (this._scrollRef) {\n      this._scrollRef.setNativeProps(props);\n    }\n  }\n\n  _getCellKey()         {\n    return this.context?.cellKey || 'rootList';\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _getScrollMetrics = () => {\n    return this._scrollMetrics;\n  };\n\n  hasMore()          {\n    return this._hasMore;\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _getOutermostParentListRef = () => {\n    if (this._isNestedWithSameOrientation()) {\n      return this.context.getOutermostParentListRef();\n    } else {\n      return this;\n    }\n  };\n\n  _registerAsNestedChild = (childList   \n                    \n                                                  \n   )       => {\n    this._nestedChildLists.add(childList.ref, childList.cellKey);\n    if (this._hasInteracted) {\n      childList.ref.recordInteraction();\n    }\n  };\n\n  _unregisterAsNestedChild = (childList   \n                                                  \n   )       => {\n    this._nestedChildLists.remove(childList.ref);\n  };\n\n  state       ;\n\n  constructor(props       ) {\n    super(props);\n    this._checkProps(props);\n\n    this._fillRateHelper = new FillRateHelper(this._listMetrics);\n    this._updateCellsToRenderBatcher = new Batchinator(\n      this._updateCellsToRender,\n      this.props.updateCellsBatchingPeriod ?? 50,\n    );\n\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._viewabilityTuples = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),\n          onViewableItemsChanged: pair.onViewableItemsChanged,\n        }),\n      );\n    } else {\n      const {onViewableItemsChanged, viewabilityConfig} = this.props;\n      if (onViewableItemsChanged) {\n        this._viewabilityTuples.push({\n          viewabilityHelper: new ViewabilityHelper(viewabilityConfig),\n          onViewableItemsChanged: onViewableItemsChanged,\n        });\n      }\n    }\n\n    const initialRenderRegion = VirtualizedList._initialRenderRegion(props);\n\n    const minIndexForVisible =\n      this.props.maintainVisibleContentPosition?.minIndexForVisible ?? 0;\n\n    this.state = {\n      cellsAroundViewport: initialRenderRegion,\n      renderMask: VirtualizedList._createRenderMask(props, initialRenderRegion),\n      firstVisibleItemKey:\n        this.props.getItemCount(this.props.data) > minIndexForVisible\n          ? VirtualizedList._getItemKey(this.props, minIndexForVisible)\n          : null,\n      // When we have a non-zero initialScrollIndex, we will receive a\n      // scroll event later so this will prevent the window from updating\n      // until we get a valid offset.\n      pendingScrollUpdateCount:\n        this.props.initialScrollIndex != null &&\n        this.props.initialScrollIndex > 0\n          ? 1\n          : 0,\n    };\n  }\n\n  _checkProps(props       ) {\n    const {onScroll, windowSize, getItemCount, data, initialScrollIndex} =\n      props;\n\n    invariant(\n      // $FlowFixMe[prop-missing]\n      !onScroll || !onScroll.__isNative,\n      'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' +\n        'to support native onScroll events with useNativeDriver',\n    );\n    invariant(\n      windowSizeOrDefault(windowSize) > 0,\n      'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.',\n    );\n\n    invariant(\n      getItemCount,\n      'VirtualizedList: The \"getItemCount\" prop must be provided',\n    );\n\n    const itemCount = getItemCount(data);\n\n    if (\n      initialScrollIndex != null &&\n      !this._hasTriggeredInitialScrollToIndex &&\n      (initialScrollIndex < 0 ||\n        (itemCount > 0 && initialScrollIndex >= itemCount)) &&\n      !this._hasWarned.initialScrollIndex\n    ) {\n      console.warn(\n        `initialScrollIndex \"${initialScrollIndex}\" is not valid (list has ${itemCount} items)`,\n      );\n      this._hasWarned.initialScrollIndex = true;\n    }\n\n    if (__DEV__ && !this._hasWarned.flexWrap) {\n      // $FlowFixMe[underconstrained-implicit-instantiation]\n      const flatStyles = StyleSheet.flatten(this.props.contentContainerStyle);\n      if (flatStyles != null && flatStyles.flexWrap === 'wrap') {\n        console.warn(\n          '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' +\n            'Consider using `numColumns` with `FlatList` instead.',\n        );\n        this._hasWarned.flexWrap = true;\n      }\n    }\n  }\n\n  static _findItemIndexWithKey(\n    props       ,\n    key        ,\n    hint         ,\n  )          {\n    const itemCount = props.getItemCount(props.data);\n    if (hint != null && hint >= 0 && hint < itemCount) {\n      const curKey = VirtualizedList._getItemKey(props, hint);\n      if (curKey === key) {\n        return hint;\n      }\n    }\n    for (let ii = 0; ii < itemCount; ii++) {\n      const curKey = VirtualizedList._getItemKey(props, ii);\n      if (curKey === key) {\n        return ii;\n      }\n    }\n    return null;\n  }\n\n  static _getItemKey(\n    props   \n                          \n                                \n                                          \n         \n     ,\n    index        ,\n  )         {\n    const item = props.getItem(props.data, index);\n    return VirtualizedList._keyExtractor(item, index, props);\n  }\n\n  static _createRenderMask(\n    props       ,\n    cellsAroundViewport                               ,\n    additionalRegions                                                 ,\n  )                 {\n    const itemCount = props.getItemCount(props.data);\n\n    invariant(\n      cellsAroundViewport.first >= 0 &&\n        cellsAroundViewport.last >= cellsAroundViewport.first - 1 &&\n        cellsAroundViewport.last < itemCount,\n      `Invalid cells around viewport \"[${cellsAroundViewport.first}, ${cellsAroundViewport.last}]\" was passed to VirtualizedList._createRenderMask`,\n    );\n\n    const renderMask = new CellRenderMask(itemCount);\n\n    if (itemCount > 0) {\n      const allRegions = [cellsAroundViewport, ...(additionalRegions ?? [])];\n      for (const region of allRegions) {\n        renderMask.addCells(region);\n      }\n\n      // The initially rendered cells are retained as part of the\n      // \"scroll-to-top\" optimization\n      if (props.initialScrollIndex == null || props.initialScrollIndex <= 0) {\n        const initialRegion = VirtualizedList._initialRenderRegion(props);\n        renderMask.addCells(initialRegion);\n      }\n\n      // The layout coordinates of sticker headers may be off-screen while the\n      // actual header is on-screen. Keep the most recent before the viewport\n      // rendered, even if its layout coordinates are not in viewport.\n      const stickyIndicesSet = new Set(props.stickyHeaderIndices);\n      VirtualizedList._ensureClosestStickyHeader(\n        props,\n        stickyIndicesSet,\n        renderMask,\n        cellsAroundViewport.first,\n      );\n    }\n\n    return renderMask;\n  }\n\n  static _initialRenderRegion(props       )                                {\n    const itemCount = props.getItemCount(props.data);\n\n    const firstCellIndex = Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(props.initialScrollIndex ?? 0)),\n    );\n\n    const lastCellIndex =\n      Math.min(\n        itemCount,\n        firstCellIndex + initialNumToRenderOrDefault(props.initialNumToRender),\n      ) - 1;\n\n    return {\n      first: firstCellIndex,\n      last: lastCellIndex,\n    };\n  }\n\n  static _ensureClosestStickyHeader(\n    props       ,\n    stickyIndicesSet             ,\n    renderMask                ,\n    cellIdx        ,\n  ) {\n    const stickyOffset = props.ListHeaderComponent ? 1 : 0;\n\n    for (let itemIdx = cellIdx - 1; itemIdx >= 0; itemIdx--) {\n      if (stickyIndicesSet.has(itemIdx + stickyOffset)) {\n        renderMask.addCells({first: itemIdx, last: itemIdx});\n        break;\n      }\n    }\n  }\n\n  _adjustCellsAroundViewport(\n    props       ,\n    cellsAroundViewport                               ,\n    pendingScrollUpdateCount        ,\n  )                                {\n    const {data, getItemCount} = props;\n    const onEndReachedThreshold = onEndReachedThresholdOrDefault(\n      props.onEndReachedThreshold,\n    );\n    const {offset, visibleLength} = this._scrollMetrics;\n    const contentLength = this._listMetrics.getContentLength();\n    const distanceFromEnd = contentLength - visibleLength - offset;\n\n    // Wait until the scroll view metrics have been set up. And until then,\n    // we will trust the initialNumToRender suggestion\n    if (visibleLength <= 0 || contentLength <= 0) {\n      return cellsAroundViewport.last >= getItemCount(data)\n        ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props)\n        : cellsAroundViewport;\n    }\n\n    let newCellsAroundViewport                               ;\n    if (props.disableVirtualization) {\n      const renderAhead =\n        distanceFromEnd < onEndReachedThreshold * visibleLength\n          ? maxToRenderPerBatchOrDefault(props.maxToRenderPerBatch)\n          : 0;\n\n      newCellsAroundViewport = {\n        first: 0,\n        last: Math.min(\n          cellsAroundViewport.last + renderAhead,\n          getItemCount(data) - 1,\n        ),\n      };\n    } else {\n      // If we have a pending scroll update, we should not adjust the render window as it\n      // might override the correct window.\n      if (pendingScrollUpdateCount > 0) {\n        return cellsAroundViewport.last >= getItemCount(data)\n          ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props)\n          : cellsAroundViewport;\n      }\n\n      newCellsAroundViewport = computeWindowedRenderLimits(\n        props,\n        maxToRenderPerBatchOrDefault(props.maxToRenderPerBatch),\n        windowSizeOrDefault(props.windowSize),\n        cellsAroundViewport,\n        this._listMetrics,\n        this._scrollMetrics,\n      );\n      invariant(\n        newCellsAroundViewport.last < getItemCount(data),\n        'computeWindowedRenderLimits() should return range in-bounds',\n      );\n    }\n\n    if (this._nestedChildLists.size() > 0) {\n      // If some cell in the new state has a child list in it, we should only render\n      // up through that item, so that we give that list a chance to render.\n      // Otherwise there's churn from multiple child lists mounting and un-mounting\n      // their items.\n\n      // Will this prevent rendering if the nested list doesn't realize the end?\n      const childIdx = this._findFirstChildWithMore(\n        newCellsAroundViewport.first,\n        newCellsAroundViewport.last,\n      );\n\n      newCellsAroundViewport.last = childIdx ?? newCellsAroundViewport.last;\n    }\n\n    return newCellsAroundViewport;\n  }\n\n  _findFirstChildWithMore(first        , last        )                {\n    for (let ii = first; ii <= last; ii++) {\n      const cellKeyForIndex = this._indicesToKeys.get(ii);\n      if (\n        cellKeyForIndex != null &&\n        this._nestedChildLists.anyInCell(cellKeyForIndex, childList =>\n          childList.hasMore(),\n        )\n      ) {\n        return ii;\n      }\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.registerAsNestedChild({\n        ref: this,\n        cellKey: this.context.cellKey,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.unregisterAsNestedChild({ref: this});\n    }\n    this._updateCellsToRenderBatcher.dispose({abort: true});\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.dispose();\n    });\n    this._fillRateHelper.deactivateAndFlush();\n  }\n\n  static getDerivedStateFromProps(newProps       , prevState       )        {\n    // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make\n    // sure we're rendering a reasonable range here.\n    const itemCount = newProps.getItemCount(newProps.data);\n    if (itemCount === prevState.renderMask.numCells()) {\n      return prevState;\n    }\n\n    let maintainVisibleContentPositionAdjustment          = null;\n    const prevFirstVisibleItemKey = prevState.firstVisibleItemKey;\n    const minIndexForVisible =\n      newProps.maintainVisibleContentPosition?.minIndexForVisible ?? 0;\n    const newFirstVisibleItemKey =\n      newProps.getItemCount(newProps.data) > minIndexForVisible\n        ? VirtualizedList._getItemKey(newProps, minIndexForVisible)\n        : null;\n    if (\n      newProps.maintainVisibleContentPosition != null &&\n      prevFirstVisibleItemKey != null &&\n      newFirstVisibleItemKey != null\n    ) {\n      if (newFirstVisibleItemKey !== prevFirstVisibleItemKey) {\n        // Fast path if items were added at the start of the list.\n        const hint =\n          itemCount - prevState.renderMask.numCells() + minIndexForVisible;\n        const firstVisibleItemIndex = VirtualizedList._findItemIndexWithKey(\n          newProps,\n          prevFirstVisibleItemKey,\n          hint,\n        );\n        maintainVisibleContentPositionAdjustment =\n          firstVisibleItemIndex != null\n            ? firstVisibleItemIndex - minIndexForVisible\n            : null;\n      } else {\n        maintainVisibleContentPositionAdjustment = null;\n      }\n    }\n\n    const constrainedCells = VirtualizedList._constrainToItemCount(\n      maintainVisibleContentPositionAdjustment != null\n        ? {\n            first:\n              prevState.cellsAroundViewport.first +\n              maintainVisibleContentPositionAdjustment,\n            last:\n              prevState.cellsAroundViewport.last +\n              maintainVisibleContentPositionAdjustment,\n          }\n        : prevState.cellsAroundViewport,\n      newProps,\n    );\n\n    return {\n      cellsAroundViewport: constrainedCells,\n      renderMask: VirtualizedList._createRenderMask(newProps, constrainedCells),\n      firstVisibleItemKey: newFirstVisibleItemKey,\n      pendingScrollUpdateCount:\n        maintainVisibleContentPositionAdjustment != null\n          ? prevState.pendingScrollUpdateCount + 1\n          : prevState.pendingScrollUpdateCount,\n    };\n  }\n\n  _pushCells(\n    cells               ,\n    stickyHeaderIndices               ,\n    stickyIndicesFromProps             ,\n    first        ,\n    last        ,\n    inversionStyle               ,\n  ) {\n    const {\n      CellRendererComponent,\n      ItemSeparatorComponent,\n      ListHeaderComponent,\n      ListItemComponent,\n      data,\n      debug,\n      getItem,\n      getItemCount,\n      getItemLayout,\n      horizontal,\n      renderItem,\n    } = this.props;\n    const stickyOffset = ListHeaderComponent ? 1 : 0;\n    const end = getItemCount(data) - 1;\n    let prevCellKey;\n    last = Math.min(end, last);\n\n    for (let ii = first; ii <= last; ii++) {\n      const item = getItem(data, ii);\n      const key = VirtualizedList._keyExtractor(item, ii, this.props);\n\n      this._indicesToKeys.set(ii, key);\n      if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n        stickyHeaderIndices.push(cells.length);\n      }\n\n      const shouldListenForLayout =\n        getItemLayout == null || debug || this._fillRateHelper.enabled();\n\n      cells.push(\n        <CellRenderer\n          CellRendererComponent={CellRendererComponent}\n          ItemSeparatorComponent={ii < end ? ItemSeparatorComponent : undefined}\n          ListItemComponent={ListItemComponent}\n          cellKey={key}\n          horizontal={horizontal}\n          index={ii}\n          inversionStyle={inversionStyle}\n          item={item}\n          key={key}\n          prevCellKey={prevCellKey}\n          onUpdateSeparators={this._onUpdateSeparators}\n          onCellFocusCapture={this._onCellFocusCapture}\n          onUnmount={this._onCellUnmount}\n          ref={ref => {\n            this._cellRefs[key] = ref;\n          }}\n          renderItem={renderItem}\n          {...(shouldListenForLayout && {\n            onCellLayout: this._onCellLayout,\n          })}\n        />,\n      );\n      prevCellKey = key;\n    }\n  }\n\n  static _constrainToItemCount(\n    cells                               ,\n    props       ,\n  )                                {\n    const itemCount = props.getItemCount(props.data);\n    const lastPossibleCellIndex = itemCount - 1;\n\n    // Constraining `last` may significantly shrink the window. Adjust `first`\n    // to expand the window if the new `last` results in a new window smaller\n    // than the number of cells rendered per batch.\n    const maxToRenderPerBatch = maxToRenderPerBatchOrDefault(\n      props.maxToRenderPerBatch,\n    );\n    const maxFirst = Math.max(0, lastPossibleCellIndex - maxToRenderPerBatch);\n\n    return {\n      first: clamp(0, cells.first, maxFirst),\n      last: Math.min(lastPossibleCellIndex, cells.last),\n    };\n  }\n\n  _onUpdateSeparators = (keys                , newProps        ) => {\n    keys.forEach(key => {\n      const ref = key != null && this._cellRefs[key];\n      ref && ref.updateSeparatorProps(newProps);\n    });\n  };\n\n  _isNestedWithSameOrientation()          {\n    const nestedContext = this.context;\n    return !!(\n      nestedContext &&\n      !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal)\n    );\n  }\n\n  _getSpacerKey = (isVertical         )         =>\n    isVertical ? 'height' : 'width';\n\n  static _keyExtractor(\n    item      ,\n    index        ,\n    props   \n                                                            \n         \n     ,\n  )         {\n    if (props.keyExtractor != null) {\n      return props.keyExtractor(item, index);\n    }\n\n    const key = defaultKeyExtractor(item, index);\n    if (key === String(index)) {\n      _usedIndexForKey = true;\n      if (item.type && item.type.displayName) {\n        _keylessItemComponentName = item.type.displayName;\n      }\n    }\n    return key;\n  }\n\n  render()             {\n    this._checkProps(this.props);\n    const {ListEmptyComponent, ListFooterComponent, ListHeaderComponent} =\n      this.props;\n    const {data, horizontal} = this.props;\n    const inversionStyle = this.props.inverted\n      ? horizontalOrDefault(this.props.horizontal)\n        ? styles.horizontallyInverted\n        : styles.verticallyInverted\n      : null;\n    const cells                          = [];\n    const stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);\n    const stickyHeaderIndices = [];\n\n    // 1. Add cell for ListHeaderComponent\n    if (ListHeaderComponent) {\n      if (stickyIndicesFromProps.has(0)) {\n        stickyHeaderIndices.push(0);\n      }\n      const element = React.isValidElement(ListHeaderComponent) ? (\n        ListHeaderComponent\n      ) : (\n        // $FlowFixMe[not-a-component]\n        // $FlowFixMe[incompatible-type-arg]\n        <ListHeaderComponent />\n      );\n      cells.push(\n        <VirtualizedListCellContextProvider\n          cellKey={this._getCellKey() + '-header'}\n          key=\"$header\">\n          <View\n            // We expect that header component will be a single native view so make it\n            // not collapsable to avoid this view being flattened and make this assumption\n            // no longer true.\n            collapsable={false}\n            onLayout={this._onLayoutHeader}\n            style={StyleSheet.compose(\n              inversionStyle,\n              this.props.ListHeaderComponentStyle,\n            )}>\n            {\n              // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors\n              element\n            }\n          </View>\n        </VirtualizedListCellContextProvider>,\n      );\n    }\n\n    // 2a. Add a cell for ListEmptyComponent if applicable\n    const itemCount = this.props.getItemCount(data);\n    if (itemCount === 0 && ListEmptyComponent) {\n      const element                                    = ((React.isValidElement(\n        ListEmptyComponent,\n      ) ? (\n        ListEmptyComponent\n      ) : (\n        // $FlowFixMe[not-a-component]\n        // $FlowFixMe[incompatible-type-arg]\n        <ListEmptyComponent />\n      ))     );\n      cells.push(\n        <VirtualizedListCellContextProvider\n          cellKey={this._getCellKey() + '-empty'}\n          key=\"$empty\">\n          {React.cloneElement(element, {\n            onLayout: (event             ) => {\n              this._onLayoutEmpty(event);\n              // $FlowFixMe[prop-missing] React.Element internal inspection\n              if (element.props.onLayout) {\n                element.props.onLayout(event);\n              }\n            },\n            // $FlowFixMe[prop-missing] React.Element internal inspection\n            style: StyleSheet.compose(inversionStyle, element.props.style),\n          })}\n        </VirtualizedListCellContextProvider>,\n      );\n    }\n\n    // 2b. Add cells and spacers for each item\n    if (itemCount > 0) {\n      _usedIndexForKey = false;\n      _keylessItemComponentName = '';\n      const spacerKey = this._getSpacerKey(!horizontal);\n\n      const renderRegions = this.state.renderMask.enumerateRegions();\n      const lastRegion = renderRegions[renderRegions.length - 1];\n      const lastSpacer = lastRegion?.isSpacer ? lastRegion : null;\n\n      for (const section of renderRegions) {\n        if (section.isSpacer) {\n          // Legacy behavior is to avoid spacers when virtualization is\n          // disabled (including head spacers on initial render).\n          if (this.props.disableVirtualization) {\n            continue;\n          }\n\n          // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to\n          // prevent the user for hyperscrolling into un-measured area because otherwise content will\n          // likely jump around as it renders in above the viewport.\n          const isLastSpacer = section === lastSpacer;\n          const constrainToMeasured = isLastSpacer && !this.props.getItemLayout;\n          const last = constrainToMeasured\n            ? clamp(\n                section.first - 1,\n                section.last,\n                this._listMetrics.getHighestMeasuredCellIndex(),\n              )\n            : section.last;\n\n          const firstMetrics = this._listMetrics.getCellMetricsApprox(\n            section.first,\n            this.props,\n          );\n          const lastMetrics = this._listMetrics.getCellMetricsApprox(\n            last,\n            this.props,\n          );\n          const spacerSize =\n            lastMetrics.offset + lastMetrics.length - firstMetrics.offset;\n          cells.push(\n            <View\n              key={`$spacer-${section.first}`}\n              style={{[spacerKey]: spacerSize}}\n            />,\n          );\n        } else {\n          this._pushCells(\n            cells,\n            stickyHeaderIndices,\n            stickyIndicesFromProps,\n            section.first,\n            section.last,\n            inversionStyle,\n          );\n        }\n      }\n\n      if (!this._hasWarned.keys && _usedIndexForKey) {\n        console.warn(\n          'VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' +\n            'item or provide a custom keyExtractor.',\n          _keylessItemComponentName,\n        );\n        this._hasWarned.keys = true;\n      }\n    }\n\n    // 3. Add cell for ListFooterComponent\n    if (ListFooterComponent) {\n      const element = React.isValidElement(ListFooterComponent) ? (\n        ListFooterComponent\n      ) : (\n        // $FlowFixMe[not-a-component]\n        // $FlowFixMe[incompatible-type-arg]\n        <ListFooterComponent />\n      );\n      cells.push(\n        <VirtualizedListCellContextProvider\n          cellKey={this._getFooterCellKey()}\n          key=\"$footer\">\n          <View\n            onLayout={this._onLayoutFooter}\n            style={StyleSheet.compose(\n              inversionStyle,\n              this.props.ListFooterComponentStyle,\n            )}>\n            {\n              // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors\n              element\n            }\n          </View>\n        </VirtualizedListCellContextProvider>,\n      );\n    }\n\n    // 4. Render the ScrollView\n    const scrollProps = {\n      ...this.props,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      onScroll: this._onScroll,\n      onScrollBeginDrag: this._onScrollBeginDrag,\n      onScrollEndDrag: this._onScrollEndDrag,\n      onMomentumScrollBegin: this._onMomentumScrollBegin,\n      onMomentumScrollEnd: this._onMomentumScrollEnd,\n      // iOS/macOS requires a non-zero scrollEventThrottle to fire more than a\n      // single notification while scrolling. This will otherwise no-op.\n      scrollEventThrottle: this.props.scrollEventThrottle ?? 0.0001,\n      invertStickyHeaders:\n        this.props.invertStickyHeaders !== undefined\n          ? this.props.invertStickyHeaders\n          : this.props.inverted,\n      stickyHeaderIndices,\n      style: inversionStyle\n        ? [inversionStyle, this.props.style]\n        : this.props.style,\n      isInvertedVirtualizedList: this.props.inverted,\n      maintainVisibleContentPosition:\n        this.props.maintainVisibleContentPosition != null\n          ? {\n              ...this.props.maintainVisibleContentPosition,\n              // Adjust index to account for ListHeaderComponent.\n              minIndexForVisible:\n                this.props.maintainVisibleContentPosition.minIndexForVisible +\n                (this.props.ListHeaderComponent ? 1 : 0),\n            }\n          : undefined,\n    };\n\n    this._hasMore = this.state.cellsAroundViewport.last < itemCount - 1;\n\n    const innerRet = (\n      <VirtualizedListContextProvider\n        value={{\n          cellKey: null,\n          getScrollMetrics: this._getScrollMetrics,\n          horizontal: horizontalOrDefault(this.props.horizontal),\n          getOutermostParentListRef: this._getOutermostParentListRef,\n          registerAsNestedChild: this._registerAsNestedChild,\n          unregisterAsNestedChild: this._unregisterAsNestedChild,\n        }}>\n        {React.cloneElement(\n          (\n            this.props.renderScrollComponent ||\n            this._defaultRenderScrollComponent\n          )(scrollProps),\n          {\n            ref: this._captureScrollRef,\n          },\n          cells,\n        )}\n      </VirtualizedListContextProvider>\n    );\n    let ret             = innerRet;\n    if (__DEV__) {\n      ret = (\n        <ScrollView.Context.Consumer>\n          {scrollContext => {\n            if (\n              scrollContext != null &&\n              !scrollContext.horizontal ===\n                !horizontalOrDefault(this.props.horizontal) &&\n              !this._hasWarned.nesting &&\n              this.context == null &&\n              this.props.scrollEnabled !== false\n            ) {\n              console.error(\n                'VirtualizedLists should never be nested inside plain ScrollViews with the same ' +\n                  'orientation because it can break windowing and other functionality - use another ' +\n                  'VirtualizedList-backed container instead.',\n              );\n              this._hasWarned.nesting = true;\n            }\n            return innerRet;\n          }}\n        </ScrollView.Context.Consumer>\n      );\n    }\n    if (this.props.debug) {\n      return (\n        <View style={styles.debug}>\n          {ret}\n          {this._renderDebugOverlay()}\n        </View>\n      );\n    } else {\n      return ret;\n    }\n  }\n\n  componentDidUpdate(prevProps       ) {\n    const {data, extraData} = this.props;\n    if (data !== prevProps.data || extraData !== prevProps.extraData) {\n      // clear the viewableIndices cache to also trigger\n      // the onViewableItemsChanged callback with the new data\n      this._viewabilityTuples.forEach(tuple => {\n        tuple.viewabilityHelper.resetViewableIndices();\n      });\n    }\n    // The `this._hiPriInProgress` is guaranteeing a hiPri cell update will only happen\n    // once per fiber update. The `_scheduleCellsToRenderUpdate` will set it to true\n    // if a hiPri update needs to perform. If `componentDidUpdate` is triggered with\n    // `this._hiPriInProgress=true`, means it's triggered by the hiPri update. The\n    // `_scheduleCellsToRenderUpdate` will check this condition and not perform\n    // another hiPri update.\n    const hiPriInProgress = this._hiPriInProgress;\n    this._scheduleCellsToRenderUpdate();\n    // Make sure setting `this._hiPriInProgress` back to false after `componentDidUpdate`\n    // is triggered with `this._hiPriInProgress = true`\n    if (hiPriInProgress) {\n      this._hiPriInProgress = false;\n    }\n  }\n\n  _cellRefs                                       = {};\n  _fillRateHelper                ;\n  _listMetrics                        = new ListMetricsAggregator();\n  _footerLength = 0;\n  // Used for preventing scrollToIndex from being called multiple times for initialScrollIndex\n  _hasTriggeredInitialScrollToIndex = false;\n  _hasInteracted = false;\n  _hasMore = false;\n  _hasWarned                      = {};\n  _headerLength = 0;\n  _hiPriInProgress          = false; // flag to prevent infinite hiPri cell limit update\n  _indicesToKeys                      = new Map();\n  _lastFocusedCellKey          = null;\n  _nestedChildLists                                       =\n    new ChildListCollection();\n  _offsetFromParentVirtualizedList         = 0;\n  _pendingViewabilityUpdate          = false;\n  _prevParentOffset         = 0;\n  _scrollMetrics   \n                    \n               \n                   \n                      \n                     \n                          \n                      \n    = {\n    dOffset: 0,\n    dt: 10,\n    offset: 0,\n    timestamp: 0,\n    velocity: 0,\n    visibleLength: 0,\n    zoomScale: 1,\n  };\n  _scrollRef                         = null;\n  _sentStartForContentLength = 0;\n  _sentEndForContentLength = 0;\n  _updateCellsToRenderBatcher             ;\n  _viewabilityTuples                                        = [];\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _captureScrollRef = ref => {\n    this._scrollRef = ref;\n  };\n\n  _computeBlankness() {\n    this._fillRateHelper.computeBlankness(\n      this.props,\n      this.state.cellsAroundViewport,\n      this._scrollMetrics,\n    );\n  }\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _defaultRenderScrollComponent = props => {\n    const onRefresh = props.onRefresh;\n    if (this._isNestedWithSameOrientation()) {\n      // Prevent VirtualizedList._onContentSizeChange from being triggered by a bubbling onContentSizeChange event.\n      // This could lead to internal inconsistencies within VirtualizedList.\n      const {onContentSizeChange, ...otherProps} = props;\n      return <View {...otherProps} />;\n    } else if (onRefresh) {\n      invariant(\n        typeof props.refreshing === 'boolean',\n        '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n          JSON.stringify(props.refreshing ?? 'undefined') +\n          '`',\n      );\n      return (\n        // $FlowFixMe[prop-missing] Invalid prop usage\n        // $FlowFixMe[incompatible-use]\n        <ScrollView\n          {...props}\n          refreshControl={\n            props.refreshControl == null ? (\n              <RefreshControl\n                // $FlowFixMe[incompatible-type]\n                refreshing={props.refreshing}\n                onRefresh={onRefresh}\n                progressViewOffset={props.progressViewOffset}\n              />\n            ) : (\n              props.refreshControl\n            )\n          }\n        />\n      );\n    } else {\n      // $FlowFixMe[prop-missing] Invalid prop usage\n      // $FlowFixMe[incompatible-use]\n      return <ScrollView {...props} />;\n    }\n  };\n\n  _onCellLayout = (\n    e             ,\n    cellKey        ,\n    cellIndex        ,\n  )       => {\n    const layoutHasChanged = this._listMetrics.notifyCellLayout({\n      cellIndex,\n      cellKey,\n      layout: e.nativeEvent.layout,\n      orientation: this._orientation(),\n    });\n\n    if (layoutHasChanged) {\n      this._scheduleCellsToRenderUpdate();\n    }\n\n    this._triggerRemeasureForChildListsInCell(cellKey);\n    this._computeBlankness();\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n  };\n\n  _onCellFocusCapture = (cellKey        ) => {\n    this._lastFocusedCellKey = cellKey;\n    this._updateCellsToRender();\n  };\n\n  _onCellUnmount = (cellKey        ) => {\n    delete this._cellRefs[cellKey];\n    this._listMetrics.notifyCellUnmounted(cellKey);\n  };\n\n  _triggerRemeasureForChildListsInCell(cellKey        )       {\n    this._nestedChildLists.forEachInCell(cellKey, childList => {\n      childList.measureLayoutRelativeToContainingList();\n    });\n  }\n\n  measureLayoutRelativeToContainingList()       {\n    // TODO (T35574538): findNodeHandle sometimes crashes with \"Unable to find\n    // node on an unmounted component\" during scrolling\n    try {\n      if (!this._scrollRef) {\n        return;\n      }\n      // We are assuming that getOutermostParentListRef().getScrollRef()\n      // is a non-null reference to a ScrollView\n      this._scrollRef.measureLayout(\n        this.context.getOutermostParentListRef().getScrollRef(),\n        (x, y, width, height) => {\n          this._offsetFromParentVirtualizedList = this._selectOffset({x, y});\n          this._listMetrics.notifyListContentLayout({\n            layout: {width, height},\n            orientation: this._orientation(),\n          });\n          const scrollMetrics = this._convertParentScrollMetrics(\n            this.context.getScrollMetrics(),\n          );\n\n          const metricsChanged =\n            this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength ||\n            this._scrollMetrics.offset !== scrollMetrics.offset;\n\n          if (metricsChanged) {\n            this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;\n            this._scrollMetrics.offset = scrollMetrics.offset;\n\n            // If metrics of the scrollView changed, then we triggered remeasure for child list\n            // to ensure VirtualizedList has the right information.\n            this._nestedChildLists.forEach(childList => {\n              childList.measureLayoutRelativeToContainingList();\n            });\n          }\n        },\n        error => {\n          console.warn(\n            \"VirtualizedList: Encountered an error while measuring a list's\" +\n              ' offset from its containing VirtualizedList.',\n          );\n        },\n      );\n    } catch (error) {\n      console.warn(\n        'measureLayoutRelativeToContainingList threw an error',\n        error.stack,\n      );\n    }\n  }\n\n  _onLayout = (e             ) => {\n    if (this._isNestedWithSameOrientation()) {\n      // Need to adjust our scroll metrics to be relative to our containing\n      // VirtualizedList before we can make claims about list item viewability\n      this.measureLayoutRelativeToContainingList();\n    } else {\n      this._scrollMetrics.visibleLength = this._selectLength(\n        e.nativeEvent.layout,\n      );\n    }\n    this.props.onLayout && this.props.onLayout(e);\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEdgeReached();\n  };\n\n  _onLayoutEmpty = (e             ) => {\n    this.props.onLayout && this.props.onLayout(e);\n  };\n\n  _getFooterCellKey()         {\n    return this._getCellKey() + '-footer';\n  }\n\n  _onLayoutFooter = (e             ) => {\n    this._triggerRemeasureForChildListsInCell(this._getFooterCellKey());\n    this._footerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _onLayoutHeader = (e             ) => {\n    this._headerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  // $FlowFixMe[missing-local-annot]\n  _renderDebugOverlay() {\n    const normalize =\n      this._scrollMetrics.visibleLength /\n      (this._listMetrics.getContentLength() || 1);\n    const framesInLayout = [];\n    const itemCount = this.props.getItemCount(this.props.data);\n    for (let ii = 0; ii < itemCount; ii++) {\n      const frame = this._listMetrics.getCellMetricsApprox(ii, this.props);\n      if (frame.isMounted) {\n        framesInLayout.push(frame);\n      }\n    }\n    const windowTop = this._listMetrics.getCellMetricsApprox(\n      this.state.cellsAroundViewport.first,\n      this.props,\n    ).offset;\n    const frameLast = this._listMetrics.getCellMetricsApprox(\n      this.state.cellsAroundViewport.last,\n      this.props,\n    );\n    const windowLen = frameLast.offset + frameLast.length - windowTop;\n    const visTop = this._scrollMetrics.offset;\n    const visLen = this._scrollMetrics.visibleLength;\n\n    return (\n      <View style={[styles.debugOverlayBase, styles.debugOverlay]}>\n        {framesInLayout.map((f, ii) => (\n          <View\n            key={'f' + ii}\n            style={[\n              styles.debugOverlayBase,\n              styles.debugOverlayFrame,\n              {\n                top: f.offset * normalize,\n                height: f.length * normalize,\n              },\n            ]}\n          />\n        ))}\n        <View\n          style={[\n            styles.debugOverlayBase,\n            styles.debugOverlayFrameLast,\n            {\n              top: windowTop * normalize,\n              height: windowLen * normalize,\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.debugOverlayBase,\n            styles.debugOverlayFrameVis,\n            {\n              top: visTop * normalize,\n              height: visLen * normalize,\n            },\n          ]}\n        />\n      </View>\n    );\n  }\n\n  _selectLength(\n    metrics             \n                     \n                    \n         \n      ,\n  )         {\n    return !horizontalOrDefault(this.props.horizontal)\n      ? metrics.height\n      : metrics.width;\n  }\n\n  _selectOffset({x, y}                                        )         {\n    return this._orientation().horizontal ? x : y;\n  }\n\n  _orientation()                  {\n    return {\n      horizontal: horizontalOrDefault(this.props.horizontal),\n      rtl: I18nManager.isRTL,\n    };\n  }\n\n  _maybeCallOnEdgeReached() {\n    const {\n      data,\n      getItemCount,\n      onStartReached,\n      onStartReachedThreshold,\n      onEndReached,\n      onEndReachedThreshold,\n    } = this.props;\n    // If we have any pending scroll updates it means that the scroll metrics\n    // are out of date and we should not call any of the edge reached callbacks.\n    if (this.state.pendingScrollUpdateCount > 0) {\n      return;\n    }\n\n    const {visibleLength, offset} = this._scrollMetrics;\n    let distanceFromStart = offset;\n    let distanceFromEnd =\n      this._listMetrics.getContentLength() - visibleLength - offset;\n\n    // Especially when oERT is zero it's necessary to 'floor' very small distance values to be 0\n    // since debouncing causes us to not fire this event for every single \"pixel\" we scroll and can thus\n    // be at the edge of the list with a distance approximating 0 but not quite there.\n    if (distanceFromStart < ON_EDGE_REACHED_EPSILON) {\n      distanceFromStart = 0;\n    }\n    if (distanceFromEnd < ON_EDGE_REACHED_EPSILON) {\n      distanceFromEnd = 0;\n    }\n\n    // TODO: T121172172 Look into why we're \"defaulting\" to a threshold of 2px\n    // when oERT is not present (different from 2 viewports used elsewhere)\n    const DEFAULT_THRESHOLD_PX = 2;\n\n    const startThreshold =\n      onStartReachedThreshold != null\n        ? onStartReachedThreshold * visibleLength\n        : DEFAULT_THRESHOLD_PX;\n    const endThreshold =\n      onEndReachedThreshold != null\n        ? onEndReachedThreshold * visibleLength\n        : DEFAULT_THRESHOLD_PX;\n    const isWithinStartThreshold = distanceFromStart <= startThreshold;\n    const isWithinEndThreshold = distanceFromEnd <= endThreshold;\n\n    // First check if the user just scrolled within the end threshold\n    // and call onEndReached only once for a given content length,\n    // and only if onStartReached is not being executed\n    if (\n      onEndReached &&\n      this.state.cellsAroundViewport.last === getItemCount(data) - 1 &&\n      isWithinEndThreshold &&\n      this._listMetrics.getContentLength() !== this._sentEndForContentLength\n    ) {\n      this._sentEndForContentLength = this._listMetrics.getContentLength();\n      onEndReached({distanceFromEnd});\n    }\n\n    // Next check if the user just scrolled within the start threshold\n    // and call onStartReached only once for a given content length,\n    // and only if onEndReached is not being executed\n    if (\n      onStartReached != null &&\n      this.state.cellsAroundViewport.first === 0 &&\n      isWithinStartThreshold &&\n      this._listMetrics.getContentLength() !== this._sentStartForContentLength\n    ) {\n      this._sentStartForContentLength = this._listMetrics.getContentLength();\n      onStartReached({distanceFromStart});\n    }\n\n    // If the user scrolls away from the start or end and back again,\n    // cause onStartReached or onEndReached to be triggered again\n    if (!isWithinStartThreshold) {\n      this._sentStartForContentLength = 0;\n    }\n    if (!isWithinEndThreshold) {\n      this._sentEndForContentLength = 0;\n    }\n  }\n\n  _onContentSizeChange = (width        , height        ) => {\n    this._listMetrics.notifyListContentLayout({\n      layout: {width, height},\n      orientation: this._orientation(),\n    });\n\n    this._maybeScrollToInitialScrollIndex(width, height);\n\n    if (this.props.onContentSizeChange) {\n      this.props.onContentSizeChange(width, height);\n    }\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEdgeReached();\n  };\n\n  /**\n   * Scroll to a specified `initialScrollIndex` prop after the ScrollView\n   * content has been laid out, if it is still valid. Only a single scroll is\n   * triggered throughout the lifetime of the list.\n   */\n  _maybeScrollToInitialScrollIndex(\n    contentWidth        ,\n    contentHeight        ,\n  ) {\n    if (\n      contentWidth > 0 &&\n      contentHeight > 0 &&\n      this.props.initialScrollIndex != null &&\n      this.props.initialScrollIndex > 0 &&\n      !this._hasTriggeredInitialScrollToIndex\n    ) {\n      if (this.props.contentOffset == null) {\n        if (\n          this.props.initialScrollIndex <\n          this.props.getItemCount(this.props.data)\n        ) {\n          this.scrollToIndex({\n            animated: false,\n            index: nullthrows(this.props.initialScrollIndex),\n          });\n        } else {\n          this.scrollToEnd({animated: false});\n        }\n      }\n      this._hasTriggeredInitialScrollToIndex = true;\n    }\n  }\n\n  /* Translates metrics from a scroll event in a parent VirtualizedList into\n   * coordinates relative to the child list.\n   */\n  _convertParentScrollMetrics = (metrics   \n                          \n                   \n       \n   )             => {\n    // Offset of the top of the nested list relative to the top of its parent's viewport\n    const offset = metrics.offset - this._offsetFromParentVirtualizedList;\n    // Child's visible length is the same as its parent's\n    const visibleLength = metrics.visibleLength;\n    const dOffset = offset - this._scrollMetrics.offset;\n    const contentLength = this._listMetrics.getContentLength();\n\n    return {\n      visibleLength,\n      contentLength,\n      offset,\n      dOffset,\n    };\n  };\n\n  _onScroll = (e        ) => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onScroll(e);\n    });\n    if (this.props.onScroll) {\n      this.props.onScroll(e);\n    }\n    const timestamp = e.timeStamp;\n    let visibleLength = this._selectLength(e.nativeEvent.layoutMeasurement);\n    let contentLength = this._selectLength(e.nativeEvent.contentSize);\n    let offset = this._offsetFromScrollEvent(e);\n    let dOffset = offset - this._scrollMetrics.offset;\n\n    if (this._isNestedWithSameOrientation()) {\n      if (this._listMetrics.getContentLength() === 0) {\n        // Ignore scroll events until onLayout has been called and we\n        // know our offset from our offset from our parent\n        return;\n      }\n      ({visibleLength, contentLength, offset, dOffset} =\n        this._convertParentScrollMetrics({\n          visibleLength,\n          offset,\n        }));\n    }\n\n    const dt = this._scrollMetrics.timestamp\n      ? Math.max(1, timestamp - this._scrollMetrics.timestamp)\n      : 1;\n    const velocity = dOffset / dt;\n\n    if (\n      dt > 500 &&\n      this._scrollMetrics.dt > 500 &&\n      contentLength > 5 * visibleLength &&\n      !this._hasWarned.perf\n    ) {\n      infoLog(\n        'VirtualizedList: You have a large list that is slow to update - make sure your ' +\n          'renderItem function renders components that follow React performance best practices ' +\n          'like PureComponent, shouldComponentUpdate, etc.',\n        {dt, prevDt: this._scrollMetrics.dt, contentLength},\n      );\n      this._hasWarned.perf = true;\n    }\n\n    // For invalid negative values (w/ RTL), set this to 1.\n    const zoomScale = e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;\n    this._scrollMetrics = {\n      dt,\n      dOffset,\n      offset,\n      timestamp,\n      velocity,\n      visibleLength,\n      zoomScale,\n    };\n    if (this.state.pendingScrollUpdateCount > 0) {\n      this.setState(state => ({\n        pendingScrollUpdateCount: state.pendingScrollUpdateCount - 1,\n      }));\n    }\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n    if (!this.props) {\n      return;\n    }\n    this._maybeCallOnEdgeReached();\n    if (velocity !== 0) {\n      this._fillRateHelper.activate();\n    }\n    this._computeBlankness();\n    this._scheduleCellsToRenderUpdate();\n  };\n\n  _offsetFromScrollEvent(e             )         {\n    const {contentOffset, contentSize, layoutMeasurement} = e.nativeEvent;\n    const {horizontal, rtl} = this._orientation();\n    if (horizontal && rtl) {\n      return (\n        this._selectLength(contentSize) -\n        (this._selectOffset(contentOffset) +\n          this._selectLength(layoutMeasurement))\n      );\n    } else {\n      return this._selectOffset(contentOffset);\n    }\n  }\n\n  _scheduleCellsToRenderUpdate() {\n    // Only trigger high-priority updates if we've actually rendered cells,\n    // and with that size estimate, accurately compute how many cells we should render.\n    // Otherwise, it would just render as many cells as it can (of zero dimension),\n    // each time through attempting to render more (limited by maxToRenderPerBatch),\n    // starving the renderer from actually laying out the objects and computing _averageCellLength.\n    // If this is triggered in an `componentDidUpdate` followed by a hiPri cellToRenderUpdate\n    // We shouldn't do another hipri cellToRenderUpdate\n    if (\n      (this._listMetrics.getAverageCellLength() > 0 ||\n        this.props.getItemLayout != null) &&\n      this._shouldRenderWithPriority() &&\n      !this._hiPriInProgress\n    ) {\n      this._hiPriInProgress = true;\n      // Don't worry about interactions when scrolling quickly; focus on filling content as fast\n      // as possible.\n      this._updateCellsToRenderBatcher.dispose({abort: true});\n      this._updateCellsToRender();\n      return;\n    } else {\n      this._updateCellsToRenderBatcher.schedule();\n    }\n  }\n\n  _shouldRenderWithPriority()          {\n    const {first, last} = this.state.cellsAroundViewport;\n    const {offset, visibleLength, velocity} = this._scrollMetrics;\n    const itemCount = this.props.getItemCount(this.props.data);\n    let hiPri = false;\n    const onStartReachedThreshold = onStartReachedThresholdOrDefault(\n      this.props.onStartReachedThreshold,\n    );\n    const onEndReachedThreshold = onEndReachedThresholdOrDefault(\n      this.props.onEndReachedThreshold,\n    );\n    // Mark as high priority if we're close to the start of the first item\n    // But only if there are items before the first rendered item\n    if (first > 0) {\n      const distTop =\n        offset -\n        this._listMetrics.getCellMetricsApprox(first, this.props).offset;\n      hiPri =\n        distTop < 0 ||\n        (velocity < -2 &&\n          distTop <\n            getScrollingThreshold(onStartReachedThreshold, visibleLength));\n    }\n    // Mark as high priority if we're close to the end of the last item\n    // But only if there are items after the last rendered item\n    if (!hiPri && last >= 0 && last < itemCount - 1) {\n      const distBottom =\n        this._listMetrics.getCellMetricsApprox(last, this.props).offset -\n        (offset + visibleLength);\n      hiPri =\n        distBottom < 0 ||\n        (velocity > 2 &&\n          distBottom <\n            getScrollingThreshold(onEndReachedThreshold, visibleLength));\n    }\n\n    return hiPri;\n  }\n\n  _onScrollBeginDrag = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onScrollBeginDrag(e);\n    });\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.recordInteraction();\n    });\n    this._hasInteracted = true;\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  _onScrollEndDrag = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onScrollEndDrag(e);\n    });\n    const {velocity} = e.nativeEvent;\n    if (velocity) {\n      this._scrollMetrics.velocity = this._selectOffset(velocity);\n    }\n    this._computeBlankness();\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  _onMomentumScrollBegin = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onMomentumScrollBegin(e);\n    });\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  };\n\n  _onMomentumScrollEnd = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onMomentumScrollEnd(e);\n    });\n    this._scrollMetrics.velocity = 0;\n    this._computeBlankness();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  _updateCellsToRender = () => {\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n\n    this.setState((state, props) => {\n      const cellsAroundViewport = this._adjustCellsAroundViewport(\n        props,\n        state.cellsAroundViewport,\n        state.pendingScrollUpdateCount,\n      );\n      const renderMask = VirtualizedList._createRenderMask(\n        props,\n        cellsAroundViewport,\n        this._getNonViewportRenderRegions(props),\n      );\n\n      if (\n        cellsAroundViewport.first === state.cellsAroundViewport.first &&\n        cellsAroundViewport.last === state.cellsAroundViewport.last &&\n        renderMask.equals(state.renderMask)\n      ) {\n        return null;\n      }\n\n      return {cellsAroundViewport, renderMask};\n    });\n  };\n\n  _createViewToken = (\n    index        ,\n    isViewable         ,\n    props                 ,\n    // $FlowFixMe[missing-local-annot]\n  ) => {\n    const {data, getItem} = props;\n    const item = getItem(data, index);\n    return {\n      index,\n      item,\n      key: VirtualizedList._keyExtractor(item, index, props),\n      isViewable,\n    };\n  };\n\n  __getListMetrics()                        {\n    return this._listMetrics;\n  }\n\n  _getNonViewportRenderRegions = (\n    props                 ,\n  ) =>                  \n                  \n                 \n        {\n    // Keep a viewport's worth of content around the last focused cell to allow\n    // random navigation around it without any blanking. E.g. tabbing from one\n    // focused item out of viewport to another.\n    if (\n      !(this._lastFocusedCellKey && this._cellRefs[this._lastFocusedCellKey])\n    ) {\n      return [];\n    }\n\n    const lastFocusedCellRenderer = this._cellRefs[this._lastFocusedCellKey];\n    const focusedCellIndex = lastFocusedCellRenderer.props.index;\n    const itemCount = props.getItemCount(props.data);\n\n    // The last cell we rendered may be at a new index. Bail if we don't know\n    // where it is.\n    if (\n      focusedCellIndex >= itemCount ||\n      VirtualizedList._getItemKey(props, focusedCellIndex) !==\n        this._lastFocusedCellKey\n    ) {\n      return [];\n    }\n\n    let first = focusedCellIndex;\n    let heightOfCellsBeforeFocused = 0;\n    for (\n      let i = first - 1;\n      i >= 0 && heightOfCellsBeforeFocused < this._scrollMetrics.visibleLength;\n      i--\n    ) {\n      first--;\n      heightOfCellsBeforeFocused += this._listMetrics.getCellMetricsApprox(\n        i,\n        props,\n      ).length;\n    }\n\n    let last = focusedCellIndex;\n    let heightOfCellsAfterFocused = 0;\n    for (\n      let i = last + 1;\n      i < itemCount &&\n      heightOfCellsAfterFocused < this._scrollMetrics.visibleLength;\n      i++\n    ) {\n      last++;\n      heightOfCellsAfterFocused += this._listMetrics.getCellMetricsApprox(\n        i,\n        props,\n      ).length;\n    }\n\n    return [{first, last}];\n  };\n\n  _updateViewableItems(\n    props                 ,\n    cellsAroundViewport                               ,\n  ) {\n    // If we have any pending scroll updates it means that the scroll metrics\n    // are out of date and we should not call any of the visibility callbacks.\n    if (this.state.pendingScrollUpdateCount > 0) {\n      return;\n    }\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.onUpdate(\n        props,\n        this._scrollMetrics.offset,\n        this._scrollMetrics.visibleLength,\n        this._listMetrics,\n        this._createViewToken,\n        tuple.onViewableItemsChanged,\n        cellsAroundViewport,\n      );\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  verticallyInverted:\n    Platform.OS === 'android'\n      ? {transform: [{scale: -1}]}\n      : {transform: [{scaleY: -1}]},\n  horizontallyInverted: {\n    transform: [{scaleX: -1}],\n  },\n  debug: {\n    flex: 1,\n  },\n  debugOverlayBase: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n  debugOverlay: {\n    bottom: 0,\n    width: 20,\n    borderColor: 'blue',\n    borderWidth: 1,\n  },\n  debugOverlayFrame: {\n    left: 0,\n    backgroundColor: 'orange',\n  },\n  debugOverlayFrameLast: {\n    left: 0,\n    borderColor: 'green',\n    borderWidth: 2,\n  },\n  debugOverlayFrameVis: {\n    left: 0,\n    borderColor: 'red',\n    borderWidth: 2,\n  },\n});\n\nmodule.exports = VirtualizedList;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *      \n */\n\n'use strict';\n\n                                                           \n                                                                 \n                                                             \n                                                                           \n\nimport {                                     } from './Lists/VirtualizedListContext';\nimport {keyExtractor} from './Lists/VirtualizeUtils';\n\n             \n            \n                    \n                                \n                                   \n             \n                    \n                  \n                 \n             \n                                      \n             \n                                       \n                             \n              \n                                        \n                                                         \n\nmodule.exports = {\n  keyExtractor,\n\n  get VirtualizedList()                  {\n    return require('./Lists/VirtualizedList');\n  },\n  get VirtualizedSectionList()                         {\n    return require('./Lists/VirtualizedSectionList');\n  },\n  get VirtualizedListContextResetter()                                 {\n    const VirtualizedListContext = require('./Lists/VirtualizedListContext');\n    return VirtualizedListContext.VirtualizedListContextResetter;\n  },\n  get ViewabilityHelper()                    {\n    return require('./Lists/ViewabilityHelper');\n  },\n  get FillRateHelper()                 {\n    return require('./Lists/FillRateHelper');\n  },\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport default class ChildListCollection        {\n  _cellKeyToChildren                          = new Map();\n  _childrenToCellKey                     = new Map();\n\n  add(list       , cellKey        )       {\n    invariant(\n      !this._childrenToCellKey.has(list),\n      'Trying to add already present child list',\n    );\n\n    const cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n    cellLists.add(list);\n    this._cellKeyToChildren.set(cellKey, cellLists);\n\n    this._childrenToCellKey.set(list, cellKey);\n  }\n\n  remove(list       )       {\n    const cellKey = this._childrenToCellKey.get(list);\n    invariant(cellKey != null, 'Trying to remove non-present child list');\n    this._childrenToCellKey.delete(list);\n\n    const cellLists = this._cellKeyToChildren.get(cellKey);\n    invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n    cellLists.delete(list);\n\n    if (cellLists.size === 0) {\n      this._cellKeyToChildren.delete(cellKey);\n    }\n  }\n\n  forEach(fn               )       {\n    for (const listSet of this._cellKeyToChildren.values()) {\n      for (const list of listSet) {\n        fn(list);\n      }\n    }\n  }\n\n  forEachInCell(cellKey        , fn               )       {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      fn(list);\n    }\n  }\n\n  anyInCell(cellKey        , fn                  )          {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      if (fn(list)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  size()         {\n    return this._childrenToCellKey.size;\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n             \n                    \n                                \n            \n                             \n                                                                                \n             \n             \n              \n                                                     \n\nimport * as React from 'react';\nimport {                 } from 'react-native';\n\n                       \n\n                          \n                        \n                          \n                                                                          \n     \n  \n\n                                      \n              \n                \n                         \n     \n  \n\n                                                  \n                  \n                       \n                \n              \n                                               \n                                          \n                       \n   \n\n                                     \n                               \n                \n\n                       \n     \n                                                                                                              \n                                                                                    \n     \n             \n     \n                                                                          \n     \n                                               \n     \n                                                    \n     \n                                      \n   \n                       \n                                     \n     \n                                                                                                \n                                                     \n     \n                   \n     \n                                                                                                    \n                                                                                                    \n                                                    \n     \n                                   \n     \n                                                                                                  \n                                                                                               \n                                                       \n     \n                  \n                   \n                   \n              \n                  \n        \n                   \n                   \n                  \n       \n    \n                        \n     \n                                                                                                    \n                                                                                                   \n                                                               \n     \n                               \n     \n                                                                                            \n                                                                                              \n                                                                                               \n                                       \n     \n                               \n     \n                                                                   \n     \n                      \n                                                        \n     \n                                                                   \n                                                                      \n                                                                           \n                                                       \n     \n                                                                        \n     \n                                                                                               \n                                                                                                 \n                                                                                     \n                              \n     \n                                                     \n     \n                                                                           \n    \n                  \n                                                                                    \n                                                                               \n             \n                                                       \n                                                       \n                                \n                                                  \n                                                    \n                                                       \n                                                        \n                                          \n                      \n                                  \n             \n           \n    \n                                                                                        \n                                                                                                \n                                                                                            \n                                                                                                   \n                   \n     \n                        \n                              \n                                       \n    \n     \n                                                                                           \n                        \n     \n                         \n                              \n                                       \n    \n     \n                                                                                                   \n                        \n     \n                          \n                              \n                                       \n    \n     \n                                                      \n     \n                                           \n     \n                                                                                                \n                        \n     \n                          \n                              \n                                       \n    \n     \n                                                      \n     \n                                           \n     \n                                                                                                 \n                                                                                                \n                                                                    \n     \n                                \n     \n                                                                                    \n                                      \n     \n                                                                 \n     \n                                                                                           \n                                                                                     \n                                                                                    \n                                                \n     \n                                  \n     \n                                                                                                   \n                                                      \n     \n                          \n     \n                                                                                                   \n                                                                                                    \n                                                        \n     \n                                   \n                  \n                                      \n                              \n       \n             \n     \n                                                                                      \n                                        \n     \n                                                                     \n     \n                                                                                            \n                                                                                         \n                                                                                        \n                                                \n     \n                                    \n     \n                                                                   \n                              \n     \n                                    \n                                    \n                              \n       \n             \n                                 \n     \n                                                                                \n     \n                              \n     \n                                                                         \n                                                                              \n                                                                     \n     \n                                                      \n     \n                                                             \n     \n                        \n     \n                                                                                        \n    \n                                                         \n     \n                                  \n     \n                                                                                       \n     \n                                                                               \n     \n                                                                                                  \n                                                                                \n     \n                                      \n     \n                                                                     \n     \n                                        \n     \n                                                                                              \n                                                                                  \n     \n                                                                        \n     \n                                                                                             \n                                                                                                 \n                                                                                                   \n                                                                                                  \n                                                                                       \n     \n                       \n     \n                                                      \n     \n                               \n   \n\n                      \n                                     \n                   \n                   \n   \n\n/**\n * Default Props Helper Functions\n * Use the following helper functions for default values\n */\n\n// horizontalOrDefault(this.props.horizontal)\nexport function horizontalOrDefault(horizontal          )          {\n  return horizontal ?? false;\n}\n\n// initialNumToRenderOrDefault(this.props.initialNumToRender)\nexport function initialNumToRenderOrDefault(\n  initialNumToRender         ,\n)         {\n  return initialNumToRender ?? 10;\n}\n\n// maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch)\nexport function maxToRenderPerBatchOrDefault(\n  maxToRenderPerBatch         ,\n)         {\n  return maxToRenderPerBatch ?? 10;\n}\n\n// onStartReachedThresholdOrDefault(this.props.onStartReachedThreshold)\nexport function onStartReachedThresholdOrDefault(\n  onStartReachedThreshold         ,\n)         {\n  return onStartReachedThreshold ?? 2;\n}\n\n// onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold)\nexport function onEndReachedThresholdOrDefault(\n  onEndReachedThreshold         ,\n)         {\n  return onEndReachedThreshold ?? 2;\n}\n\n// windowSizeOrDefault(this.props.windowSize)\nexport function windowSizeOrDefault(windowSize         )         {\n  return windowSize ?? 21;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n'use strict';\n\n                                                             \n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\nconst invariant = require('invariant');\n\n                         \n            \n              \n                 \n                      \n                \n     \n  \n\n                                             \n                                       \n                                  \n                                    \n                              \n       \n             \n     \n  \n\n                                  \n     \n                                                                                                 \n                                                                                                   \n                                                    \n     \n                           \n\n     \n                                                                                       \n                                                                                              \n                                                                                               \n                                                                                               \n     \n                                            \n\n     \n                                                                                                  \n                                                             \n     \n                                       \n\n     \n                                                                                                 \n            \n     \n                               \n   \n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config                   ;\n  _hasInteracted          = false;\n  _timers              = new Set();\n  _viewableIndices                = [];\n  _viewableItems                         = new Map();\n\n  constructor(\n    config                    = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.63 was deployed. To see\n     * the error delete this comment and run Flow. */\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    props                 ,\n    scrollOffset        ,\n    viewportHeight        ,\n    listMetrics                       ,\n    // Optional optimization to reduce the scan size\n    renderRange    \n                    \n                   \n         \n     ,\n  )                {\n    const itemCount = props.getItemCount(props.data);\n    const {itemVisiblePercentThreshold, viewAreaCoveragePercentThreshold} =\n      this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    if (last >= itemCount) {\n      console.warn(\n        'Invalid render range computing viewability ' +\n          JSON.stringify({renderRange, itemCount}),\n      );\n      return [];\n    }\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = listMetrics.getCellMetrics(idx, props);\n      if (!metrics) {\n        continue;\n      }\n      const top = Math.floor(metrics.offset - scrollOffset);\n      const bottom = Math.floor(top + metrics.length);\n\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    props                 ,\n    scrollOffset        ,\n    viewportHeight        ,\n    listMetrics                       ,\n    createViewToken   \n                    \n                          \n                             \n                  ,\n    onViewableItemsChanged    \n                                      \n                                \n         \n              ,\n    // Optional optimization to reduce the scan size\n    renderRange    \n                    \n                   \n         \n     ,\n  )       {\n    const itemCount = props.getItemCount(props.data);\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !listMetrics.getCellMetrics(0, props)\n    ) {\n      return;\n    }\n    let viewableIndices                = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        props,\n        scrollOffset,\n        viewportHeight,\n        listMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle            = setTimeout(() => {\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          props,\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n       * comment suppresses an error found when Flow v0.63 was deployed. To see\n       * the error delete this comment and run Flow. */\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        props,\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    props                 ,\n    viewableIndicesToCheck               ,\n    onViewableItemsChanged    \n                                \n                                      \n         \n              ,\n    createViewToken   \n                    \n                          \n                             \n                  ,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true, props);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode         ,\n  viewablePercentThreshold        ,\n  top        ,\n  bottom        ,\n  viewportHeight        ,\n  itemLength        ,\n)          {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top        ,\n  bottom        ,\n  viewportHeight        ,\n)         {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top        ,\n  bottom        ,\n  viewportHeight        ,\n)          {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\nimport invariant from 'invariant';\nimport * as React from 'react';\n\n/**\n * `setState` is called asynchronously, and should not rely on the value of\n * `this.props` or `this.state`:\n * https://react.dev/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous\n *\n * SafePureComponent adds runtime enforcement, to catch cases where these\n * variables are read in a state updater function, instead of the ones passed\n * in.\n */\nexport default class StateSafePureComponent \n        \n                      \n  extends React.PureComponent               {\n  _inAsyncStateUpdate = false;\n\n  constructor(props       ) {\n    super(props);\n    this._installSetStateHooks();\n  }\n\n  setState(\n    partialState                                                         ,\n    callback              ,\n  )       {\n    if (typeof partialState === 'function') {\n      super.setState((state, props) => {\n        this._inAsyncStateUpdate = true;\n        let ret;\n        try {\n          ret = partialState(state, props);\n        } catch (err) {\n          throw err;\n        } finally {\n          this._inAsyncStateUpdate = false;\n        }\n        return ret;\n      }, callback);\n    } else {\n      super.setState(partialState, callback);\n    }\n  }\n\n  _installSetStateHooks() {\n    const that = this;\n    let {props, state} = this;\n\n    Object.defineProperty(this, 'props', {\n      get() {\n        invariant(\n          !that._inAsyncStateUpdate,\n          '\"this.props\" should not be accessed during state updates',\n        );\n        return props;\n      },\n      set(newProps       ) {\n        props = newProps;\n      },\n    });\n    Object.defineProperty(this, 'state', {\n      get() {\n        invariant(\n          !that._inAsyncStateUpdate,\n          '\"this.state\" should not be acceessed during state updates',\n        );\n        return state;\n      },\n      set(newState       ) {\n        state = newState;\n      },\n    });\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n'use strict';\n\n/**\n * Intentional info-level logging for clear separation from ad-hoc console debug logging.\n */\nfunction infoLog(...args              )       {\n  return console.log(...args);\n}\n\nmodule.exports = infoLog;\n"],"names":["clamp","min","value","max","module","CellRenderer","_this_props","cellKey","prevCellKey","select","newProps","nativeEvent","e","updateSeparatorProps","state","componentWillUnmount","_renderElement","renderItem","ListItemComponent","item","index","console","_invariant","render","CellRendererComponent","ItemSeparatorComponent","horizontal","inversionStyle","onCellLayout","element","itemSeparator","_react","cellStyle","styles","result","_reactnative","_VirtualizedListContext","getDerivedStateFromProps","props","prevState","_ReactNativeFeatureFlags","computeWindowedRenderLimits","elementsThatOverlapOffsets","keyExtractor","newRangeCount","offsets","listMetrics","zoomScale","itemCount","offsetIndex","currentOffset","left","right","mid","Math","frame","scaledOffsetStart","scaledOffsetEnd","prev","next","maxToRenderPerBatch","windowSize","scrollMetrics","offset","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","_elementsThatOverlapOffsets","overscanFirst","first","last","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","JSON","_type_of","String","VirtualizedListCellContextProvider","VirtualizedListContext","VirtualizedListContextProvider","VirtualizedListContextResetter","__DEV__","param","children","context","currContext","Info","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","activate","global","deactivateAndFlush","start","total_time_spent","info","derived","key","listener","computeBlankness","cellsAroundViewport","dOffset","scrollSpeed","now","blankTop","firstFrame","blankBottom","lastFrame","bottomEdge","pixels_blank","blankness","enabled","_resetData","addListener","callback","setSampleRate","sampleRate","setMinSampleCount","minSampleCount","VirtualizedSectionList","viewable","keyExtractorWithNullableIndex","keyExtractorWithNonNullableIndex","_VirtualizeUtils","_info_index","viewableItems","changed","onViewableItemsChanged","Boolean","listItemCount","infoIndex","section","renderSectionHeader","renderSectionFooter","SeparatorComponent","ItemWithSeparator","undefined","updateProps","updateHighlight","updateHighlightFn","updatePropsFn","ref","scrollToLocation","params","i","viewOffset","listRef","toIndexParams","getListRef","SectionSeparatorComponent","_renderItem","_sections","stickySectionHeadersEnabled","passThroughProps","listHeaderOffset","stickyHeaderIndices","_this_props_sections","_VirtualizedList","sections","_getItem","itemIdx","sectionData","_subExtractor","itemIndex","getItem","getItemCount","extractor","_getSeparatorComponent","isLastItemInList","isLastItemInSection","LeadingSeparatorComponent","setSelfHighlightCallback","updateHighlightFor","setSelfUpdatePropsCallback","updatePropsFor","inverted","_React_useState","leadingSeparatorHiglighted","setLeadingSeparatorHighlighted","_React_useState1","separatorHighlighted","setSeparatorHighlighted","_React_useState2","leadingSeparatorProps","setLeadingSeparatorProps","_React_useState3","separatorProps","setSeparatorProps","separators","leadingSeparator","separator","RenderSeparator","firstSeparator","secondSeparator","CellRenderMask","numCells","enumerateRegions","addCells","cells","_this__regions","_this__findRegion","firstIntersect","firstIntersectIdx","_this__findRegion1","lastIntersect","lastIntersectIdx","newLeadRegion","newTailRegion","newMainRegion","replacementRegions","numRegionsToDelete","equals","other","region","_findRegion","cellIdx","firstIdx","lastIdx","middleIdx","middleRegion","ListMetricsAggregator","Map","notifyCellLayout","cellIndex","orientation","layout","curr","dLength","notifyCellUnmounted","notifyListContentLayout","getAverageCellLength","getHighestMeasuredCellIndex","getCellMetricsApprox","data","getCellMetrics","getItemLayout","_props_keyExtractor","_getItemLayout","length","getCellOffsetApprox","Number","frameMetrics","remainder","getContentLength","_this__contentLength","hasContentLength","flowRelativeOffset","referenceContentLength","_this__orientation","rtl","contentLength","cartesianOffset","_invalidateIfOrientationChanged","_selectLength","width","height","_selectOffset","x","y","InteractionManager","require","Batchinator","delayMS","dispose","options","schedule","timeoutHandle","setTimeout","clearTimeout","ON_EDGE_REACHED_EPSILON","_usedIndexForKey","_keylessItemComponentName","getScrollingThreshold","threshold","VirtualizedList","_this_props_maintainVisibleContentPosition_minIndexForVisible","childList","keys","isVertical","_ListMetricsAggregator","_ChildListCollection","onRefresh","onContentSizeChange","otherProps","_props_refreshing","layoutHasChanged","metrics","timestamp","dt","_infoLog","tuple","renderMask","isViewable","lastFocusedCellRenderer","focusedCellIndex","heightOfCellsBeforeFocused","heightOfCellsAfterFocused","i1","_FillRateHelper","_this_props_updateCellsBatchingPeriod","_Batchinator","pair","_ViewabilityHelper","viewabilityConfig","initialRenderRegion","minIndexForVisible","scrollToEnd","animated","veryLast","scrollToIndex","onScrollToIndexFailed","viewPosition","scrollToItem","scrollToOffset","scrollRef","_scrollToParamsFromOffset","cartOffset","recordInteraction","t","flashScrollIndicators","getScrollResponder","getScrollableNode","getScrollRef","setNativeProps","_getCellKey","_this_context","hasMore","_checkProps","onScroll","initialScrollIndex","_VirtualizedListProps","flatStyles","_adjustCellsAroundViewport","pendingScrollUpdateCount","onEndReachedThreshold","_this__scrollMetrics","distanceFromEnd","newCellsAroundViewport","renderAhead","childIdx","_findFirstChildWithMore","ii","cellKeyForIndex","componentDidMount","_pushCells","stickyIndicesFromProps","stickyOffset","shouldListenForLayout","debug","_VirtualizedListCellRenderer","end","ListHeaderComponent","_isNestedWithSameOrientation","nestedContext","ListEmptyComponent","ListFooterComponent","_this_props1","Set","element1","event","spacerKey","renderRegions","lastRegion","lastSpacer","isLastSpacer","constrainToMeasured","_clamp","firstMetrics","lastMetrics","spacerSize","element2","_this_props_scrollEventThrottle","scrollProps","innerRet","ret","scrollContext","componentDidUpdate","prevProps","extraData","hiPriInProgress","_computeBlankness","_triggerRemeasureForChildListsInCell","measureLayoutRelativeToContainingList","metricsChanged","error","_getFooterCellKey","_renderDebugOverlay","normalize","framesInLayout","windowTop","frameLast","windowLen","visTop","visLen","f","_orientation","_maybeCallOnEdgeReached","onStartReached","onStartReachedThreshold","onEndReached","distanceFromStart","DEFAULT_THRESHOLD_PX","startThreshold","endThreshold","isWithinStartThreshold","isWithinEndThreshold","_maybeScrollToInitialScrollIndex","contentWidth","contentHeight","_nullthrows","_offsetFromScrollEvent","_e_nativeEvent","contentOffset","contentSize","layoutMeasurement","_scheduleCellsToRenderUpdate","_shouldRenderWithPriority","_this_state_cellsAroundViewport","hiPri","distTop","distBottom","__getListMetrics","_updateViewableItems","_findItemIndexWithKey","hint","curKey","curKey1","_getItemKey","_createRenderMask","additionalRegions","_CellRenderMask","allRegions","initialRegion","stickyIndicesSet","_initialRenderRegion","_props_initialScrollIndex","firstCellIndex","lastCellIndex","_ensureClosestStickyHeader","_newProps_maintainVisibleContentPosition_minIndexForVisible","maintainVisibleContentPositionAdjustment","prevFirstVisibleItemKey","newFirstVisibleItemKey","firstVisibleItemIndex","constrainedCells","_constrainToItemCount","lastPossibleCellIndex","maxFirst","_keyExtractor","_StateSafePureComponent","ChildListCollection","add","list","_this__cellKeyToChildren_get","cellLists","remove","forEach","fn","_this__cellKeyToChildren_values","listSet","forEachInCell","anyInCell","size","horizontalOrDefault","initialNumToRenderOrDefault","maxToRenderPerBatchOrDefault","onEndReachedThresholdOrDefault","onStartReachedThresholdOrDefault","windowSizeOrDefault","initialNumToRender","invariant","ViewabilityHelper","config","computeViewableItems","scrollOffset","viewportHeight","renderRange","_this__config","itemVisiblePercentThreshold","viewAreaCoveragePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","_ref","idx","top","bottom","_isViewable","onUpdate","createViewToken","v","handle","resetViewableIndices","_onUpdateSync","viewableIndicesToCheck","prevItems","nextItems","key1","viewable1","Array","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","StateSafePureComponent","setState","partialState","err","_installSetStateHooks","that","_this","Object","newState","infoLog","_key","args","_console"],"mappings":"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"}