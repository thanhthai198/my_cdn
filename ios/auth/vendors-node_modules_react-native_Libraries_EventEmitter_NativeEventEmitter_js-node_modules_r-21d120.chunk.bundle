(self["webpackChunksas_auth"] = self["webpackChunksas_auth"] || []).push([["vendors-node_modules_react-native_Libraries_EventEmitter_NativeEventEmitter_js-node_modules_r-21d120"], {
10059: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70973));
/**
 * Deprecated - subclass NativeEventEmitter to create granular event modules instead of
 * adding all event listeners directly to RCTNativeAppEventEmitter.
 */ var RCTNativeAppEventEmitter = _RCTDeviceEventEmitter.default;
module.exports = RCTNativeAppEventEmitter;


}),
10425: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
module.exports = __webpack_require__(87350);
function emptyFunction() {}
var BackHandler = {
    exitApp: emptyFunction,
    addEventListener: function(_eventName, _handler) {
        return {
            remove: emptyFunction
        };
    },
    removeEventListener: function(_eventName, _handler) {}
};
module.exports = BackHandler;


}),
11367: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(29849), exports));
var _default = _NativeHeadlessJsTaskSupport.default;


}),
18959: (function (__unused_webpack_module, exports) {
"use strict";

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
    }
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
}


}),
19283: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('RedBox');


}),
22069: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83672));
/**
 * This is a global shared instance of IPerformanceLogger that is created with
 * createPerformanceLogger().
 * This logger should be used only for global performance metrics like the ones
 * that are logged during loading bundle. If you want to log something from your
 * React component you should use PerformanceLoggerContext instead.
 */ var GlobalPerformanceLogger = (0, _createPerformanceLogger.default)();
module.exports = GlobalPerformanceLogger;


}),
25580: (function () {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */  // Experimental/Work in Progress Pointer Event Callbacks (not yet ready for use)
 /**
 * For most touch interactions, you'll simply want to wrap your component in
 * `TouchableHighlight` or `TouchableOpacity`. Check out `Touchable.js`,
 * `ScrollResponder.js` and `ResponderEventPlugin.js` for more discussion.
 */ 


}),
26167: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var AppContainer =  false ? 0 : (__webpack_require__(76104)/* ["default"] */["default"]);
module.exports = AppContainer;


}),
26939: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeAlertManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(89819), exports));
var _default = _NativeAlertManager.default;


}),
28462: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _to_consumable_array = __webpack_require__(8034);
var invariant = __webpack_require__(27761);
var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
};
var warningHandler = null;
var RCTLog = {
    // level one of log, info, warn, error, mustfix
    logIfNoNativeHook: function(level) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        // We already printed in the native console, so only log here if using a js debugger
        if (typeof __webpack_require__.g.nativeLoggingHook === 'undefined') {
            var _RCTLog;
            (_RCTLog = RCTLog).logToConsole.apply(_RCTLog, [
                level
            ].concat(_to_consumable_array._(args)));
        } else {
            // Report native warnings to LogBox
            if (warningHandler && level === 'warn') {
                warningHandler.apply(void 0, _to_consumable_array._(args));
            }
        }
    },
    // Log to console regardless of nativeLoggingHook
    logToConsole: function(level) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        var _console;
        // $FlowFixMe[invalid-computed-prop]
        var logFn = levelsMap[level];
        invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());
        (_console = console)[logFn].apply(_console, _to_consumable_array._(args));
    },
    setWarningHandler: function(handler) {
        warningHandler = handler;
    }
};
module.exports = RCTLog;


}),
28987: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(29936);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
/**
 * @typedef {object} PrivateData
 * @property {EventTarget} eventTarget The event target.
 * @property {{type:string}} event The original event object.
 * @property {number} eventPhase The current event phase.
 * @property {EventTarget|null} currentTarget The current event target.
 * @property {boolean} canceled The flag to prevent default.
 * @property {boolean} stopped The flag to stop propagation.
 * @property {boolean} immediateStopped The flag to stop propagation immediately.
 * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
 * @property {number} timeStamp The unix time.
 * @private
 */ /**
 * Private data for event wrappers.
 * @type {WeakMap<Event, PrivateData>}
 * @private
 */ var privateData = new WeakMap();
/**
 * Cache for wrapper classes.
 * @type {WeakMap<Object, Function>}
 * @private
 */ var wrappers = new WeakMap();
/**
 * Get private data.
 * @param {Event} event The event object to get private data.
 * @returns {PrivateData} The private data of the event.
 * @private
 */ function pd(event) {
    var retv = privateData.get(event);
    console.assert(retv != null, "'this' is expected an Event object, but got", event);
    return retv;
}
/**
 * https://dom.spec.whatwg.org/#set-the-canceled-flag
 * @param data {PrivateData} private data.
 */ function setCancelFlag(data) {
    if (data.passiveListener != null) {
        if (typeof console !== "undefined" && typeof console.error === "function") {
            console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
        }
        return;
    }
    if (!data.event.cancelable) {
        return;
    }
    data.canceled = true;
    if (typeof data.event.preventDefault === "function") {
        data.event.preventDefault();
    }
}
/**
 * @see https://dom.spec.whatwg.org/#interface-event
 * @private
 */ /**
 * The event wrapper.
 * @constructor
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Event|{type:string}} event The original event to wrap.
 */ function Event(eventTarget, event) {
    privateData.set(this, {
        eventTarget: eventTarget,
        event: event,
        eventPhase: 2,
        currentTarget: eventTarget,
        canceled: false,
        stopped: false,
        immediateStopped: false,
        passiveListener: null,
        timeStamp: event.timeStamp || Date.now()
    });
    // https://heycam.github.io/webidl/#Unforgeable
    Object.defineProperty(this, "isTrusted", {
        value: false,
        enumerable: true
    });
    // Define accessors
    var keys = Object.keys(event);
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        if (!(key in this)) {
            Object.defineProperty(this, key, defineRedirectDescriptor(key));
        }
    }
}
// Should be enumerable, but class methods are not enumerable.
Event.prototype = {
    /**
     * The type of this event.
     * @type {string}
     */ get type () {
        return pd(this).event.type;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */ get target () {
        return pd(this).eventTarget;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */ get currentTarget () {
        return pd(this).currentTarget;
    },
    /**
     * @returns {EventTarget[]} The composed path of this event.
     */ composedPath: function() {
        var currentTarget = pd(this).currentTarget;
        if (currentTarget == null) {
            return [];
        }
        return [
            currentTarget
        ];
    },
    /**
     * Constant of NONE.
     * @type {number}
     */ get NONE () {
        return 0;
    },
    /**
     * Constant of CAPTURING_PHASE.
     * @type {number}
     */ get CAPTURING_PHASE () {
        return 1;
    },
    /**
     * Constant of AT_TARGET.
     * @type {number}
     */ get AT_TARGET () {
        return 2;
    },
    /**
     * Constant of BUBBLING_PHASE.
     * @type {number}
     */ get BUBBLING_PHASE () {
        return 3;
    },
    /**
     * The target of this event.
     * @type {number}
     */ get eventPhase () {
        return pd(this).eventPhase;
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */ stopPropagation: function() {
        var data = pd(this);
        data.stopped = true;
        if (typeof data.event.stopPropagation === "function") {
            data.event.stopPropagation();
        }
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */ stopImmediatePropagation: function() {
        var data = pd(this);
        data.stopped = true;
        data.immediateStopped = true;
        if (typeof data.event.stopImmediatePropagation === "function") {
            data.event.stopImmediatePropagation();
        }
    },
    /**
     * The flag to be bubbling.
     * @type {boolean}
     */ get bubbles () {
        return Boolean(pd(this).event.bubbles);
    },
    /**
     * The flag to be cancelable.
     * @type {boolean}
     */ get cancelable () {
        return Boolean(pd(this).event.cancelable);
    },
    /**
     * Cancel this event.
     * @returns {void}
     */ preventDefault: function() {
        setCancelFlag(pd(this));
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     */ get defaultPrevented () {
        return pd(this).canceled;
    },
    /**
     * The flag to be composed.
     * @type {boolean}
     */ get composed () {
        return Boolean(pd(this).event.composed);
    },
    /**
     * The unix time of this event.
     * @type {number}
     */ get timeStamp () {
        return pd(this).timeStamp;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     * @deprecated
     */ get srcElement () {
        return pd(this).eventTarget;
    },
    /**
     * The flag to stop event bubbling.
     * @type {boolean}
     * @deprecated
     */ get cancelBubble () {
        return pd(this).stopped;
    },
    set cancelBubble (value){
        if (!value) {
            return;
        }
        var data = pd(this);
        data.stopped = true;
        if (typeof data.event.cancelBubble === "boolean") {
            data.event.cancelBubble = true;
        }
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     * @deprecated
     */ get returnValue () {
        return !pd(this).canceled;
    },
    set returnValue (value){
        if (!value) {
            setCancelFlag(pd(this));
        }
    },
    /**
     * Initialize this event object. But do nothing under event dispatching.
     * @param {string} type The event type.
     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
     * @param {boolean} [cancelable=false] The flag to be possible to cancel.
     * @deprecated
     */ initEvent: function() {
    // Do nothing.
    }
};
// `constructor` is not enumerable.
Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
});
// Ensure `event instanceof window.Event` is `true`.
if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);
    // Make association for wrappers.
    wrappers.set(window.Event.prototype, Event);
}
/**
 * Get the property descriptor to redirect a given property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to redirect the property.
 * @private
 */ function defineRedirectDescriptor(key) {
    return {
        get: function() {
            return pd(this).event[key];
        },
        set: function(value1) {
            pd(this).event[key] = value1;
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Get the property descriptor to call a given method property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to call the method property.
 * @private
 */ function defineCallDescriptor(key) {
    return {
        value: function() {
            var event = pd(this).event;
            return event[key].apply(event, arguments);
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Define new wrapper class.
 * @param {Function} BaseEvent The base wrapper class.
 * @param {Object} proto The prototype of the original event.
 * @returns {Function} The defined wrapper class.
 * @private
 */ function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);
    if (keys.length === 0) {
        return BaseEvent;
    }
    /** CustomEvent */ function CustomEvent(eventTarget, event) {
        BaseEvent.call(this, eventTarget, event);
    }
    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
        constructor: {
            value: CustomEvent,
            configurable: true,
            writable: true
        }
    });
    // Define accessors.
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        if (!(key in BaseEvent.prototype)) {
            var descriptor = Object.getOwnPropertyDescriptor(proto, key);
            var isFunc = typeof descriptor.value === "function";
            Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
        }
    }
    return CustomEvent;
}
/**
 * Get the wrapper class of a given prototype.
 * @param {Object} proto The prototype of the original event to get its wrapper.
 * @returns {Function} The wrapper class.
 * @private
 */ function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
        return Event;
    }
    var wrapper = wrappers.get(proto);
    if (wrapper == null) {
        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
        wrappers.set(proto, wrapper);
    }
    return wrapper;
}
/**
 * Wrap a given event to management a dispatching.
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Object} event The event to wrap.
 * @returns {Event} The wrapper instance.
 * @private
 */ function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
}
/**
 * Get the immediateStopped flag of a given event.
 * @param {Event} event The event to get.
 * @returns {boolean} The flag to stop propagation immediately.
 * @private
 */ function isStopped(event) {
    return pd(event).immediateStopped;
}
/**
 * Set the current event phase of a given event.
 * @param {Event} event The event to set current target.
 * @param {number} eventPhase New event phase.
 * @returns {void}
 * @private
 */ function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
}
/**
 * Set the current target of a given event.
 * @param {Event} event The event to set current target.
 * @param {EventTarget|null} currentTarget New current target.
 * @returns {void}
 * @private
 */ function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
}
/**
 * Set a passive listener of a given event.
 * @param {Event} event The event to set current target.
 * @param {Function|null} passiveListener New passive listener.
 * @returns {void}
 * @private
 */ function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
}
/**
 * @typedef {object} ListenerNode
 * @property {Function} listener
 * @property {1|2|3} listenerType
 * @property {boolean} passive
 * @property {boolean} once
 * @property {ListenerNode|null} next
 * @private
 */ /**
 * @type {WeakMap<object, Map<string, ListenerNode>>}
 * @private
 */ var listenersMap = new WeakMap();
// Listener types
var CAPTURE = 1;
var BUBBLE = 2;
var ATTRIBUTE = 3;
/**
 * Check whether a given value is an object or not.
 * @param {any} x The value to check.
 * @returns {boolean} `true` if the value is an object.
 */ function isObject(x) {
    return x !== null && (typeof x === "undefined" ? "undefined" : _type_of._(x)) === "object" //eslint-disable-line no-restricted-syntax
    ;
}
/**
 * Get listeners.
 * @param {EventTarget} eventTarget The event target to get.
 * @returns {Map<string, ListenerNode>} The listeners.
 * @private
 */ function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);
    if (listeners == null) {
        throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }
    return listeners;
}
/**
 * Get the property descriptor for the event attribute of a given event.
 * @param {string} eventName The event name to get property descriptor.
 * @returns {PropertyDescriptor} The property descriptor.
 * @private
 */ function defineEventAttributeDescriptor(eventName) {
    return {
        get: function() {
            var listeners = getListeners(this);
            var node = listeners.get(eventName);
            while(node != null){
                if (node.listenerType === ATTRIBUTE) {
                    return node.listener;
                }
                node = node.next;
            }
            return null;
        },
        set: function(listener) {
            if (typeof listener !== "function" && !isObject(listener)) {
                listener = null; // eslint-disable-line no-param-reassign
            }
            var listeners = getListeners(this);
            // Traverse to the tail while removing old value.
            var prev = null;
            var node = listeners.get(eventName);
            while(node != null){
                if (node.listenerType === ATTRIBUTE) {
                    // Remove old value.
                    if (prev !== null) {
                        prev.next = node.next;
                    } else if (node.next !== null) {
                        listeners.set(eventName, node.next);
                    } else {
                        listeners["delete"](eventName);
                    }
                } else {
                    prev = node;
                }
                node = node.next;
            }
            // Add new value.
            if (listener !== null) {
                var newNode = {
                    listener: listener,
                    listenerType: ATTRIBUTE,
                    passive: false,
                    once: false,
                    next: null
                };
                if (prev === null) {
                    listeners.set(eventName, newNode);
                } else {
                    prev.next = newNode;
                }
            }
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Define an event attribute (e.g. `eventTarget.onclick`).
 * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
 * @param {string} eventName The event name to define.
 * @returns {void}
 */ function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, "on" + eventName, defineEventAttributeDescriptor(eventName));
}
/**
 * Define a custom EventTarget with event attributes.
 * @param {string[]} eventNames Event names for event attributes.
 * @returns {EventTarget} The custom EventTarget.
 * @private
 */ function defineCustomEventTarget(eventNames) {
    /** CustomEventTarget */ function CustomEventTarget() {
        EventTarget.call(this);
    }
    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
        constructor: {
            value: CustomEventTarget,
            configurable: true,
            writable: true
        }
    });
    for(var i = 0; i < eventNames.length; ++i){
        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }
    return CustomEventTarget;
}
/**
 * EventTarget.
 *
 * - This is constructor if no arguments.
 * - This is a function which returns a CustomEventTarget constructor if there are arguments.
 *
 * For example:
 *
 *     class A extends EventTarget {}
 *     class B extends EventTarget("message") {}
 *     class C extends EventTarget("message", "error") {}
 *     class D extends EventTarget(["message", "error"]) {}
 */ function EventTarget() {
    /*eslint-disable consistent-return */ if (this instanceof EventTarget) {
        listenersMap.set(this, new Map());
        return;
    }
    if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(arguments[0]);
    }
    if (arguments.length > 0) {
        var types = new Array(arguments.length);
        for(var i = 0; i < arguments.length; ++i){
            types[i] = arguments[i];
        }
        return defineCustomEventTarget(types);
    }
    throw new TypeError("Cannot call a class as a function");
/*eslint-enable consistent-return */ }
// Should be enumerable, but class methods are not enumerable.
EventTarget.prototype = {
    /**
     * Add a given listener to this event target.
     * @param {string} eventName The event name to add.
     * @param {Function} listener The listener to add.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */ addEventListener: function(eventName, listener, options) {
        if (listener == null) {
            return;
        }
        if (typeof listener !== "function" && !isObject(listener)) {
            throw new TypeError("'listener' should be a function or an object.");
        }
        var listeners = getListeners(this);
        var optionsIsObj = isObject(options);
        var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var newNode = {
            listener: listener,
            listenerType: listenerType,
            passive: optionsIsObj && Boolean(options.passive),
            once: optionsIsObj && Boolean(options.once),
            next: null
        };
        // Set it as the first node if the first node is null.
        var node = listeners.get(eventName);
        if (node === undefined) {
            listeners.set(eventName, newNode);
            return;
        }
        // Traverse to the tail while checking duplication..
        var prev = null;
        while(node != null){
            if (node.listener === listener && node.listenerType === listenerType) {
                // Should ignore duplication.
                return;
            }
            prev = node;
            node = node.next;
        }
        // Add it.
        prev.next = newNode;
    },
    /**
     * Remove a given listener from this event target.
     * @param {string} eventName The event name to remove.
     * @param {Function} listener The listener to remove.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */ removeEventListener: function(eventName, listener, options) {
        if (listener == null) {
            return;
        }
        var listeners = getListeners(this);
        var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var prev = null;
        var node = listeners.get(eventName);
        while(node != null){
            if (node.listener === listener && node.listenerType === listenerType) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners["delete"](eventName);
                }
                return;
            }
            prev = node;
            node = node.next;
        }
    },
    /**
     * Dispatch a given event.
     * @param {Event|{type:string}} event The event to dispatch.
     * @returns {boolean} `false` if canceled.
     */ dispatchEvent: function(event) {
        if (event == null || typeof event.type !== "string") {
            throw new TypeError('"event.type" should be a string.');
        }
        // If listeners aren't registered, terminate.
        var listeners = getListeners(this);
        var eventName = event.type;
        var node = listeners.get(eventName);
        if (node == null) {
            return true;
        }
        // Since we cannot rewrite several properties, so wrap object.
        var wrappedEvent = wrapEvent(this, event);
        // This doesn't process capturing phase and bubbling phase.
        // This isn't participating in a tree.
        var prev = null;
        while(node != null){
            // Remove this listener if it's once
            if (node.once) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners["delete"](eventName);
                }
            } else {
                prev = node;
            }
            // Call this listener
            setPassiveListener(wrappedEvent, node.passive ? node.listener : null);
            if (typeof node.listener === "function") {
                try {
                    node.listener.call(this, wrappedEvent);
                } catch (err) {
                    if (typeof console !== "undefined" && typeof console.error === "function") {
                        console.error(err);
                    }
                }
            } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                node.listener.handleEvent(wrappedEvent);
            }
            // Break if `event.stopImmediatePropagation` was called.
            if (isStopped(wrappedEvent)) {
                break;
            }
            node = node.next;
        }
        setPassiveListener(wrappedEvent, null);
        setEventPhase(wrappedEvent, 0);
        setCurrentTarget(wrappedEvent, null);
        return !wrappedEvent.defaultPrevented;
    }
};
// `constructor` is not enumerable.
Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
});
// Ensure `eventTarget instanceof window.EventTarget` is `true`.
if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
}
exports.defineEventAttribute = defineEventAttribute;
exports.EventTarget = EventTarget;
exports["default"] = EventTarget;
module.exports = EventTarget;
module.exports.EventTarget = module.exports["default"] = EventTarget;
module.exports.defineEventAttribute = defineEventAttribute //# sourceMappingURL=event-target-shim.js.map
;


}),
29384: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * Combines two styles such that `style2` will override any styles in `style1`.
 * If either style is null or undefined, the other one is returned without
 * allocating an array, saving allocations and enabling memoization.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return composeStyles;
    }
}));
function composeStyles(style1, style2) {
    if (style1 == null) {
        return style2;
    }
    if (style2 == null) {
        return style1;
    }
    return [
        style1,
        style2
    ];
}


}),
29849: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('HeadlessJsTaskSupport');


}),
30176: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeRedBox = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(19283), exports));
var _default = _NativeRedBox.default;


}),
31043: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return NativeEventEmitter;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _to_consumable_array = __webpack_require__(8034);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93839));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70973));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var NativeEventEmitter = /*#__PURE__*/ function() {
    function NativeEventEmitter(nativeModule) {
        if (_Platform.default.OS === 'ios') {
            (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
        }
        var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';
        var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';
        if (nativeModule && hasAddListener && hasRemoveListeners) {
            this._nativeModule = nativeModule;
        } else if (nativeModule != null) {
            if (!hasAddListener) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');
            }
            if (!hasRemoveListeners) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');
            }
        }
    }
    var _proto = NativeEventEmitter.prototype;
    _proto.addListener = function addListener(eventType, listener, context) {
        var _this = this;
        var _this__nativeModule;
        (_this__nativeModule = this._nativeModule) == null ? void 0 : _this__nativeModule.addListener(eventType);
        var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
        return {
            remove: function() {
                if (subscription != null) {
                    var _this__nativeModule;
                    (_this__nativeModule = _this._nativeModule) == null ? void 0 : _this__nativeModule.removeListeners(1);
                    subscription.remove();
                    subscription = null;
                }
            }
        };
    };
    _proto.emit = function emit(eventType) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        var _RCTDeviceEventEmitter1;
        (_RCTDeviceEventEmitter1 = _RCTDeviceEventEmitter.default).emit.apply(_RCTDeviceEventEmitter1, [
            eventType
        ].concat(_to_consumable_array._(args)));
    };
    _proto.removeAllListeners = function removeAllListeners(eventType) {
        var _this__nativeModule;
        (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
        (_this__nativeModule = this._nativeModule) == null ? void 0 : _this__nativeModule.removeListeners(this.listenerCount(eventType));
        _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
    };
    _proto.listenerCount = function listenerCount(eventType) {
        return _RCTDeviceEventEmitter.default.listenerCount(eventType);
    };
    return NativeEventEmitter;
}();


}),
34173: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var registerCallableModule = function() {
    if (__webpack_require__.g.RN$Bridgeless === true) {
        return function(name, moduleOrFactory) {
            if (typeof moduleOrFactory === 'function') {
                __webpack_require__.g.RN$registerCallableModule(name, moduleOrFactory);
                return;
            }
            __webpack_require__.g.RN$registerCallableModule(name, function() {
                return moduleOrFactory;
            });
        };
    }
    var BatchedBridge = __webpack_require__(70572);
    return function(name, moduleOrFactory) {
        if (typeof moduleOrFactory === 'function') {
            BatchedBridge.registerLazyCallableModule(name, moduleOrFactory);
            return;
        }
        BatchedBridge.registerCallableModule(name, moduleOrFactory);
    };
}();
var _default = registerCallableModule;


}),
35684: (function (__unused_webpack_module, exports) {
"use strict";

function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports._ = _object_without_properties_loose;


}),
39404: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('Networking');


}),
4980: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getCachedComponentWithDisplayName;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var cache = new Map();
function getCachedComponentWithDisplayName(displayName) {
    var ComponentWithDisplayName = cache.get(displayName);
    if (!ComponentWithDisplayName) {
        ComponentWithDisplayName = function(param) {
            var children = param.children;
            return children;
        };
        // $FlowFixMe[prop-missing]
        ComponentWithDisplayName.displayName = displayName;
        cache.set(displayName, ComponentWithDisplayName);
    }
    return ComponentWithDisplayName;
}


}),
50270: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(91698), exports));
var _default = _NativeBlobModule.default;


}),
50792: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93839));
var _RCTAlertManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(9734));
/**
 * Launches an alert dialog with the specified title and message.
 *
 * See https://reactnative.dev/docs/alert
 */ var Alert = /*#__PURE__*/ function() {
    "use strict";
    function Alert() {}
    Alert.alert = function alert(title, message, buttons, options) {
        if (_Platform.default.OS === 'ios') {
            Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);
        } else if (_Platform.default.OS === 'android') {
            var NativeDialogManagerAndroid = (__webpack_require__(51663)/* ["default"] */["default"]);
            if (!NativeDialogManagerAndroid) {
                return;
            }
            var constants = NativeDialogManagerAndroid.getConstants();
            var config = {
                title: title || '',
                message: message || '',
                cancelable: false
            };
            if (options && options.cancelable) {
                config.cancelable = options.cancelable;
            }
            // At most three buttons (neutral, negative, positive). Ignore rest.
            // The text 'OK' should be probably localized. iOS Alert does that in native.
            var defaultPositiveText = 'OK';
            var validButtons = buttons ? buttons.slice(0, 3) : [
                {
                    text: defaultPositiveText
                }
            ];
            var buttonPositive = validButtons.pop();
            var buttonNegative = validButtons.pop();
            var buttonNeutral = validButtons.pop();
            if (buttonNeutral) {
                config.buttonNeutral = buttonNeutral.text || '';
            }
            if (buttonNegative) {
                config.buttonNegative = buttonNegative.text || '';
            }
            if (buttonPositive) {
                config.buttonPositive = buttonPositive.text || defaultPositiveText;
            }
            /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ var onAction = function(action, buttonKey) {
                if (action === constants.buttonClicked) {
                    if (buttonKey === constants.buttonNeutral) {
                        // $FlowFixMe[incompatible-type]
                        buttonNeutral.onPress && buttonNeutral.onPress();
                    } else if (buttonKey === constants.buttonNegative) {
                        // $FlowFixMe[incompatible-type]
                        buttonNegative.onPress && buttonNegative.onPress();
                    } else if (buttonKey === constants.buttonPositive) {
                        // $FlowFixMe[incompatible-type]
                        buttonPositive.onPress && buttonPositive.onPress();
                    }
                } else if (action === constants.dismissed) {
                    options && options.onDismiss && options.onDismiss();
                }
            };
            var onError = function(errorMessage) {
                return console.warn(errorMessage);
            };
            NativeDialogManagerAndroid.showAlert(config, onError, onAction);
        }
    };
    Alert.prompt = function prompt(title, message, callbackOrButtons, type, defaultValue, keyboardType, options) {
        if (type === void 0) type = 'plain-text';
        if (_Platform.default.OS === 'ios') {
            var callbacks = [];
            var buttons = [];
            var cancelButtonKey;
            var destructiveButtonKey;
            var preferredButtonKey;
            if (typeof callbackOrButtons === 'function') {
                callbacks = [
                    callbackOrButtons
                ];
            } else if (Array.isArray(callbackOrButtons)) {
                callbackOrButtons.forEach(function(btn, index) {
                    callbacks[index] = btn.onPress;
                    if (btn.style === 'cancel') {
                        cancelButtonKey = String(index);
                    } else if (btn.style === 'destructive') {
                        destructiveButtonKey = String(index);
                    }
                    if (btn.isPreferred) {
                        preferredButtonKey = String(index);
                    }
                    if (btn.text || index < (callbackOrButtons || []).length - 1) {
                        var btnDef = {};
                        btnDef[index] = btn.text || '';
                        buttons.push(btnDef);
                    }
                });
            }
            _RCTAlertManager.default.alertWithArgs({
                title: title || '',
                message: message || undefined,
                buttons: buttons,
                type: type || undefined,
                defaultValue: defaultValue,
                cancelButtonKey: cancelButtonKey,
                destructiveButtonKey: destructiveButtonKey,
                preferredButtonKey: preferredButtonKey,
                keyboardType: keyboardType,
                userInterfaceStyle: (options == null ? void 0 : options.userInterfaceStyle) || undefined
            }, function(id, value) {
                var cb = callbacks[id];
                cb && cb(value);
            });
        }
    };
    return Alert;
}();
module.exports = Alert;


}),
51048: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('BugReporting');


}),
51515: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _to_consumable_array = __webpack_require__(8034);
/**
 * Intentional info-level logging for clear separation from ad-hoc console debug logging.
 */ function infoLog() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    var _console;
    return (_console = console).log.apply(_console, _to_consumable_array._(args));
}
module.exports = infoLog;


}),
51663: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(93193), exports));
var _default = _NativeDialogManagerAndroid.default;


}),
51686: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(51048), exports));
var _default = _NativeBugReporting.default;


}),
53750: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get usePerformanceLogger () {
        return usePerformanceLogger;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22069));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * This is a React Context that provides a scoped instance of IPerformanceLogger.
 * We wrap every <AppContainer /> with a Provider for this context so the logger
 * should be available in every component.
 * See React docs about using Context: https://react.dev/docs/context.html
 */ var PerformanceLoggerContext = /*#__PURE__*/ _react.createContext(_GlobalPerformanceLogger.default);
if (false) {}
function usePerformanceLogger() {
    return (0, _react.useContext)(PerformanceLoggerContext);
}
var _default = PerformanceLoggerContext;


}),
53982: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ /** DisplayMode should be in sync with the method displayModeToInt from
 * react/renderer/uimanager/primitives.h. */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get coerceDisplayMode () {
        return coerceDisplayMode;
    },
    get default () {
        return _default;
    }
});
var DisplayMode = Object.freeze({
    VISIBLE: 1,
    SUSPENDED: 2,
    HIDDEN: 3
});
function coerceDisplayMode(value) {
    switch(value){
        case DisplayMode.SUSPENDED:
            return DisplayMode.SUSPENDED;
        case DisplayMode.HIDDEN:
            return DisplayMode.HIDDEN;
        default:
            return DisplayMode.VISIBLE;
    }
}
var _default = DisplayMode;


}),
59975: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _sliced_to_array = __webpack_require__(21193);
var _type_of = __webpack_require__(29936);
/**
 * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests
 * with mixed data (string, native files) to be submitted via XMLHttpRequest.
 *
 * Example:
 *
 *   var photo = {
 *     uri: uriFromCameraRoll,
 *     type: 'image/jpeg',
 *     name: 'photo.jpg',
 *   };
 *
 *   var body = new FormData();
 *   body.append('authToken', 'secret');
 *   body.append('photo', photo);
 *   body.append('title', 'A beautiful photo!');
 *
 *   xhr.open('POST', serverURL);
 *   xhr.send(body);
 */ var FormData = /*#__PURE__*/ function() {
    function FormData() {
        this._parts = [];
    }
    var _proto = FormData.prototype;
    _proto.append = function append(key, value) {
        // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.
        // MDN says that any new values should be appended to existing values.
        // In any case, major browsers allow duplicate keys, so that's what we'll do
        // too. They'll simply get appended as additional form data parts in the
        // request body, leaving the server to deal with them.
        this._parts.push([
            key,
            value
        ]);
    };
    _proto.getAll = function getAll(key) {
        return this._parts.filter(function(param) {
            var _param = _sliced_to_array._(param, 1), name = _param[0];
            return name === key;
        }).map(function(param) {
            var _param = _sliced_to_array._(param, 2), value = _param[1];
            return value;
        });
    };
    _proto.getParts = function getParts() {
        return this._parts.map(function(param) {
            var _param = _sliced_to_array._(param, 2), name = _param[0], value = _param[1];
            var contentDisposition = 'form-data; name="' + name + '"';
            var headers = {
                'content-disposition': contentDisposition
            };
            // The body part is a "blob", which in React Native just means
            // an object with a `uri` attribute. Optionally, it can also
            // have a `name` and `type` attribute to specify filename and
            // content type (cf. web Blob interface.)
            if ((typeof value === "undefined" ? "undefined" : _type_of._(value)) === 'object' && !Array.isArray(value) && value) {
                if (typeof value.name === 'string') {
                    headers['content-disposition'] += '; filename="' + value.name + "\"; filename*=utf-8''" + encodeURI(value.name);
                }
                if (typeof value.type === 'string') {
                    headers['content-type'] = value.type;
                }
                return _extends._({}, value, {
                    headers: headers,
                    fieldName: name
                });
            }
            // Convert non-object values to strings as per FormData.append() spec
            return {
                string: String(value),
                headers: headers,
                fieldName: name
            };
        });
    };
    return FormData;
}();
module.exports = FormData;


}),
66710: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var _listeners = [];
var _activeScene = {
    name: 'default'
};
var SceneTracker = {
    setActiveScene: function(scene) {
        _activeScene = scene;
        _listeners.forEach(function(listener) {
            return listener(_activeScene);
        });
    },
    getActiveScene: function() {
        return _activeScene;
    },
    addActiveSceneChangedListener: function(callback) {
        _listeners.push(callback);
        return {
            remove: function() {
                _listeners = _listeners.filter(function(listener) {
                    return callback !== listener;
                });
            }
        };
    }
};
module.exports = SceneTracker;


}),
68769: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _create_class = __webpack_require__(51302);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _to_consumable_array = __webpack_require__(8034);
var _type_of = __webpack_require__(29936);
__webpack_require__(74765);
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28987));
var BlobManager = __webpack_require__(89892);
var GlobalPerformanceLogger = __webpack_require__(22069);
var RCTNetworking = (__webpack_require__(77725)/* ["default"] */["default"]);
var base64 = __webpack_require__(18959);
var invariant = __webpack_require__(27761);
var DEBUG_NETWORK_SEND_DELAY = false; // Set to a number of milliseconds when debugging
// The native blob module is optional so inject it here if available.
if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
}
var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;
var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof __webpack_require__.g.ArrayBuffer === 'function',
    blob: typeof __webpack_require__.g.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
};
var REQUEST_EVENTS = [
    'abort',
    'error',
    'load',
    'loadstart',
    'progress',
    'timeout',
    'loadend'
];
var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');
var XMLHttpRequestEventTarget = /*#__PURE__*/ function(_EventTarget) {
    _inherits._(XMLHttpRequestEventTarget, _EventTarget);
    function XMLHttpRequestEventTarget() {
        return _EventTarget.apply(this, arguments) || this;
    }
    return XMLHttpRequestEventTarget;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(REQUEST_EVENTS)));
/**
 * Shared base for platform-specific XMLHttpRequest implementations.
 */ var XMLHttpRequest = /*#__PURE__*/ function(_EventTarget) {
    _inherits._(XMLHttpRequest, _EventTarget);
    function XMLHttpRequest() {
        var _this;
        _this = _EventTarget.call(this) || this, _this.UNSENT = UNSENT, _this.OPENED = OPENED, _this.HEADERS_RECEIVED = HEADERS_RECEIVED, _this.LOADING = LOADING, _this.DONE = DONE, _this.readyState = UNSENT, _this.status = 0, _this.timeout = 0, _this.withCredentials = true, _this.upload = new XMLHttpRequestEventTarget(), _this._aborted = false, _this._hasError = false, _this._method = null, _this._perfKey = null, _this._response = '', _this._url = null, _this._timedOut = false, _this._trackingName = 'unknown', _this._incrementalEvents = false, _this._performanceLogger = GlobalPerformanceLogger;
        _this._reset();
        return _this;
    }
    var _proto = XMLHttpRequest.prototype;
    _proto._reset = function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};
        this._clearSubscriptions();
        this._timedOut = false;
    };
    // exposed for testing
    _proto.__didCreateRequest = function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
    };
    // exposed for testing
    _proto.__didUploadProgress = function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
            this.upload.dispatchEvent({
                type: 'progress',
                lengthComputable: true,
                loaded: progress,
                total: total
            });
        }
    };
    _proto.__didReceiveResponse = function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
            this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);
            this.status = status;
            this.setResponseHeaders(responseHeaders);
            this.setReadyState(this.HEADERS_RECEIVED);
            if (responseURL || responseURL === '') {
                this.responseURL = responseURL;
            } else {
                delete this.responseURL;
            }
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
    };
    _proto.__didReceiveData = function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
            return;
        }
        this._response = response;
        this._cachedResponse = undefined; // force lazy recomputation
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
    };
    _proto.__didReceiveIncrementalData = function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
            return;
        }
        if (!this._response) {
            this._response = responseText;
        } else {
            this._response += responseText;
        }
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);
        this.__didReceiveDataProgress(requestId, progress, total);
    };
    _proto.__didReceiveDataProgress = function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
            return;
        }
        this.dispatchEvent({
            type: 'progress',
            lengthComputable: total >= 0,
            loaded: loaded,
            total: total
        });
    };
    // exposed for testing
    _proto.__didCompleteResponse = function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
            if (error) {
                if (this._responseType === '' || this._responseType === 'text') {
                    this._response = error;
                }
                this._hasError = true;
                if (timeOutError) {
                    this._timedOut = true;
                }
            }
            this._clearSubscriptions();
            this._requestId = null;
            this.setReadyState(this.DONE);
            if (error) {
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
            } else {
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
            }
        }
    };
    _proto._clearSubscriptions = function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function(sub) {
            if (sub) {
                sub.remove();
            }
        });
        this._subscriptions = [];
    };
    _proto.getAllResponseHeaders = function getAllResponseHeaders() {
        if (!this.responseHeaders) {
            // according to the spec, return null if no response has been received
            return null;
        }
        // Assign to non-nullable local variable.
        var responseHeaders = this.responseHeaders;
        var unsortedHeaders = new Map();
        for(var _i = 0, _Object_keys = Object.keys(responseHeaders); _i < _Object_keys.length; _i++){
            var rawHeaderName = _Object_keys[_i];
            var headerValue = responseHeaders[rawHeaderName];
            var lowerHeaderName = rawHeaderName.toLowerCase();
            var header = unsortedHeaders.get(lowerHeaderName);
            if (header) {
                header.headerValue += ', ' + headerValue;
                unsortedHeaders.set(lowerHeaderName, header);
            } else {
                unsortedHeaders.set(lowerHeaderName, {
                    lowerHeaderName: lowerHeaderName,
                    upperHeaderName: rawHeaderName.toUpperCase(),
                    headerValue: headerValue
                });
            }
        }
        // Sort in ascending order, with a being less than b if a's name is legacy-uppercased-byte less than b's name.
        var sortedHeaders = _to_consumable_array._(unsortedHeaders.values()).sort(function(a, b) {
            if (a.upperHeaderName < b.upperHeaderName) {
                return -1;
            }
            if (a.upperHeaderName > b.upperHeaderName) {
                return 1;
            }
            return 0;
        });
        // Combine into single text response.
        return sortedHeaders.map(function(header) {
            return header.lowerHeaderName + ': ' + header.headerValue;
        }).join('\r\n') + '\r\n';
    };
    _proto.getResponseHeader = function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
        return value !== undefined ? value : null;
    };
    _proto.setRequestHeader = function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
            throw new Error('Request has not been opened');
        }
        this._headers[header.toLowerCase()] = String(value);
    };
    /**
   * Custom extension for tracking origins of request.
   */ _proto.setTrackingName = function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
    };
    /**
   * Custom extension for setting a custom performance logger
   */ _proto.setPerformanceLogger = function setPerformanceLogger(performanceLogger) {
        this._performanceLogger = performanceLogger;
        return this;
    };
    _proto.open = function open(method, url, async) {
        /* Other optional arguments are not supported yet */ if (this.readyState !== this.UNSENT) {
            throw new Error('Cannot open, already sending');
        }
        if (async !== undefined && !async) {
            // async is default
            throw new Error('Synchronous http requests are not supported');
        }
        if (!url) {
            throw new Error('Cannot load an empty url');
        }
        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
    };
    _proto.send = function send(data) {
        var _this = this;
        if (this.readyState !== this.OPENED) {
            throw new Error('Request has not been opened');
        }
        if (this._sent) {
            throw new Error('Request has already been sent');
        }
        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;
        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function(args) {
            return _this.__didUploadProgress.apply(_this, _to_consumable_array._(args));
        }));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function(args) {
            return _this.__didReceiveResponse.apply(_this, _to_consumable_array._(args));
        }));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function(args) {
            return _this.__didReceiveData.apply(_this, _to_consumable_array._(args));
        }));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function(args) {
            return _this.__didReceiveIncrementalData.apply(_this, _to_consumable_array._(args));
        }));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function(args) {
            return _this.__didReceiveDataProgress.apply(_this, _to_consumable_array._(args));
        }));
        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function(args) {
            return _this.__didCompleteResponse.apply(_this, _to_consumable_array._(args));
        }));
        var nativeResponseType = 'text';
        if (this._responseType === 'arraybuffer') {
            nativeResponseType = 'base64';
        }
        if (this._responseType === 'blob') {
            nativeResponseType = 'blob';
        }
        var doSend = function() {
            var friendlyName = _this._trackingName !== 'unknown' ? _this._trackingName : _this._url;
            _this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);
            _this._performanceLogger.startTimespan(_this._perfKey);
            invariant(_this._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);
            invariant(_this._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);
            RCTNetworking.sendRequest(_this._method, _this._trackingName, _this._url, _this._headers, data, /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
         * when making Flow check .android.js files. */ nativeResponseType, incrementalEvents, _this.timeout, // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            _this.__didCreateRequest.bind(_this), _this.withCredentials);
        };
        if (DEBUG_NETWORK_SEND_DELAY) {
            setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);
        } else {
            doSend();
        }
    };
    _proto.abort = function abort() {
        this._aborted = true;
        if (this._requestId) {
            RCTNetworking.abortRequest(this._requestId);
        }
        // only call onreadystatechange if there is something to abort,
        // below logic is per spec
        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
            this._reset();
            this.setReadyState(this.DONE);
        }
        // Reset again after, in case modified in handler
        this._reset();
    };
    _proto.setResponseHeaders = function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function(lcaseHeaders, headerName) {
            // $FlowFixMe[invalid-computed-prop]
            lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
            return lcaseHeaders;
        }, {});
    };
    _proto.setReadyState = function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
            type: 'readystatechange'
        });
        if (newState === this.DONE) {
            if (this._aborted) {
                this.dispatchEvent({
                    type: 'abort'
                });
            } else if (this._hasError) {
                if (this._timedOut) {
                    this.dispatchEvent({
                        type: 'timeout'
                    });
                } else {
                    this.dispatchEvent({
                        type: 'error'
                    });
                }
            } else {
                this.dispatchEvent({
                    type: 'load'
                });
            }
            this.dispatchEvent({
                type: 'loadend'
            });
        }
    };
    /* global EventListener */ _proto.addEventListener = function addEventListener(type, listener) {
        // If we dont' have a 'readystatechange' event handler, we don't
        // have to send repeated LOADING events with incremental updates
        // to responseText, which will avoid a bunch of native -> JS
        // bridge traffic.
        if (type === 'readystatechange' || type === 'progress') {
            this._incrementalEvents = true;
        }
        _EventTarget.prototype.addEventListener.call(this, type, listener);
    };
    XMLHttpRequest.setInterceptor = function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
    };
    _create_class._(XMLHttpRequest, [
        {
            key: "responseType",
            get: function get() {
                return this._responseType;
            },
            set: function set(responseType) {
                if (this._sent) {
                    throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The " + 'response type cannot be set after the request has been sent.');
                }
                if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
                    console.warn("The provided value '" + responseType + "' is not a valid 'responseType'.");
                    return;
                }
                // redboxes early, e.g. for 'arraybuffer' on ios 7
                invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");
                if (responseType === 'blob') {
                    invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
                }
                this._responseType = responseType;
            }
        },
        {
            key: "responseText",
            get: function get() {
                if (this._responseType !== '' && this._responseType !== 'text') {
                    throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
                }
                if (this.readyState < LOADING) {
                    return '';
                }
                return this._response;
            }
        },
        {
            key: "response",
            get: function get() {
                var responseType = this.responseType;
                if (responseType === '' || responseType === 'text') {
                    return this.readyState < LOADING || this._hasError ? '' : this._response;
                }
                if (this.readyState !== DONE) {
                    return null;
                }
                if (this._cachedResponse !== undefined) {
                    return this._cachedResponse;
                }
                switch(responseType){
                    case 'document':
                        this._cachedResponse = null;
                        break;
                    case 'arraybuffer':
                        this._cachedResponse = base64.toByteArray(this._response).buffer;
                        break;
                    case 'blob':
                        if (_type_of._(this._response) === 'object' && this._response) {
                            this._cachedResponse = BlobManager.createFromOptions(this._response);
                        } else if (this._response === '') {
                            this._cachedResponse = BlobManager.createFromParts([]);
                        } else {
                            throw new Error('Invalid response for blob - expecting object, was ' + (_type_of._(this._response) + ": " + this._response.trim()));
                        }
                        break;
                    case 'json':
                        try {
                            this._cachedResponse = JSON.parse(this._response);
                        } catch (_) {
                            this._cachedResponse = null;
                        }
                        break;
                    default:
                        this._cachedResponse = null;
                }
                return this._cachedResponse;
            }
        }
    ]);
    return XMLHttpRequest;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(XHR_EVENTS)));
XMLHttpRequest.UNSENT = UNSENT;
XMLHttpRequest.OPENED = OPENED;
XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
XMLHttpRequest.LOADING = LOADING;
XMLHttpRequest.DONE = DONE;
XMLHttpRequest._interceptor = null;
module.exports = XMLHttpRequest;


}),
69594: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return HeadlessJsTaskError;
    }
}));
var _inherits = __webpack_require__(85428);
var _wrap_native_super = __webpack_require__(67381);
var HeadlessJsTaskError = /*#__PURE__*/ function(Error1) {
    "use strict";
    _inherits._(HeadlessJsTaskError, Error1);
    function HeadlessJsTaskError() {
        return Error1.apply(this, arguments) || this;
    }
    return HeadlessJsTaskError;
}(_wrap_native_super._(Error));


}),
73532: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var base64 = __webpack_require__(18959);
function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
        // $FlowFixMe[reassign-const]
        data = new Uint8Array(data);
    }
    if (data instanceof Uint8Array) {
        return base64.fromByteArray(data);
    }
    if (!ArrayBuffer.isView(data)) {
        throw new Error('data must be ArrayBuffer or typed array');
    }
    // Already checked that `data` is `DataView` in `ArrayBuffer.isView(data)`
    var buffer = data.buffer, byteOffset = data.byteOffset, byteLength = data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
}
module.exports = binaryToBase64;


}),
75605: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return renderApplication;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22069));
var _PerformanceLoggerContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53750));
var _AppContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26167));
var _DisplayMode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53982));
var _getCachedComponentWithDebugName = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4980));
var _RendererProxy = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(14288));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
__webpack_require__(10425);
function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, rootViewStyle, fabric, scopedPerformanceLogger, isLogBox, debugName, displayMode, useConcurrentRoot, useOffscreen) {
    (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var performanceLogger = scopedPerformanceLogger != null ? scopedPerformanceLogger : _GlobalPerformanceLogger.default;
    var renderable = /*#__PURE__*/ _react.createElement(_PerformanceLoggerContext.default.Provider, {
        value: performanceLogger
    }, /*#__PURE__*/ _react.createElement(_AppContainer.default, {
        rootTag: rootTag,
        fabric: fabric,
        WrapperComponent: WrapperComponent,
        rootViewStyle: rootViewStyle,
        initialProps: initialProps != null ? initialProps : Object.freeze({}),
        internal_excludeLogBox: isLogBox
    }, /*#__PURE__*/ _react.createElement(RootComponent, _extends._({}, initialProps, {
        rootTag: rootTag
    }))));
    if (false) { var RootComponentWithMeaningfulName }
    if (useOffscreen && displayMode != null) {
        // $FlowFixMe[incompatible-type]
        // $FlowFixMe[prop-missing]
        var Activity = _react.unstable_Activity;
        renderable = /*#__PURE__*/ _react.createElement(Activity, {
            mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden'
        }, renderable);
    }
    // We want to have concurrentRoot always enabled when you're on Fabric.
    var useConcurrentRootOverride = fabric;
    performanceLogger.startTimespan('renderApplication_React_render');
    performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRootOverride ? '1' : '0');
    performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
    performanceLogger.setExtra('usedReactProfiler', _RendererProxy.isProfilingRenderer());
    _RendererProxy.renderElement({
        element: renderable,
        rootTag: rootTag,
        useFabric: Boolean(fabric),
        useConcurrentRoot: Boolean(useConcurrentRootOverride)
    });
    performanceLogger.stopTimespan('renderApplication_React_render');
}


}),
76104: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _RootTag = __webpack_require__(28360);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var AppContainer = function(param) {
    var children = param.children, fabric = param.fabric, initialProps = param.initialProps, rootTag = param.rootTag, WrapperComponent = param.WrapperComponent, rootViewStyle = param.rootViewStyle;
    var innerView = children;
    if (WrapperComponent != null) {
        innerView = /*#__PURE__*/ _react.createElement(WrapperComponent, {
            initialProps: initialProps,
            fabric: fabric === true
        }, innerView);
    }
    return /*#__PURE__*/ _react.createElement(_RootTag.RootTagContext.Provider, {
        value: (0, _RootTag.createRootTag)(rootTag)
    }, /*#__PURE__*/ _react.createElement(_View.default, {
        style: rootViewStyle || styles.root,
        pointerEvents: "box-none"
    }, innerView));
};
var styles = _StyleSheet.default.create({
    root: {
        flex: 1
    }
});
var _default = AppContainer;


}),
77725: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70973));
__webpack_require__(74765);
var _convertRequestBody = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99732));
var _NativeNetworkingIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92236));
__webpack_require__(68769);
var RCTNetworking = {
    addListener: function(eventType, listener, context) {
        // $FlowFixMe[incompatible-call]
        return _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
    },
    sendRequest: function(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = (0, _convertRequestBody.default)(data);
        _NativeNetworkingIOS.default.sendRequest({
            method: method,
            url: url,
            data: _extends._({}, body, {
                trackingName: trackingName
            }),
            headers: headers,
            responseType: responseType,
            incrementalUpdates: incrementalUpdates,
            timeout: timeout,
            withCredentials: withCredentials
        }, callback);
    },
    abortRequest: function(requestId) {
        _NativeNetworkingIOS.default.abortRequest(requestId);
    },
    clearCookies: function(callback) {
        _NativeNetworkingIOS.default.clearCookies(callback);
    }
};
var _default = RCTNetworking;


}),
78670: (function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ var registry = new Map();
var register = function(id) {
    var used = registry.get(id);
    if (used != null) {
        registry.set(id, used + 1);
    } else {
        registry.set(id, 1);
    }
};
var unregister = function(id) {
    var used = registry.get(id);
    if (used != null) {
        if (used <= 1) {
            registry["delete"](id);
        } else {
            registry.set(id, used - 1);
        }
    }
};
var has = function(id) {
    return registry.get(id) || false;
};
module.exports = {
    register: register,
    unregister: unregister,
    has: has
};


}),
79720: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _sliced_to_array = __webpack_require__(21193);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70973));
var _NativeRedBox = /*#__PURE__*/ _interop_require_default._(__webpack_require__(30176));
__webpack_require__(74765);
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51686));
function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function() {
        return __webpack_require__(81852)();
    });
}
/**
 * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report
 * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows
 * that are currently visible on screen. Components should also remember to call `remove()` on the object that is
 * returned by `addSource` when they are unmounted.
 */ var BugReporting = /*#__PURE__*/ function() {
    "use strict";
    function BugReporting() {}
    BugReporting._maybeInit = function _maybeInit() {
        if (!BugReporting._subscription) {
            BugReporting._subscription = _RCTDeviceEventEmitter.default.addListener('collectBugExtraData', // $FlowFixMe[method-unbinding]
            BugReporting.collectExtraData, null);
            defaultExtras();
        }
        if (!BugReporting._redboxSubscription) {
            BugReporting._redboxSubscription = _RCTDeviceEventEmitter.default.addListener('collectRedBoxExtraData', // $FlowFixMe[method-unbinding]
            BugReporting.collectExtraData, null);
        }
    };
    /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ BugReporting.addSource = function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
    };
    /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ BugReporting.addFileSource = function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
    };
    BugReporting._addSource = function _addSource(key, callback, source) {
        BugReporting._maybeInit();
        if (source.has(key)) {
            console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }
        source.set(key, callback);
        return {
            remove: function() {
                source["delete"](key);
            }
        };
    };
    /**
   * This can be called from a native bug reporting flow, or from JS code.
   *
   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`
   * after collecting `extraData`.
   */ BugReporting.collectExtraData = function collectExtraData() {
        var extraData = {};
        for(var _i = 0, _BugReporting__extraSources = BugReporting._extraSources; _i < _BugReporting__extraSources.length; _i++){
            var _BugReporting__extraSources__i = _sliced_to_array._(_BugReporting__extraSources[_i], 2), key = _BugReporting__extraSources__i[0], callback = _BugReporting__extraSources__i[1];
            extraData[key] = callback();
        }
        var fileData = {};
        for(var _i1 = 0, _BugReporting__fileSources = BugReporting._fileSources; _i1 < _BugReporting__fileSources.length; _i1++){
            var _BugReporting__fileSources__i = _sliced_to_array._(_BugReporting__fileSources[_i1], 2), key1 = _BugReporting__fileSources__i[0], callback1 = _BugReporting__fileSources__i[1];
            fileData[key1] = callback1();
        }
        if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
            _NativeBugReporting.default.setExtraData(extraData, fileData);
        }
        if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
            _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
        }
        return {
            extras: extraData,
            files: fileData
        };
    };
    return BugReporting;
}();
BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;
BugReporting._redboxSubscription = null;
module.exports = BugReporting;


}),
81852: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/*
const getReactData = require('getReactData');

const INDENTATION_SIZE = 2;
const MAX_DEPTH = 2;
const MAX_STRING_LENGTH = 50;
*/ /**
 * Dump all React Native root views and their content. This function tries
 * it best to get the content but ultimately relies on implementation details
 * of React and will fail in future versions.
 */ function dumpReactTree() {
    try {
        return getReactTree();
    } catch (e) {
        return 'Failed to dump react tree: ' + e;
    }
}
function getReactTree() {
    // TODO(sema): Reenable tree dumps using the Fiber tree structure. #15945684
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
/*
  let output = '';
  const rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);
  for (const rootId of rootIds) {
    const instance = ReactNativeMount._instancesByContainerID[rootId];
    output += `============ Root ID: ${rootId} ============\n`;
    output += dumpNode(instance, 0);
    output += `============ End root ID: ${rootId} ============\n`;
  }
  return output;
*/ }
/*
function dumpNode(node: Object, indentation: number) {
  const data = getReactData(node);
  if (data.nodeType === 'Text') {
    return indent(indentation) + data.text + '\n';
  } else if (data.nodeType === 'Empty') {
    return '';
  }
  let output = indent(indentation) + `<${data.name}`;
  if (data.nodeType === 'Composite') {
    for (const propName of Object.getOwnPropertyNames(data.props || {})) {
      if (isNormalProp(propName)) {
        try {
          const value = convertValue(data.props[propName]);
          if (value) {
            output += ` ${propName}=${value}`;
          }
        } catch (e) {
          const message = `[Failed to get property: ${e}]`;
          output += ` ${propName}=${message}`;
        }
      }
    }
  }
  let childOutput = '';
  for (const child of data.children || []) {
    childOutput += dumpNode(child, indentation + 1);
  }

  if (childOutput) {
    output += '>\n' + childOutput + indent(indentation) + `</${data.name}>\n`;
  } else {
    output += ' />\n';
  }

  return output;
}

function isNormalProp(name: string): boolean {
  switch (name) {
    case 'children':
    case 'key':
    case 'ref':
      return false;
    default:
      return true;
  }
}

function convertObject(object: Object, depth: number) {
  if (depth >= MAX_DEPTH) {
    return '[...omitted]';
  }
  let output = '{';
  let first = true;
  for (const key of Object.getOwnPropertyNames(object)) {
    if (!first) {
      output += ', ';
    }
    output += `${key}: ${convertValue(object[key], depth + 1)}`;
    first = false;
  }
  return output + '}';
}

function convertValue(value, depth = 0): ?string {
  if (!value) {
    return null;
  }

  switch (typeof value) {
    case 'string':
      return JSON.stringify(possiblyEllipsis(value).replace('\n', '\\n'));
    case 'boolean':
    case 'number':
      return JSON.stringify(value);
    case 'function':
      return '[function]';
    case 'object':
      return convertObject(value, depth);
    default:
      return null;
  }
}

function possiblyEllipsis(value: string) {
  if (value.length > MAX_STRING_LENGTH) {
    return value.slice(0, MAX_STRING_LENGTH) + '...';
  } else {
    return value;
  }
}

function indent(size: number) {
  return ' '.repeat(size * INDENTATION_SIZE);
}
*/ module.exports = dumpReactTree;


}),
8198: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85511));
var _ViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95606));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * The most fundamental component for building a UI, View is a container that
 * supports layout with flexbox, style, some touch handling, and accessibility
 * controls.
 *
 * @see https://reactnative.dev/docs/view
 */ var View = /*#__PURE__*/ _react.forwardRef(function(_param, forwardedRef) {
    var accessibilityElementsHidden = _param.accessibilityElementsHidden, accessibilityLabel = _param.accessibilityLabel, accessibilityLabelledBy = _param.accessibilityLabelledBy, accessibilityLiveRegion = _param.accessibilityLiveRegion, accessibilityState = _param.accessibilityState, accessibilityValue = _param.accessibilityValue, ariaBusy = _param['aria-busy'], ariaChecked = _param['aria-checked'], ariaDisabled = _param['aria-disabled'], ariaExpanded = _param['aria-expanded'], ariaHidden = _param['aria-hidden'], ariaLabel = _param['aria-label'], ariaLabelledBy = _param['aria-labelledby'], ariaLive = _param['aria-live'], ariaSelected = _param['aria-selected'], ariaValueMax = _param['aria-valuemax'], ariaValueMin = _param['aria-valuemin'], ariaValueNow = _param['aria-valuenow'], ariaValueText = _param['aria-valuetext'], focusable = _param.focusable, id = _param.id, importantForAccessibility = _param.importantForAccessibility, nativeID = _param.nativeID, tabIndex = _param.tabIndex, otherProps = _object_without_properties_loose._(_param, [
        "accessibilityElementsHidden",
        "accessibilityLabel",
        "accessibilityLabelledBy",
        "accessibilityLiveRegion",
        "accessibilityState",
        "accessibilityValue",
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-hidden',
        'aria-label',
        'aria-labelledby',
        'aria-live',
        'aria-selected',
        'aria-valuemax',
        'aria-valuemin',
        'aria-valuenow',
        'aria-valuetext',
        "focusable",
        "id",
        "importantForAccessibility",
        "nativeID",
        "tabIndex"
    ]);
    var hasTextAncestor = _react.useContext(_TextAncestor.default);
    var _ariaLabelledBy_split;
    var _accessibilityLabelledBy = (_ariaLabelledBy_split = ariaLabelledBy == null ? void 0 : ariaLabelledBy.split(/\s*,\s*/g)) != null ? _ariaLabelledBy_split : accessibilityLabelledBy;
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
        _accessibilityState = {
            busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
            checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
            disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
            expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
            selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
        };
    }
    var _accessibilityValue;
    if (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) {
        _accessibilityValue = {
            max: ariaValueMax != null ? ariaValueMax : accessibilityValue == null ? void 0 : accessibilityValue.max,
            min: ariaValueMin != null ? ariaValueMin : accessibilityValue == null ? void 0 : accessibilityValue.min,
            now: ariaValueNow != null ? ariaValueNow : accessibilityValue == null ? void 0 : accessibilityValue.now,
            text: ariaValueText != null ? ariaValueText : accessibilityValue == null ? void 0 : accessibilityValue.text
        };
    }
    var actualView = /*#__PURE__*/ _react.createElement(_ViewNativeComponent.default, _extends._({}, otherProps, {
        accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive != null ? ariaLive : accessibilityLiveRegion,
        accessibilityLabel: ariaLabel != null ? ariaLabel : accessibilityLabel,
        focusable: tabIndex !== undefined ? !tabIndex : focusable,
        accessibilityState: _accessibilityState,
        accessibilityElementsHidden: ariaHidden != null ? ariaHidden : accessibilityElementsHidden,
        accessibilityLabelledBy: _accessibilityLabelledBy,
        accessibilityValue: _accessibilityValue,
        importantForAccessibility: ariaHidden === true ? 'no-hide-descendants' : importantForAccessibility,
        nativeID: id != null ? id : nativeID,
        ref: forwardedRef
    }));
    if (hasTextAncestor) {
        return /*#__PURE__*/ _react.createElement(_TextAncestor.default.Provider, {
            value: false
        }, actualView);
    }
    return actualView;
});
View.displayName = 'View';
module.exports = View;


}),
83672: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get // Re-exporting for backwards compatibility with all the clients that
    // may still import it from this module.
    /**
 * This function creates performance loggers that can be used to collect and log
 * various performance data such as timespans, points and extras.
 * The loggers need to have minimal overhead since they're used in production.
 */ default () {
        return createPerformanceLogger;
    },
    get getCurrentTimestamp () {
        return getCurrentTimestamp;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _infoLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51515));
var PRINT_TO_CONSOLE = false; // Type as false to prevent accidentally committing `true`;
var _global_nativeQPLTimestamp;
var getCurrentTimestamp = (_global_nativeQPLTimestamp = __webpack_require__.g.nativeQPLTimestamp) != null ? _global_nativeQPLTimestamp : function() {
    return __webpack_require__.g.performance.now();
};
var PerformanceLogger = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceLogger() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
        this._pointExtras = {};
        this._closed = false;
    }
    var _proto = PerformanceLogger.prototype;
    _proto.addTimespan = function addTimespan(key, startTime, endTime, startExtras, endExtras) {
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (this._timespans[key]) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        this._timespans[key] = {
            startTime: startTime,
            endTime: endTime,
            totalTime: endTime - (startTime || 0),
            startExtras: startExtras,
            endExtras: endExtras
        };
    };
    _proto.append = function append(performanceLogger) {
        this._timespans = _extends._({}, performanceLogger.getTimespans(), this._timespans);
        this._extras = _extends._({}, performanceLogger.getExtras(), this._extras);
        this._points = _extends._({}, performanceLogger.getPoints(), this._points);
        this._pointExtras = _extends._({}, performanceLogger.getPointExtras(), this._pointExtras);
    };
    _proto.clear = function clear() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
        if (PRINT_TO_CONSOLE) {
            (0, _infoLog.default)('PerformanceLogger.js', 'clear');
        }
    };
    _proto.clearCompleted = function clearCompleted() {
        for(var key in this._timespans){
            var _this__timespans_key;
            if (((_this__timespans_key = this._timespans[key]) == null ? void 0 : _this__timespans_key.totalTime) != null) {
                delete this._timespans[key];
            }
        }
        this._extras = {};
        this._points = {};
        if (PRINT_TO_CONSOLE) {
            (0, _infoLog.default)('PerformanceLogger.js', 'clearCompleted');
        }
    };
    _proto.close = function close() {
        this._closed = true;
    };
    _proto.currentTimestamp = function currentTimestamp() {
        return getCurrentTimestamp();
    };
    _proto.getExtras = function getExtras() {
        return this._extras;
    };
    _proto.getPoints = function getPoints() {
        return this._points;
    };
    _proto.getPointExtras = function getPointExtras() {
        return this._pointExtras;
    };
    _proto.getTimespans = function getTimespans() {
        return this._timespans;
    };
    _proto.hasTimespan = function hasTimespan(key) {
        return !!this._timespans[key];
    };
    _proto.isClosed = function isClosed() {
        return this._closed;
    };
    _proto.logEverything = function logEverything() {
        if (PRINT_TO_CONSOLE) {
            // log timespans
            for(var key in this._timespans){
                var _this__timespans_key;
                if (((_this__timespans_key = this._timespans[key]) == null ? void 0 : _this__timespans_key.totalTime) != null) {
                    (0, _infoLog.default)(key + ': ' + this._timespans[key].totalTime + 'ms');
                }
            }
            // log extras
            (0, _infoLog.default)(this._extras);
            // log points
            for(var key1 in this._points){
                if (this._points[key1] != null) {
                    (0, _infoLog.default)(key1 + ': ' + this._points[key1] + 'ms');
                }
            }
        }
    };
    _proto.markPoint = function markPoint(key, timestamp, extras) {
        if (timestamp === void 0) timestamp = getCurrentTimestamp();
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (this._points[key] != null) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        this._points[key] = timestamp;
        if (extras) {
            this._pointExtras[key] = extras;
        }
    };
    _proto.removeExtra = function removeExtra(key) {
        var value = this._extras[key];
        delete this._extras[key];
        return value;
    };
    _proto.setExtra = function setExtra(key, value) {
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (this._extras.hasOwnProperty(key)) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        this._extras[key] = value;
    };
    _proto.startTimespan = function startTimespan(key, timestamp, extras) {
        if (timestamp === void 0) timestamp = getCurrentTimestamp();
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (this._timespans[key]) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        this._timespans[key] = {
            startTime: timestamp,
            startExtras: extras
        };
        if (PRINT_TO_CONSOLE) {
            (0, _infoLog.default)('PerformanceLogger.js', 'start: ' + key);
        }
    };
    _proto.stopTimespan = function stopTimespan(key, timestamp, extras) {
        if (timestamp === void 0) timestamp = getCurrentTimestamp();
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        var timespan = this._timespans[key];
        if (!timespan || timespan.startTime == null) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (timespan.endTime != null) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        timespan.endExtras = extras;
        timespan.endTime = timestamp;
        timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
        if (PRINT_TO_CONSOLE) {
            (0, _infoLog.default)('PerformanceLogger.js', 'end: ' + key);
        }
    };
    return PerformanceLogger;
}();
function createPerformanceLogger() {
    return new PerformanceLogger();
}


}),
85511: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var React = __webpack_require__(41845);
/**
 * Whether the current element is the descendant of a <Text> element.
 */ var TextAncestorContext = React.createContext(false);
if (false) {}
module.exports = TextAncestorContext;


}),
87350: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * Common implementation for a simple stubbed view. Simply applies the view's styles to the inner
 * View component and renders its children.
 */ var UnimplementedView = /*#__PURE__*/ function(_React_Component) {
    _inherits._(UnimplementedView, _React_Component);
    function UnimplementedView() {
        return _React_Component.apply(this, arguments) || this;
    }
    var _proto = UnimplementedView.prototype;
    _proto.render = function render() {
        // Workaround require cycle from requireNativeComponent
        var View = __webpack_require__(8198);
        return /*#__PURE__*/ _react.createElement(View, {
            style: [
                styles.unimplementedView,
                this.props.style
            ]
        }, this.props.children);
    };
    return UnimplementedView;
}(_react.Component);
var styles = _StyleSheet.default.create({
    unimplementedView:  false ? 0 : {}
});
module.exports = UnimplementedView;


}),
88829: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _create_class = __webpack_require__(51302);
/**
 * Opaque JS representation of some binary data in native.
 *
 * The API is modeled after the W3C Blob API, with one caveat
 * regarding explicit deallocation. Refer to the `close()`
 * method for further details.
 *
 * Example usage in a React component:
 *
 *   class WebSocketImage extends React.Component {
 *      state = {blob: null};
 *      componentDidMount() {
 *        let ws = this.ws = new WebSocket(...);
 *        ws.binaryType = 'blob';
 *        ws.onmessage = (event) => {
 *          if (this.state.blob) {
 *            this.state.blob.close();
 *          }
 *          this.setState({blob: event.data});
 *        };
 *      }
 *      componentUnmount() {
 *        if (this.state.blob) {
 *          this.state.blob.close();
 *        }
 *        this.ws.close();
 *      }
 *      render() {
 *        if (!this.state.blob) {
 *          return <View />;
 *        }
 *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;
 *      }
 *   }
 *
 * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob
 */ var Blob = /*#__PURE__*/ function() {
    function Blob(parts, options) {
        if (parts === void 0) parts = [];
        var BlobManager = __webpack_require__(89892);
        this.data = BlobManager.createFromParts(parts, options).data;
    }
    var _proto = Blob.prototype;
    _proto.slice = function slice(start, end, contentType) {
        if (contentType === void 0) contentType = '';
        var BlobManager = __webpack_require__(89892);
        var _this_data = this.data, offset = _this_data.offset, size = _this_data.size;
        if (typeof start === 'number') {
            if (start > size) {
                // $FlowFixMe[reassign-const]
                start = size;
            }
            offset += start;
            size -= start;
            if (typeof end === 'number') {
                if (end < 0) {
                    // $FlowFixMe[reassign-const]
                    end = this.size + end;
                }
                if (end > this.size) {
                    // $FlowFixMe[reassign-const]
                    end = this.size;
                }
                size = end - start;
            }
        }
        return BlobManager.createFromOptions({
            blobId: this.data.blobId,
            offset: offset,
            size: size,
            type: contentType,
            /* Since `blob.slice()` creates a new view onto the same binary
       * data as the original blob, we should re-use the same collector
       * object so that the underlying resource gets deallocated when
       * the last view into the data is released, not the first.
       */ __collector: this.data.__collector
        });
    };
    /**
   * This method is in the standard, but not actually implemented by
   * any browsers at this point. It's important for how Blobs work in
   * React Native, however, since we cannot de-allocate resources automatically,
   * so consumers need to explicitly de-allocate them.
   *
   * Note that the semantics around Blobs created via `blob.slice()`
   * and `new Blob([blob])` are different. `blob.slice()` creates a
   * new *view* onto the same binary data, so calling `close()` on any
   * of those views is enough to deallocate the data, whereas
   * `new Blob([blob, ...])` actually copies the data in memory.
   */ _proto.close = function close() {
        var BlobManager = __webpack_require__(89892);
        BlobManager.release(this.data.blobId);
        this.data = null;
    };
    _create_class._(Blob, [
        {
            key: "data",
            get: // $FlowFixMe[unsafe-getters-setters]
            function get() {
                if (!this._data) {
                    throw new Error('Blob has been closed and is no longer available');
                }
                return this._data;
            },
            set: /*
   * This method is used to create a new Blob object containing
   * the data in the specified range of bytes of the source Blob.
   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice
   */ // $FlowFixMe[unsafe-getters-setters]
            function set(data) {
                this._data = data;
            }
        },
        {
            key: "size",
            get: /**
   * Size of the data contained in the Blob object, in bytes.
   */ // $FlowFixMe[unsafe-getters-setters]
            function get() {
                return this.data.size;
            }
        },
        {
            key: "type",
            get: /*
   * String indicating the MIME type of the data contained in the Blob.
   * If the type is unknown, this string is empty.
   */ // $FlowFixMe[unsafe-getters-setters]
            function get() {
                return this.data.type || '';
            }
        }
    ]);
    return Blob;
}();
module.exports = Blob;


}),
89819: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('AlertManager');


}),
89892: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(50270));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var Blob = __webpack_require__(88829);
var BlobRegistry = __webpack_require__(78670);
/*eslint-disable no-bitwise */ /*eslint-disable eqeqeq */ /**
 * Based on the rfc4122-compliant solution posted at
 * http://stackoverflow.com/questions/105034
 */ function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
}
// **Temporary workaround**
// TODO(#24654): Use turbomodules for the Blob module.
// Blob collector is a jsi::HostObject that is used by native to know
// when the a Blob instance is deallocated. This allows to free the
// underlying native resources. This is a hack to workaround the fact
// that the current bridge infra doesn't allow to track js objects
// deallocation. Ideally the whole Blob object should be a jsi::HostObject.
function createBlobCollector(blobId) {
    if (__webpack_require__.g.__blobCollectorProvider == null) {
        return null;
    } else {
        return __webpack_require__.g.__blobCollectorProvider(blobId);
    }
}
/**
 * Module to manage blobs. Wrapper around the native blob module.
 */ var BlobManager = /*#__PURE__*/ function() {
    "use strict";
    function BlobManager() {}
    /**
   * Create blob from existing array of blobs.
   */ BlobManager.createFromParts = function createFromParts(parts, options) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        var blobId = uuidv4();
        var items = parts.map(function(part) {
            if (part instanceof ArrayBuffer || ArrayBuffer.isView(part)) {
                throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
            }
            if (part instanceof Blob) {
                return {
                    data: part.data,
                    type: 'blob'
                };
            } else {
                return {
                    data: String(part),
                    type: 'string'
                };
            }
        });
        var size = items.reduce(function(acc, curr) {
            if (curr.type === 'string') {
                return acc + __webpack_require__.g.unescape(encodeURI(curr.data)).length;
            } else {
                return acc + curr.data.size;
            }
        }, 0);
        _NativeBlobModule.default.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
            blobId: blobId,
            offset: 0,
            size: size,
            type: options ? options.type : '',
            lastModified: options ? options.lastModified : Date.now()
        });
    };
    /**
   * Create blob instance from blob data from native.
   * Used internally by modules like XHR, WebSocket, etc.
   */ BlobManager.createFromOptions = function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        // $FlowFixMe[prop-missing]
        return Object.assign(Object.create(Blob.prototype), {
            data: // Reuse the collector instance when creating from an existing blob.
            // This will make sure that the underlying resource is only deallocated
            // when all blobs that refer to it are deallocated.
            options.__collector == null ? _extends._({}, options, {
                __collector: createBlobCollector(options.blobId)
            }) : options
        });
    };
    /**
   * Deallocate resources for a blob.
   */ BlobManager.release = function release(blobId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        BlobRegistry.unregister(blobId);
        if (BlobRegistry.has(blobId)) {
            return;
        }
        _NativeBlobModule.default.release(blobId);
    };
    /**
   * Inject the blob content handler in the networking module to support blob
   * requests and responses.
   */ BlobManager.addNetworkingHandler = function addNetworkingHandler() {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addNetworkingHandler();
    };
    /**
   * Indicate the websocket should return a blob for incoming binary
   * messages.
   */ BlobManager.addWebSocketHandler = function addWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addWebSocketHandler(socketId);
    };
    /**
   * Indicate the websocket should no longer return a blob for incoming
   * binary messages.
   */ BlobManager.removeWebSocketHandler = function removeWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.removeWebSocketHandler(socketId);
    };
    /**
   * Send a blob message to a websocket.
   */ BlobManager.sendOverSocket = function sendOverSocket(blob, socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
    };
    return BlobManager;
}();
/**
   * If the native blob module is available.
   */ BlobManager.isAvailable = !!_NativeBlobModule.default;
module.exports = BlobManager;


}),
91145: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _type_of = __webpack_require__(29936);
var _composeStyles = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29384));
var ReactNativeStyleAttributes = __webpack_require__(22950);
var PixelRatio = (__webpack_require__(42737)/* ["default"] */["default"]);
var flatten = __webpack_require__(79250);
/**
 * This type should be used as the type for anything that is a color. It is
 * most useful when using DynamicColorIOS which can be a string or a dynamic
 * color object.
 *
 * type props = {backgroundColor: ColorValue};
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to a <View>'s `style` prop. This ensures call sites of the component
 * can't pass styles that View doesn't support such as `fontSize`.`
 *
 * type Props = {style: ViewStyleProp}
 * const MyComponent = (props: Props) => <View style={props.style} />
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to a <Text>'s `style` prop. This ensures call sites of the component
 * can't pass styles that Text doesn't support such as `resizeMode`.`
 *
 * type Props = {style: TextStyleProp}
 * const MyComponent = (props: Props) => <Text style={props.style} />
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to an <Image>'s `style` prop. This ensures call sites of the component
 * can't pass styles that Image doesn't support such as `fontSize`.`
 *
 * type Props = {style: ImageStyleProp}
 * const MyComponent = (props: Props) => <Image style={props.style} />
 */ /**
 * WARNING: You probably shouldn't be using this type. This type
 * is similar to the ones above except it allows styles that are accepted
 * by all of View, Text, or Image. It is therefore very unsafe to pass this
 * through to an underlying component. Using this is almost always a mistake
 * and using one of the other more restrictive types is likely the right choice.
 */ /**
 * Utility type for getting the values for specific style keys.
 *
 * The following is bad because position is more restrictive than 'string':
 * ```
 * type Props = {position: string};
 * ```
 *
 * You should use the following instead:
 *
 * ```
 * type Props = {position: TypeForStyleKey<'position'>};
 * ```
 *
 * This will correctly give you the type 'absolute' | 'relative'
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for View.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using ViewStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to a View that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for Text.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using TextStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to a Text that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for Image.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using ImageStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to an Image that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * WARNING: You probably shouldn't be using this type. This type is an object
 * with all possible style keys and their values. Note that this isn't
 * a safe way to type a style prop for a component as results from
 * StyleSheet.create return an internal identifier, not an object of styles.
 *
 * If you want to type the style prop of a function, consider using
 * ViewStyleProp, TextStyleProp, or ImageStyleProp.
 *
 * This should only be used by very core utilities that operate on an object
 * containing any possible style value.
 */ var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
}
var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
};
if (false) {}
/**
 * A StyleSheet is an abstraction similar to CSS StyleSheets
 *
 * Create a new StyleSheet:
 *
 * ```
 * const styles = StyleSheet.create({
 *   container: {
 *     borderRadius: 4,
 *     borderWidth: 0.5,
 *     borderColor: '#d6d7da',
 *   },
 *   title: {
 *     fontSize: 19,
 *     fontWeight: 'bold',
 *   },
 *   activeTitle: {
 *     color: 'red',
 *   },
 * });
 * ```
 *
 * Use a StyleSheet:
 *
 * ```
 * <View style={styles.container}>
 *   <Text style={[styles.title, this.props.isActive && styles.activeTitle]} />
 * </View>
 * ```
 *
 * Code quality:
 *
 *  - By moving styles away from the render function, you're making the code
 *    easier to understand.
 *  - Naming the styles is a good way to add meaning to the low level components
 *  in the render function, and encourage reuse.
 *  - In most IDEs, using `StyleSheet.create()` will offer static type checking
 *  and suggestions to help you write valid styles.
 *
 */ module.exports = {
    /**
   * This is defined as the width of a thin line on the platform. It can be
   * used as the thickness of a border or division between two elements.
   * Example:
   * ```
   *   {
   *     borderBottomColor: '#bbb',
   *     borderBottomWidth: StyleSheet.hairlineWidth
   *   }
   * ```
   *
   * This constant will always be a round number of pixels (so a line defined
   * by it look crisp) and will try to match the standard width of a thin line
   * on the underlying platform. However, you should not rely on it being a
   * constant size, because on different platforms and screen densities its
   * value may be calculated differently.
   *
   * A line with hairline width may not be visible if your simulator is downscaled.
   */ hairlineWidth: hairlineWidth,
    /**
   * A very common pattern is to create overlays with position absolute and zero positioning,
   * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated
   * styles.
   */ absoluteFill: absoluteFill,
    /**
   * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be
   * used to create a customized entry in a `StyleSheet`, e.g.:
   *
   *   const styles = StyleSheet.create({
   *     wrapper: {
   *       ...StyleSheet.absoluteFillObject,
   *       top: 10,
   *       backgroundColor: 'transparent',
   *     },
   *   });
   */ absoluteFillObject: absoluteFill,
    /**
   * Combines two styles such that `style2` will override any styles in `style1`.
   * If either style is falsy, the other one is returned without allocating an
   * array, saving allocations and maintaining reference equality for
   * PureComponent checks.
   */ compose: _composeStyles.default,
    /**
   * Flattens an array of style objects, into one aggregated style object.
   *
   * Example:
   * ```
   * const styles = StyleSheet.create({
   *   listItem: {
   *     flex: 1,
   *     fontSize: 16,
   *     color: 'white'
   *   },
   *   selectedListItem: {
   *     color: 'green'
   *   }
   * });
   *
   * StyleSheet.flatten([styles.listItem, styles.selectedListItem])
   * // returns { flex: 1, fontSize: 16, color: 'green' }
   * ```
   */ flatten: flatten,
    /**
   * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will
   * not be reliably announced. The whole thing might be deleted, who knows? Use
   * at your own risk.
   *
   * Sets a function to use to pre-process a style property value. This is used
   * internally to process color and transform values. You should not use this
   * unless you really know what you are doing and have exhausted other options.
   */ setStyleAttributePreprocessor: function(property, process) {
        var _ReactNativeStyleAttributes_property, _ReactNativeStyleAttributes_property1;
        var value;
        if (ReactNativeStyleAttributes[property] === true) {
            value = {
                process: process
            };
        } else if (_type_of._(ReactNativeStyleAttributes[property]) === 'object') {
            value = _extends._({}, ReactNativeStyleAttributes[property], {
                process: process
            });
        } else {
            console.error("" + property + " is not a valid style attribute");
            return;
        }
        if (false) {}
        ReactNativeStyleAttributes[property] = value;
    },
    /**
   * An identity function for creating style sheets.
   */ // $FlowFixMe[unsupported-variance-annotation]
    create: function(obj) {
        // TODO: This should return S as the return type. But first,
        // we need to codemod all the callsites that are typing this
        // return value as a number (even though it was opaque).
        if (false) { var key }
        return obj;
    }
};


}),
91698: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var NativeModule = _TurboModuleRegistry.get('BlobModule');
var constants = null;
var NativeBlobModule = null;
if (NativeModule != null) {
    NativeBlobModule = {
        getConstants: function() {
            if (constants == null) {
                constants = NativeModule.getConstants();
            }
            return constants;
        },
        addNetworkingHandler: function() {
            NativeModule.addNetworkingHandler();
        },
        addWebSocketHandler: function(id) {
            NativeModule.addWebSocketHandler(id);
        },
        removeWebSocketHandler: function(id) {
            NativeModule.removeWebSocketHandler(id);
        },
        sendOverSocket: function(blob, socketID) {
            NativeModule.sendOverSocket(blob, socketID);
        },
        createFromParts: function(parts, withId) {
            NativeModule.createFromParts(parts, withId);
        },
        release: function(blobId) {
            NativeModule.release(blobId);
        }
    };
}
var _default = NativeBlobModule;


}),
92236: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeNetworkingIOS = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(39404), exports));
var _default = _NativeNetworkingIOS.default;


}),
93193: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('DialogManagerAndroid');


}),
95606: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(68493));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93839));
__webpack_require__(25580);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var __INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTView',
    validAttributes: {
        removeClippedSubviews: true,
        accessible: true,
        hasTVPreferredFocus: true,
        nextFocusDown: true,
        nextFocusForward: true,
        nextFocusLeft: true,
        nextFocusRight: true,
        nextFocusUp: true,
        borderRadius: true,
        borderTopLeftRadius: true,
        borderTopRightRadius: true,
        borderBottomRightRadius: true,
        borderBottomLeftRadius: true,
        borderTopStartRadius: true,
        borderTopEndRadius: true,
        borderBottomStartRadius: true,
        borderBottomEndRadius: true,
        borderEndEndRadius: true,
        borderEndStartRadius: true,
        borderStartEndRadius: true,
        borderStartStartRadius: true,
        borderStyle: true,
        hitSlop: true,
        pointerEvents: true,
        nativeBackgroundAndroid: true,
        nativeForegroundAndroid: true,
        needsOffscreenAlphaCompositing: true,
        borderWidth: true,
        borderLeftWidth: true,
        borderRightWidth: true,
        borderTopWidth: true,
        borderBottomWidth: true,
        borderStartWidth: true,
        borderEndWidth: true,
        borderColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderLeftColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderRightColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderTopColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderBottomColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderStartColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderEndColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderBlockColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderBlockEndColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderBlockStartColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        focusable: true,
        overflow: true,
        backfaceVisibility: true,
        experimental_layoutConformance: true
    }
} : {
    uiViewClassName: 'RCTView'
};
var ViewNativeComponent = _NativeComponentRegistry.get('RCTView', function() {
    return __INTERNAL_VIEW_CONFIG;
});
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'hotspotUpdate',
        'setPressed'
    ]
});
var _default = ViewNativeComponent;


}),
9734: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeAlertManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26939));
module.exports = {
    alertWithArgs: function(args, callback) {
        if (_NativeAlertManager.default == null) {
            return;
        }
        _NativeAlertManager.default.alertWithArgs(args, callback);
    }
};


}),
98542: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _registerCallableModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34173));
var _BugReporting = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79720));
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83672));
var _infoLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51515));
var _SceneTracker = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66710));
var _DisplayMode = __webpack_require__(53982);
var _HeadlessJsTaskError = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69594));
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11367));
var _renderApplication = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75605));
var _RendererProxy = __webpack_require__(14288);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var runnables = {};
var runCount = 1;
var sections = {};
var taskProviders = new Map();
var taskCancelProviders = new Map();
var componentProviderInstrumentationHook = function(component) {
    return component();
};
var wrapperComponentProvider;
var rootViewStyleProvider;
/**
 * `AppRegistry` is the JavaScript entry point to running all React Native apps.
 *
 * See https://reactnative.dev/docs/appregistry
 */ var AppRegistry = {
    setWrapperComponentProvider: function(provider) {
        wrapperComponentProvider = provider;
    },
    setRootViewStyleProvider: function(provider) {
        rootViewStyleProvider = provider;
    },
    registerConfig: function(config) {
        config.forEach(function(appConfig) {
            if (appConfig.run) {
                AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
            } else {
                (0, _invariant.default)(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
                AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
            }
        });
    },
    /**
   * Registers an app's root component.
   *
   * See https://reactnative.dev/docs/appregistry#registercomponent
   */ registerComponent: function(appKey, componentProvider, section) {
        var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();
        runnables[appKey] = function(appParameters, displayMode) {
            var _appParameters_initialProps;
            var concurrentRootEnabled = Boolean(((_appParameters_initialProps = appParameters.initialProps) == null ? void 0 : _appParameters_initialProps.concurrentRoot) || appParameters.concurrentRoot);
            (0, _renderApplication.default)(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), rootViewStyleProvider && rootViewStyleProvider(appParameters), appParameters.fabric, scopedPerformanceLogger, appKey === 'LogBox', appKey, displayMode, concurrentRootEnabled);
        };
        if (section) {
            sections[appKey] = runnables[appKey];
        }
        return appKey;
    },
    registerRunnable: function(appKey, run) {
        runnables[appKey] = run;
        return appKey;
    },
    registerSection: function(appKey, component) {
        AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function() {
        return Object.keys(runnables);
    },
    getSectionKeys: function() {
        return Object.keys(sections);
    },
    getSections: function() {
        return _extends._({}, sections);
    },
    getRunnable: function(appKey) {
        return runnables[appKey];
    },
    getRegistry: function() {
        return {
            sections: AppRegistry.getSectionKeys(),
            runnables: _extends._({}, runnables)
        };
    },
    setComponentProviderInstrumentationHook: function(hook) {
        componentProviderInstrumentationHook = hook;
    },
    /**
   * Loads the JavaScript bundle and runs the app.
   *
   * See https://reactnative.dev/docs/appregistry#runapplication
   */ runApplication: function(appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var logParams =  false ? 0 : '';
            var msg = 'Running "' + appKey + '"' + logParams;
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.runApplication' + runCount++, function() {
                return msg;
            });
        }
        (0, _invariant.default)(runnables[appKey], '"' + appKey + '" has not been registered. This can happen if:\n' + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        _SceneTracker.default.setActiveScene({
            name: appKey
        });
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Update initial props for a surface that's already rendered
   */ setSurfaceProps: function(appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var msg = 'Updating props for Surface "' + appKey + '" with ' + JSON.stringify(appParameters);
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.setSurfaceProps' + runCount++, function() {
                return msg;
            });
        }
        (0, _invariant.default)(runnables[appKey], '"' + appKey + '" has not been registered. This can happen if:\n' + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Stops an application when a view should be destroyed.
   *
   * See https://reactnative.dev/docs/appregistry#unmountapplicationcomponentatroottag
   */ unmountApplicationComponentAtRootTag: function(rootTag) {
        (0, _RendererProxy.unmountComponentAtNodeAndRemoveContainer)(rootTag);
    },
    /**
   * Register a headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registerheadlesstask
   */ registerHeadlessTask: function(taskKey, taskProvider) {
        // $FlowFixMe[object-this-reference]
        this.registerCancellableHeadlessTask(taskKey, taskProvider, function() {
            return function() {
            /* Cancel is no-op */ };
        });
    },
    /**
   * Register a cancellable headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registercancellableheadlesstask
   */ registerCancellableHeadlessTask: function(taskKey, taskProvider, taskCancelProvider) {
        if (taskProviders.has(taskKey)) {
            console.warn("registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '" + taskKey + "'");
        }
        taskProviders.set(taskKey, taskProvider);
        taskCancelProviders.set(taskKey, taskCancelProvider);
    },
    /**
   * Only called from native code. Starts a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#startheadlesstask
   */ startHeadlessTask: function(taskId, taskKey, data) {
        var taskProvider = taskProviders.get(taskKey);
        if (!taskProvider) {
            console.warn("No task registered for key " + taskKey);
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
            return;
        }
        taskProvider()(data).then(function() {
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
        })["catch"](function(reason) {
            console.error(reason);
            if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
                // $FlowFixMe[unused-promise]
                _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then(function(retryPosted) {
                    if (!retryPosted) {
                        _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
                    }
                });
            }
        });
    },
    /**
   * Only called from native code. Cancels a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#cancelheadlesstask
   */ cancelHeadlessTask: function(taskId, taskKey) {
        var taskCancelProvider = taskCancelProviders.get(taskKey);
        if (!taskCancelProvider) {
            throw new Error("No task canceller registered for key '" + taskKey + "'");
        }
        taskCancelProvider()();
    }
};
// Register LogBox as a default surface
AppRegistry.registerComponent('LogBox', function() {
    if (false) {} else {
        return function NoOp() {
            return null;
        };
    }
});
__webpack_require__.g.RN$AppRegistry = AppRegistry;
// Backwards compat with SurfaceRegistry, remove me later
__webpack_require__.g.RN$SurfaceRegistry = {
    renderSurface: AppRegistry.runApplication,
    setSurfaceProps: AppRegistry.setSurfaceProps
};
if (__webpack_require__.g.RN$Bridgeless === true) {
    console.log('Bridgeless mode is enabled');
}
(0, _registerCallableModule.default)('AppRegistry', AppRegistry);
module.exports = AppRegistry;


}),
99732: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
var Blob = __webpack_require__(88829);
var binaryToBase64 = __webpack_require__(73532);
var FormData = __webpack_require__(59975);
function convertRequestBody(body) {
    if (typeof body === 'string') {
        return {
            string: body
        };
    }
    if (body instanceof Blob) {
        return {
            blob: body.data
        };
    }
    if (body instanceof FormData) {
        return {
            formData: body.getParts()
        };
    }
    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
        /* $FlowFixMe[incompatible-call] : no way to assert that 'body' is indeed
     * an ArrayBufferView */ return {
            base64: binaryToBase64(body)
        };
    }
    return body;
}
module.exports = convertRequestBody;


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_EventEmitter_NativeEventEmitter_js-node_modules_r-21d120.chunk.bundle.map?platform=ios/* RCSSB */eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYXNoIjoiNWFhZDViNjgyNmE5OTIwNTlhNWNiNGIyYTllMjVkMTA2M2Q3NjNjZjhiNmQzNDY4NDI1MzkwOTEwYjJiZjNlYiIsImlhdCI6MTc0ODg0NzM0MX0.v-75X-Fos1nN_Gqf8xBSanWL30OpqnhGwcvoUZlLq6xgEmP4w4iTZp4lfoNS6ghZiDxtBPyj44L-pIqpx64S__P-BpqCkRjA0kzZMOPTILEve8n-wRCVPahzYRNZwNUU1yoxBdJUQFW9Hgq2LgC0cC-_eW3sPTXH1pzreEUNyAarrJxEJHP9q4vpYov497vuhHcQXHatOVHt3kVuhrlPA6mqZMkru5L0pckKkWl-gFeKOwt1TRT-8_o8hPbucOZS1_HyUaRBWBWE2yrARuGtFUEU9bd3Gvckhk6KIXWHqIZAKhCA0TYa-S9cwcud8_JHpnIrjkfGKsChOaCfUL4NKQ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              