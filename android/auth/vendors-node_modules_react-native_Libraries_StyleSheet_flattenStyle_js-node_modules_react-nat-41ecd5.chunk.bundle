(self["webpackChunksas_auth"] = self["webpackChunksas_auth"] || []).push([["vendors-node_modules_react-native_Libraries_StyleSheet_flattenStyle_js-node_modules_react-nat-41ecd5"], {
26044: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<0bff47ec5af8ed96d8b2abe351f318f1>>
 *       strict-local
 */ /**
 * IMPORTANT: Do NOT modify this file directly.
 *
 * To change the definition of the flags, edit
 *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.
 *
 * To regenerate this code, run the following script from the repo root:
 *   yarn featureflags-update
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get allowRecursiveCommitsWithSynchronousMountOnAndroid () {
        return allowRecursiveCommitsWithSynchronousMountOnAndroid;
    },
    get animatedShouldDebounceQueueFlush () {
        return animatedShouldDebounceQueueFlush;
    },
    get animatedShouldUseSingleOp () {
        return animatedShouldUseSingleOp;
    },
    get batchRenderingUpdatesInEventLoop () {
        return batchRenderingUpdatesInEventLoop;
    },
    get commonTestFlag () {
        return commonTestFlag;
    },
    get completeReactInstanceCreationOnBgThreadOnAndroid () {
        return completeReactInstanceCreationOnBgThreadOnAndroid;
    },
    get destroyFabricSurfacesInReactInstanceManager () {
        return destroyFabricSurfacesInReactInstanceManager;
    },
    get enableAccessToHostTreeInFabric () {
        return enableAccessToHostTreeInFabric;
    },
    get enableAlignItemsBaselineOnFabricIOS () {
        return enableAlignItemsBaselineOnFabricIOS;
    },
    get enableAndroidMixBlendModeProp () {
        return enableAndroidMixBlendModeProp;
    },
    get enableBackgroundStyleApplicator () {
        return enableBackgroundStyleApplicator;
    },
    get enableCleanTextInputYogaNode () {
        return enableCleanTextInputYogaNode;
    },
    get enableEagerRootViewAttachment () {
        return enableEagerRootViewAttachment;
    },
    get enableEventEmitterRetentionDuringGesturesOnAndroid () {
        return enableEventEmitterRetentionDuringGesturesOnAndroid;
    },
    get enableFabricLogs () {
        return enableFabricLogs;
    },
    get enableFabricRendererExclusively () {
        return enableFabricRendererExclusively;
    },
    get enableGranularShadowTreeStateReconciliation () {
        return enableGranularShadowTreeStateReconciliation;
    },
    get enableIOSViewClipToPaddingBox () {
        return enableIOSViewClipToPaddingBox;
    },
    get enableLayoutAnimationsOnIOS () {
        return enableLayoutAnimationsOnIOS;
    },
    get enableLongTaskAPI () {
        return enableLongTaskAPI;
    },
    get enableMicrotasks () {
        return enableMicrotasks;
    },
    get enableOptimisedVirtualizedCells () {
        return enableOptimisedVirtualizedCells;
    },
    get enablePropsUpdateReconciliationAndroid () {
        return enablePropsUpdateReconciliationAndroid;
    },
    get enableReportEventPaintTime () {
        return enableReportEventPaintTime;
    },
    get enableSynchronousStateUpdates () {
        return enableSynchronousStateUpdates;
    },
    get enableUIConsistency () {
        return enableUIConsistency;
    },
    get enableViewRecycling () {
        return enableViewRecycling;
    },
    get excludeYogaFromRawProps () {
        return excludeYogaFromRawProps;
    },
    get fetchImagesInViewPreallocation () {
        return fetchImagesInViewPreallocation;
    },
    get fixIncorrectScrollViewStateUpdateOnAndroid () {
        return fixIncorrectScrollViewStateUpdateOnAndroid;
    },
    get fixMappingOfEventPrioritiesBetweenFabricAndReact () {
        return fixMappingOfEventPrioritiesBetweenFabricAndReact;
    },
    get fixMissedFabricStateUpdatesOnAndroid () {
        return fixMissedFabricStateUpdatesOnAndroid;
    },
    get fixMountingCoordinatorReportedPendingTransactionsOnAndroid () {
        return fixMountingCoordinatorReportedPendingTransactionsOnAndroid;
    },
    get forceBatchingMountItemsOnAndroid () {
        return forceBatchingMountItemsOnAndroid;
    },
    get fuseboxEnabledDebug () {
        return fuseboxEnabledDebug;
    },
    get fuseboxEnabledRelease () {
        return fuseboxEnabledRelease;
    },
    get initEagerTurboModulesOnNativeModulesQueueAndroid () {
        return initEagerTurboModulesOnNativeModulesQueueAndroid;
    },
    get isLayoutAnimationEnabled () {
        return isLayoutAnimationEnabled;
    },
    get jsOnlyTestFlag () {
        return jsOnlyTestFlag;
    },
    get lazyAnimationCallbacks () {
        return lazyAnimationCallbacks;
    },
    get loadVectorDrawablesOnImages () {
        return loadVectorDrawablesOnImages;
    },
    get override () {
        return override;
    },
    get setAndroidLayoutDirection () {
        return setAndroidLayoutDirection;
    },
    get shouldSkipStateUpdatesForLoopingAnimations () {
        return shouldSkipStateUpdatesForLoopingAnimations;
    },
    get shouldUseAnimatedObjectForTransform () {
        return shouldUseAnimatedObjectForTransform;
    },
    get shouldUseRemoveClippedSubviewsAsDefaultOnIOS () {
        return shouldUseRemoveClippedSubviewsAsDefaultOnIOS;
    },
    get shouldUseSetNativePropsInFabric () {
        return shouldUseSetNativePropsInFabric;
    },
    get shouldUseSetNativePropsInNativeAnimationsInFabric () {
        return shouldUseSetNativePropsInNativeAnimationsInFabric;
    },
    get traceTurboModulePromiseRejectionsOnAndroid () {
        return traceTurboModulePromiseRejectionsOnAndroid;
    },
    get useFabricInterop () {
        return useFabricInterop;
    },
    get useImmediateExecutorInAndroidBridgeless () {
        return useImmediateExecutorInAndroidBridgeless;
    },
    get useModernRuntimeScheduler () {
        return useModernRuntimeScheduler;
    },
    get useNativeViewConfigsInBridgelessMode () {
        return useNativeViewConfigsInBridgelessMode;
    },
    get useNewReactImageViewBackgroundDrawing () {
        return useNewReactImageViewBackgroundDrawing;
    },
    get useOptimisedViewPreallocationOnAndroid () {
        return useOptimisedViewPreallocationOnAndroid;
    },
    get useOptimizedEventBatchingOnAndroid () {
        return useOptimizedEventBatchingOnAndroid;
    },
    get usePassiveEffectsForAnimations () {
        return usePassiveEffectsForAnimations;
    },
    get useRefsForTextInputState () {
        return useRefsForTextInputState;
    },
    get useRuntimeShadowNodeReferenceUpdate () {
        return useRuntimeShadowNodeReferenceUpdate;
    },
    get useRuntimeShadowNodeReferenceUpdateOnLayout () {
        return useRuntimeShadowNodeReferenceUpdateOnLayout;
    },
    get useStateAlignmentMechanism () {
        return useStateAlignmentMechanism;
    },
    get useTurboModuleInterop () {
        return useTurboModuleInterop;
    }
});
var _ReactNativeFeatureFlagsBase = __webpack_require__(90454);
var jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var enableOptimisedVirtualizedCells = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableOptimisedVirtualizedCells', false);
var isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var shouldSkipStateUpdatesForLoopingAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldSkipStateUpdatesForLoopingAnimations', false);
var shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var shouldUseSetNativePropsInNativeAnimationsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInNativeAnimationsInFabric', false);
var usePassiveEffectsForAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('usePassiveEffectsForAnimations', false);
var useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
var commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var allowRecursiveCommitsWithSynchronousMountOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('allowRecursiveCommitsWithSynchronousMountOnAndroid', false);
var batchRenderingUpdatesInEventLoop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('batchRenderingUpdatesInEventLoop', false);
var completeReactInstanceCreationOnBgThreadOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('completeReactInstanceCreationOnBgThreadOnAndroid', false);
var destroyFabricSurfacesInReactInstanceManager = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('destroyFabricSurfacesInReactInstanceManager', false);
var enableAlignItemsBaselineOnFabricIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAlignItemsBaselineOnFabricIOS', true);
var enableAndroidMixBlendModeProp = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAndroidMixBlendModeProp', false);
var enableBackgroundStyleApplicator = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBackgroundStyleApplicator', true);
var enableCleanTextInputYogaNode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCleanTextInputYogaNode', false);
var enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableEventEmitterRetentionDuringGesturesOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEventEmitterRetentionDuringGesturesOnAndroid', false);
var enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRendererExclusively = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRendererExclusively', false);
var enableGranularShadowTreeStateReconciliation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableGranularShadowTreeStateReconciliation', false);
var enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
var enableMicrotasks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableMicrotasks', false);
var enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
var enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
var fetchImagesInViewPreallocation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fetchImagesInViewPreallocation', false);
var fixIncorrectScrollViewStateUpdateOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixIncorrectScrollViewStateUpdateOnAndroid', false);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fixMissedFabricStateUpdatesOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMissedFabricStateUpdatesOnAndroid', false);
var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
var forceBatchingMountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('forceBatchingMountItemsOnAndroid', false);
var fuseboxEnabledDebug = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledDebug', true);
var fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var initEagerTurboModulesOnNativeModulesQueueAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('initEagerTurboModulesOnNativeModulesQueueAndroid', false);
var lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var loadVectorDrawablesOnImages = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('loadVectorDrawablesOnImages', false);
var setAndroidLayoutDirection = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('setAndroidLayoutDirection', false);
var traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
var useImmediateExecutorInAndroidBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useImmediateExecutorInAndroidBridgeless', false);
var useModernRuntimeScheduler = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useModernRuntimeScheduler', false);
var useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useNewReactImageViewBackgroundDrawing = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNewReactImageViewBackgroundDrawing', false);
var useOptimisedViewPreallocationOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimisedViewPreallocationOnAndroid', false);
var useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRuntimeShadowNodeReferenceUpdate = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdate', false);
var useRuntimeShadowNodeReferenceUpdateOnLayout = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdateOnLayout', false);
var useStateAlignmentMechanism = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useStateAlignmentMechanism', false);
var useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var override = _ReactNativeFeatureFlagsBase.setOverrides;


}),
5739: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var dispatchCommand = (__webpack_require__(14288)/* .dispatchCommand */.dispatchCommand);
function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach(function(command) {
        // $FlowFixMe[missing-local-annot]
        commandObj[command] = function(ref) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                args[_key - 1] = arguments[_key];
            }
            // $FlowFixMe[incompatible-call]
            dispatchCommand(ref, command, args);
        };
    });
    return commandObj;
}
var _default = codegenNativeCommands;


}),
73827: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var NativeReactNativeFeatureFlags = _TurboModuleRegistry.get('NativeReactNativeFeatureFlagsCxx');
var _default = NativeReactNativeFeatureFlags;


}),
79250: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(29936);
function flattenStyle(style) {
    if (style === null || (typeof style === "undefined" ? "undefined" : _type_of._(style)) !== 'object') {
        return undefined;
    }
    if (!Array.isArray(style)) {
        // $FlowFixMe[incompatible-return]
        return style;
    }
    var result = {};
    for(var i = 0, styleLength = style.length; i < styleLength; ++i){
        // $FlowFixMe[underconstrained-implicit-instantiation]
        var computedStyle = flattenStyle(style[i]);
        if (computedStyle) {
            // $FlowFixMe[invalid-in-rhs]
            for(var key in computedStyle){
                // $FlowFixMe[incompatible-use]
                // $FlowFixMe[invalid-computed-prop]
                result[key] = computedStyle[key];
            }
        }
    }
    // $FlowFixMe[incompatible-return]
    return result;
}
module.exports = flattenStyle;


}),
90454: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createJavaScriptFlagGetter () {
        return createJavaScriptFlagGetter;
    },
    get createNativeFlagGetter () {
        return createNativeFlagGetter;
    },
    get getOverrides () {
        return getOverrides;
    },
    get setOverrides () {
        return setOverrides;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _NativeReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73827));
var accessedFeatureFlags = new Set();
var overrides;
function createGetter(configName, customValueGetter, defaultValue) {
    var cachedValue;
    return function() {
        if (cachedValue == null) {
            var _customValueGetter;
            cachedValue = (_customValueGetter = customValueGetter()) != null ? _customValueGetter : defaultValue;
        }
        return cachedValue;
    };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
    return createGetter(configName, function() {
        var _overrides_configName;
        accessedFeatureFlags.add(configName);
        return overrides == null ? void 0 : (_overrides_configName = overrides[configName]) == null ? void 0 : _overrides_configName.call(overrides);
    }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue) {
    return createGetter(configName, function() {
        var _NativeReactNativeFeatureFlags_configName;
        var valueFromNative = _NativeReactNativeFeatureFlags.default == null ? void 0 : (_NativeReactNativeFeatureFlags_configName = _NativeReactNativeFeatureFlags.default[configName]) == null ? void 0 : _NativeReactNativeFeatureFlags_configName.call(_NativeReactNativeFeatureFlags.default);
        if (valueFromNative == null) {
            logUnavailableNativeModuleError(configName);
        }
        return valueFromNative;
    }, defaultValue);
}
function getOverrides() {
    return overrides;
}
function setOverrides(newOverrides) {
    if (overrides != null) {
        throw new Error('Feature flags cannot be overridden more than once');
    }
    if (accessedFeatureFlags.size > 0) {
        var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
        throw new Error("Feature flags were accessed before being overridden: " + accessedFeatureFlagsStr);
    }
    overrides = newOverrides;
}
var reportedConfigNames = new Set();
function logUnavailableNativeModuleError(configName) {
    if (!reportedConfigNames.has(configName)) {
        reportedConfigNames.add(configName);
        console.error("Could not access feature flag '" + configName + "' because native module method was not available");
    }
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_StyleSheet_flattenStyle_js-node_modules_react-nat-41ecd5.chunk.bundle.map?platform=android/* RCSSB */eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYXNoIjoiZjhjYTk5ZmJhMmUwODY2MzJkMDM1YjlhYzM3N2E1OTAzMzU0M2U5OWYxZGUyZmJmMTE5OTJhMWFlOGEwMDRlOCIsImlhdCI6MTc0ODg0NzM0M30.SfFwnauw87rDiNzLIEeCk1nIMVnzDXGODoy1aORekNqTo0UJNpRSLi3izGJS_zJ-V4X9H8njs0_mBXo1Hafk3N4a8zowAFlj8Q9Fm5uxCBsDtZ4D9i_v9X0695zMHqS-z0sUb-7cE2WG0NjB0IK3QkbjF_eomk1bEn3VI82mIprej5p1vLG-yZyVICm9D_6_6PaFqdpfNAlC0XQSrw1QLwFRHrZCy0vglVFyKCdEIBHYDjnM8_jMHAHZnHLNZjmPQD78RCb72aj3Azgjn-wPPsJZcsQtaW0eQ954wzk35av8ILeGzF8dFBz79V0iQyNtvFhEKVg8jhac15ET2ri6hA                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              