(self["webpackChunksas_auth"] = self["webpackChunksas_auth"] || []).push([["vendors-node_modules_react-native_index_js"], {
10156: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('KeyboardObserver');


}),
11213: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 * @oncall react_native
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedObject;
    }
}));
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _type_of = __webpack_require__(29936);
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var MAX_DEPTH = 5;
/* $FlowIssue[incompatible-type-guard] - Flow does not know that the prototype
   and ReactElement checks preserve the type refinement of `value`. */ function isPlainObject(value) {
    return value !== null && (typeof value === "undefined" ? "undefined" : _type_of._(value)) === 'object' && Object.getPrototypeOf(value).isPrototypeOf(Object) && !/*#__PURE__*/ _react.isValidElement(value);
}
function flatAnimatedNodes(value, nodes, depth) {
    if (nodes === void 0) nodes = [];
    if (depth === void 0) depth = 0;
    if (depth >= MAX_DEPTH) {
        return nodes;
    }
    if (value instanceof _AnimatedNode.default) {
        nodes.push(value);
    } else if (Array.isArray(value)) {
        for(var ii = 0, length = value.length; ii < length; ii++){
            var element = value[ii];
            flatAnimatedNodes(element, nodes, depth + 1);
        }
    } else if (isPlainObject(value)) {
        var keys = Object.keys(value);
        for(var ii1 = 0, length1 = keys.length; ii1 < length1; ii1++){
            var key = keys[ii1];
            flatAnimatedNodes(value[key], nodes, depth + 1);
        }
    }
    return nodes;
}
// Returns a copy of value with a transformation fn applied to any AnimatedNodes
function mapAnimatedNodes(value, fn, depth) {
    if (depth === void 0) depth = 0;
    if (depth >= MAX_DEPTH) {
        return value;
    }
    if (value instanceof _AnimatedNode.default) {
        return fn(value);
    } else if (Array.isArray(value)) {
        return value.map(function(element) {
            return mapAnimatedNodes(element, fn, depth + 1);
        });
    } else if (isPlainObject(value)) {
        var result = {};
        var keys = Object.keys(value);
        for(var ii = 0, length = keys.length; ii < length; ii++){
            var key = keys[ii];
            result[key] = mapAnimatedNodes(value[key], fn, depth + 1);
        }
        return result;
    } else {
        return value;
    }
}
var _nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes");
var AnimatedObject = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedObject, AnimatedWithChildren);
    function AnimatedObject(nodes, value) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this, Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _this._value = value;
        return _this;
    }
    var _proto = AnimatedObject.prototype;
    _proto.__getValue = function __getValue() {
        return mapAnimatedNodes(this._value, function(node) {
            return node.__getValue();
        });
    };
    _proto.__getAnimatedValue = function __getAnimatedValue() {
        return mapAnimatedNodes(this._value, function(node) {
            return node.__getAnimatedValue();
        });
    };
    _proto.__attach = function __attach() {
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__addChild(this);
        }
    };
    _proto.__detach = function __detach() {
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__removeChild(this);
        }
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__makeNative = function __makeNative(platformConfig) {
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__makeNative(platformConfig);
        }
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        return {
            type: 'object',
            value: mapAnimatedNodes(this._value, function(node) {
                return {
                    nodeTag: node.__getNativeTag()
                };
            })
        };
    };
    /**
   * Creates an `AnimatedObject` if `value` contains `AnimatedNode` instances.
   * Otherwise, returns `null`.
   */ AnimatedObject.from = function from(value) {
        var nodes = flatAnimatedNodes(value);
        if (nodes.length === 0) {
            return null;
        }
        return new AnimatedObject(nodes, value);
    };
    return AnimatedObject;
}(_AnimatedWithChildren.default);


}),
11418: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _HScrollViewNativeComponents = __webpack_require__(99614);
var _VScrollViewNativeComponents = __webpack_require__(75201);
var _AnimatedImplementation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74124));
var _FrameRateLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(48688));
var _RendererProxy = __webpack_require__(14288);
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35180));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79250));
var _splitLayoutProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7730));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Dimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7139));
var _dismissKeyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98425));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74765));
var _Keyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29723));
var _TextInputState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(72810));
var _processDecelerationRate = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73201));
var _ScrollViewCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15794));
var _ScrollViewContext = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(79155));
var _ScrollViewStickyHeader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59700));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _memoizeone = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47459));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89169));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/*
 * iOS scroll event timing nuances:
 * ===============================
 *
 *
 * Scrolling without bouncing, if you touch down:
 * -------------------------------
 *
 * 1. `onMomentumScrollBegin` (when animation begins after letting up)
 *    ... physical touch starts ...
 * 2. `onTouchStartCapture`   (when you press down to stop the scroll)
 * 3. `onTouchStart`          (same, but bubble phase)
 * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)
 * 5. `onMomentumScrollEnd`
 *
 *
 * Scrolling with bouncing, if you touch down:
 * -------------------------------
 *
 * 1. `onMomentumScrollBegin` (when animation begins after letting up)
 *    ... bounce begins ...
 *    ... some time elapses ...
 *    ... physical touch during bounce ...
 * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)
 * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)
 * 4. `onTouchStart`          (same, but bubble phase)
 * 5. `onTouchEnd`            (You could hold the touch start for a long time)
 * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)
 *
 * So when we receive an `onTouchStart`, how can we tell if we are touching
 * *during* an animation (which then causes the animation to stop)? The only way
 * to tell is if the `touchStart` occurred immediately after the
 * `onMomentumScrollEnd`.
 *
 * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if
 * necessary
 *
 * `ScrollView` also includes logic for blurring a currently focused input
 * if one is focused while scrolling. This is a natural place
 * to put this logic since it can support not dismissing the keyboard while
 * scrolling, unless a recognized "tap"-like gesture has occurred.
 *
 * The public lifecycle API includes events for keyboard interaction, responder
 * interaction, and scrolling (among others). The keyboard callbacks
 * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll
 * responder's props so that you can guarantee that the scroll responder's
 * internal state has been updated accordingly (and deterministically) by
 * the time the props callbacks are invoke. Otherwise, you would always wonder
 * if the scroll responder is currently in a state where it recognizes new
 * keyboard positions etc. If coordinating scrolling with keyboard movement,
 * *always* use these hooks instead of listening to your own global keyboard
 * events.
 *
 * Public keyboard lifecycle API: (props callbacks)
 *
 * Standard Keyboard Appearance Sequence:
 *
 *   this.props.onKeyboardWillShow
 *   this.props.onKeyboardDidShow
 *
 * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate
 * tap inside the scroll responder's scrollable region was responsible
 * for the dismissal of the keyboard. There are other reasons why the
 * keyboard could be dismissed.
 *
 *   this.props.onScrollResponderKeyboardDismissed
 *
 * Standard Keyboard Hide Sequence:
 *
 *   this.props.onKeyboardWillHide
 *   this.props.onKeyboardDidHide
 */ // Public methods for ScrollView
var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
var _onScrollEmitter = /*#__PURE__*/ _class_private_field_loose_key._("_onScrollEmitter");
/**
 * Component that wraps platform ScrollView while providing
 * integration with touch locking "responder" system.
 *
 * Keep in mind that ScrollViews must have a bounded height in order to work,
 * since they contain unbounded-height children into a bounded container (via
 * a scroll interaction). In order to bound the height of a ScrollView, either
 * set the height of the view directly (discouraged) or make sure all parent
 * views have bounded height. Forgetting to transfer `{flex: 1}` down the
 * view stack can lead to errors here, which the element inspector makes
 * easy to debug.
 *
 * Doesn't yet support other contained responders from blocking this scroll
 * view from becoming the responder.
 *
 *
 * `<ScrollView>` vs [`<FlatList>`](https://reactnative.dev/docs/flatlist) - which one to use?
 *
 * `ScrollView` simply renders all its react child components at once. That
 * makes it very easy to understand and use.
 *
 * On the other hand, this has a performance downside. Imagine you have a very
 * long list of items you want to display, maybe several screens worth of
 * content. Creating JS components and native views for everything all at once,
 * much of which may not even be shown, will contribute to slow rendering and
 * increased memory usage.
 *
 * This is where `FlatList` comes into play. `FlatList` renders items lazily,
 * just when they are about to appear, and removes items that scroll way off
 * screen to save memory and processing time.
 *
 * `FlatList` is also handy if you want to render separators between your items,
 * multiple columns, infinite scroll loading, or any number of other features it
 * supports out of the box.
 */ var ScrollView = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(ScrollView, _React_Component);
    function ScrollView(props) {
        var _this;
        var _this_props_contentOffset, _this_props_contentInset;
        _this = _React_Component.call(this, props) || this, Object.defineProperty(_this, _onScrollEmitter, {
            writable: true,
            value: void 0
        }), _this._scrollAnimatedValueAttachment = null, _this._stickyHeaderRefs = new Map(), _this._headerLayoutYs = new Map(), _this._keyboardMetrics = null, _this._additionalScrollOffset = 0, _this._isTouching = false, _this._lastMomentumScrollBeginTime = 0, _this._lastMomentumScrollEndTime = 0, // Reset to false every time becomes responder. This is used to:
        // - Determine if the scroll view has been scrolled and therefore should
        // refuse to give up its responder lock.
        // - Determine if releasing should dismiss the keyboard when we are in
        // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').
        _this._observedScrollSinceBecomingResponder = false, _this._becameResponderWhileAnimating = false, _this._preventNegativeScrollOffset = null, _this._animated = null, _this._subscriptionKeyboardWillShow = null, _this._subscriptionKeyboardWillHide = null, _this._subscriptionKeyboardDidShow = null, _this._subscriptionKeyboardDidHide = null, _class_private_field_loose_base._(_this, _onScrollEmitter)[_onScrollEmitter] = null, _this.state = {
            layoutHeight: null
        }, /**
   * Returns a reference to the underlying scroll responder, which supports
   * operations like `scrollTo`. All ScrollView-like components should
   * implement this method so that they can be composed while providing access
   * to the underlying scroll responder's methods.
   */ _this.getScrollResponder = function() {
            // $FlowFixMe[unclear-type]
            return _this;
        }, _this.getScrollableNode = function() {
            return (0, _RendererProxy.findNodeHandle)(_this.getNativeScrollRef());
        }, _this.getInnerViewNode = function() {
            return (0, _RendererProxy.findNodeHandle)(_this._innerView.nativeInstance);
        }, _this.getInnerViewRef = function() {
            return _this._innerView.nativeInstance;
        }, _this.getNativeScrollRef = function() {
            var nativeInstance = _this._scrollView.nativeInstance;
            return nativeInstance == null ? null : nativeInstance.componentRef.current;
        }, /**
   * Scrolls to a given x, y offset, either immediately or with a smooth animation.
   *
   * Example:
   *
   * `scrollTo({x: 0, y: 0, animated: true})`
   *
   * Note: The weird function signature is due to the fact that, for historical reasons,
   * the function also accepts separate arguments as an alternative to the options object.
   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.
   */ _this.scrollTo = function(options, deprecatedX, deprecatedAnimated) {
            var x, y, animated;
            if (typeof options === 'number') {
                console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
                y = options;
                x = deprecatedX;
                animated = deprecatedAnimated;
            } else if (options) {
                y = options.y;
                x = options.x;
                animated = options.animated;
            }
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.scrollTo(component, x || 0, y || 0, animated !== false);
        }, /**
   * If this is a vertical ScrollView scrolls to the bottom.
   * If this is a horizontal ScrollView scrolls to the right.
   *
   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,
   * `scrollToEnd({animated: false})` for immediate scrolling.
   * If no options are passed, `animated` defaults to true.
   */ _this.scrollToEnd = function(options) {
            // Default to true
            var animated = (options && options.animated) !== false;
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.scrollToEnd(component, animated);
        }, /**
   * Displays the scroll indicators momentarily.
   *
   * @platform ios
   */ _this.flashScrollIndicators = function() {
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.flashScrollIndicators(component);
        }, _this._subscribeToOnScroll = function(callback) {
            var onScrollEmitter = _class_private_field_loose_base._(_this, _onScrollEmitter)[_onScrollEmitter];
            if (onScrollEmitter == null) {
                var // This is the first subscription, so make sure the native component is
                // also configured to output synchronous scroll events.
                _this__scrollView_nativeInstance;
                onScrollEmitter = new _EventEmitter.default();
                _class_private_field_loose_base._(_this, _onScrollEmitter)[_onScrollEmitter] = onScrollEmitter;
                (_this__scrollView_nativeInstance = _this._scrollView.nativeInstance) == null ? void 0 : _this__scrollView_nativeInstance.unstable_setEnableSyncOnScroll(true);
            }
            return onScrollEmitter.addListener('scroll', callback);
        }, /**
   * This method should be used as the callback to onFocus in a TextInputs'
   * parent view. Note that any module using this mixin needs to return
   * the parent view's ref in getScrollViewRef() in order to use this method.
   * @param {number} nodeHandle The TextInput node handle
   * @param {number} additionalOffset The scroll view's bottom "contentInset".
   *        Default is 0.
   * @param {bool} preventNegativeScrolling Whether to allow pulling the content
   *        down to make it meet the keyboard's top. Default is false.
   */ _this.scrollResponderScrollNativeHandleToKeyboard = function(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
            _this._additionalScrollOffset = additionalOffset || 0;
            _this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;
            if (_this._innerView.nativeInstance == null) {
                return;
            }
            if (typeof nodeHandle === 'number') {
                _UIManager.default.measureLayout(nodeHandle, (0, _nullthrows.default)((0, _RendererProxy.findNodeHandle)(_this)), // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                _this._textInputFocusError, _this._inputMeasureAndScrollToKeyboard);
            } else {
                nodeHandle.measureLayout(_this._innerView.nativeInstance, _this._inputMeasureAndScrollToKeyboard, // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                _this._textInputFocusError);
            }
        }, /**
   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape
   * {x: number; y: number; width: number; height: number; animated: boolean = true}
   *
   * @platform ios
   */ _this.scrollResponderZoomTo = function(rect, animated) {
            (0, _invariant.default)(_Platform.default.OS === 'ios', 'zoomToRect is not implemented');
            if ('animated' in rect) {
                _this._animated = rect.animated;
                delete rect.animated;
            } else if (typeof animated !== 'undefined') {
                console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
            }
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.zoomToRect(component, rect, animated !== false);
        }, /**
   * The calculations performed here assume the scroll view takes up the entire
   * screen - even if has some content inset. We then measure the offsets of the
   * keyboard, and compensate both for the scroll view's "contentInset".
   *
   * @param {number} left Position of input w.r.t. table view.
   * @param {number} top Position of input w.r.t. table view.
   * @param {number} width Width of the text input.
   * @param {number} height Height of the text input.
   */ _this._inputMeasureAndScrollToKeyboard = function(left, top, width, height) {
            var keyboardScreenY = _Dimensions.default.get('window').height;
            var scrollTextInputIntoVisibleRect = function() {
                if (_this._keyboardMetrics != null) {
                    keyboardScreenY = _this._keyboardMetrics.screenY;
                }
                var scrollOffsetY = top - keyboardScreenY + height + _this._additionalScrollOffset;
                // By default, this can scroll with negative offset, pulling the content
                // down so that the target component's bottom meets the keyboard's top.
                // If requested otherwise, cap the offset at 0 minimum to avoid content
                // shifting down.
                if (_this._preventNegativeScrollOffset === true) {
                    scrollOffsetY = Math.max(0, scrollOffsetY);
                }
                _this.scrollTo({
                    x: 0,
                    y: scrollOffsetY,
                    animated: true
                });
                _this._additionalScrollOffset = 0;
                _this._preventNegativeScrollOffset = false;
            };
            if (_this._keyboardMetrics == null) {
                // `_keyboardMetrics` is set inside `scrollResponderKeyboardWillShow` which
                // is not guaranteed to be called before `_inputMeasureAndScrollToKeyboard` but native has already scheduled it.
                // In case it was not called before `_inputMeasureAndScrollToKeyboard`, we postpone scrolling to
                // text input.
                setTimeout(function() {
                    scrollTextInputIntoVisibleRect();
                }, 0);
            } else {
                scrollTextInputIntoVisibleRect();
            }
        }, _this._handleScroll = function(e) {
            var _class_private_field_loose_base__onScrollEmitter;
            _this._observedScrollSinceBecomingResponder = true;
            _this.props.onScroll && _this.props.onScroll(e);
            (_class_private_field_loose_base__onScrollEmitter = _class_private_field_loose_base._(_this, _onScrollEmitter)[_onScrollEmitter]) == null ? void 0 : _class_private_field_loose_base__onScrollEmitter.emit('scroll', {
                x: e.nativeEvent.contentOffset.x,
                y: e.nativeEvent.contentOffset.y
            });
        }, _this._handleLayout = function(e) {
            if (_this.props.invertStickyHeaders === true) {
                _this.setState({
                    layoutHeight: e.nativeEvent.layout.height
                });
            }
            if (_this.props.onLayout) {
                _this.props.onLayout(e);
            }
        }, _this._handleContentOnLayout = function(e) {
            var _e_nativeEvent_layout = e.nativeEvent.layout, width = _e_nativeEvent_layout.width, height = _e_nativeEvent_layout.height;
            _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
        }, _this._innerView = createRefForwarder(function(instance) {
            return instance;
        }), _this._scrollView = createRefForwarder(function(nativeImperativeHandle) {
            var nativeInstance = nativeImperativeHandle.componentRef.current;
            if (nativeInstance == null) {
                return null;
            }
            // This is a hack. Ideally we would forwardRef  to the underlying
            // host component. However, since ScrollView has it's own methods that can be
            // called as well, if we used the standard forwardRef then these
            // methods wouldn't be accessible and thus be a breaking change.
            //
            // Therefore we edit ref to include ScrollView's public methods so that
            // they are callable from the ref.
            // $FlowFixMe[prop-missing] - Known issue with appending custom methods.
            var publicInstance = Object.assign(nativeInstance, {
                getScrollResponder: _this.getScrollResponder,
                getScrollableNode: _this.getScrollableNode,
                getInnerViewNode: _this.getInnerViewNode,
                getInnerViewRef: _this.getInnerViewRef,
                getNativeScrollRef: _this.getNativeScrollRef,
                scrollTo: _this.scrollTo,
                scrollToEnd: _this.scrollToEnd,
                flashScrollIndicators: _this.flashScrollIndicators,
                scrollResponderZoomTo: _this.scrollResponderZoomTo,
                // TODO: Replace unstable_subscribeToOnScroll once scrollView.addEventListener('scroll', (e: ScrollEvent) => {}, {passive: false});
                unstable_subscribeToOnScroll: _this._subscribeToOnScroll,
                scrollResponderScrollNativeHandleToKeyboard: _this.scrollResponderScrollNativeHandleToKeyboard
            });
            return publicInstance;
        }), /**
   * Warning, this may be called several times for a single keyboard opening.
   * It's best to store the information in this method and then take any action
   * at a later point (either in `keyboardDidShow` or other).
   *
   * Here's the order that events occur in:
   * - focus
   * - willShow {startCoordinates, endCoordinates} several times
   * - didShow several times
   * - blur
   * - willHide {startCoordinates, endCoordinates} several times
   * - didHide several times
   *
   * The `ScrollResponder` module callbacks for each of these events.
   * Even though any user could have easily listened to keyboard events
   * themselves, using these `props` callbacks ensures that ordering of events
   * is consistent - and not dependent on the order that the keyboard events are
   * subscribed to. This matters when telling the scroll view to scroll to where
   * the keyboard is headed - the scroll responder better have been notified of
   * the keyboard destination before being instructed to scroll to where the
   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything
   * will work.
   *
   * WARNING: These callbacks will fire even if a keyboard is displayed in a
   * different navigation pane. Filter out the events to determine if they are
   * relevant to you. (For example, only if you receive these callbacks after
   * you had explicitly focused a node etc).
   */ _this.scrollResponderKeyboardWillShow = function(e) {
            _this._keyboardMetrics = e.endCoordinates;
            _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);
        }, _this.scrollResponderKeyboardWillHide = function(e) {
            _this._keyboardMetrics = null;
            _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);
        }, _this.scrollResponderKeyboardDidShow = function(e) {
            _this._keyboardMetrics = e.endCoordinates;
            _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);
        }, _this.scrollResponderKeyboardDidHide = function(e) {
            _this._keyboardMetrics = null;
            _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);
        }, /**
   * Invoke this from an `onMomentumScrollBegin` event.
   */ _this._handleMomentumScrollBegin = function(e) {
            _this._lastMomentumScrollBeginTime = __webpack_require__.g.performance.now();
            _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
        }, /**
   * Invoke this from an `onMomentumScrollEnd` event.
   */ _this._handleMomentumScrollEnd = function(e) {
            _FrameRateLogger.default.endScroll();
            _this._lastMomentumScrollEndTime = __webpack_require__.g.performance.now();
            _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
        }, /**
   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll
   * animation, and there's not an easy way to distinguish a drag vs. stopping
   * momentum.
   *
   * Invoke this from an `onScrollBeginDrag` event.
   */ _this._handleScrollBeginDrag = function(e) {
            _FrameRateLogger.default.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation
            if (_Platform.default.OS === 'android' && _this.props.keyboardDismissMode === 'on-drag') {
                (0, _dismissKeyboard.default)();
            }
            _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
        }, /**
   * Invoke this from an `onScrollEndDrag` event.
   */ _this._handleScrollEndDrag = function(e) {
            var velocity = e.nativeEvent.velocity;
            // - If we are animating, then this is a "drag" that is stopping the scrollview and momentum end
            //   will fire.
            // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or
            //   another drag starts and ends.
            // - If we don't get velocity, better to stop the interaction twice than not stop it.
            if (!_this._isAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
                _FrameRateLogger.default.endScroll();
            }
            _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
        }, /**
   * A helper function for this class that lets us quickly determine if the
   * view is currently animating. This is particularly useful to know when
   * a touch has just started or ended.
   */ _this._isAnimating = function() {
            var now = __webpack_require__.g.performance.now();
            var timeSinceLastMomentumScrollEnd = now - _this._lastMomentumScrollEndTime;
            var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || _this._lastMomentumScrollEndTime < _this._lastMomentumScrollBeginTime;
            return isAnimating;
        }, /**
   * Invoke this from an `onResponderGrant` event.
   */ _this._handleResponderGrant = function(e) {
            _this._observedScrollSinceBecomingResponder = false;
            _this.props.onResponderGrant && _this.props.onResponderGrant(e);
            _this._becameResponderWhileAnimating = _this._isAnimating();
        }, /**
   * Invoke this from an `onResponderReject` event.
   *
   * Some other element is not yielding its role as responder. Normally, we'd
   * just disable the `UIScrollView`, but a touch has already began on it, the
   * `UIScrollView` will not accept being disabled after that. The easiest
   * solution for now is to accept the limitation of disallowing this
   * altogether. To improve this, find a way to disable the `UIScrollView` after
   * a touch has already started.
   */ _this._handleResponderReject = function() {}, /**
   * Invoke this from an `onResponderRelease` event.
   */ _this._handleResponderRelease = function(e) {
            _this._isTouching = e.nativeEvent.touches.length !== 0;
            _this.props.onResponderRelease && _this.props.onResponderRelease(e);
            if (typeof e.target === 'number') {
                if (false) {}
                return;
            }
            // By default scroll views will unfocus a textField
            // if another touch occurs outside of it
            var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
            if (currentlyFocusedTextInput != null && _this.props.keyboardShouldPersistTaps !== true && _this.props.keyboardShouldPersistTaps !== 'always' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedTextInput && !_this._observedScrollSinceBecomingResponder && !_this._becameResponderWhileAnimating) {
                _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
            }
        }, /**
   * We will allow the scroll view to give up its lock iff it acquired the lock
   * during an animation. This is a very useful default that happens to satisfy
   * many common user experiences.
   *
   * - Stop a scroll on the left edge, then turn that into an outer view's
   *   backswipe.
   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer
   *   view dismiss.
   * - However, without catching the scroll view mid-bounce (while it is
   *   motionless), if you drag far enough for the scroll view to become
   *   responder (and therefore drag the scroll view a bit), any backswipe
   *   navigation of a swipe gesture higher in the view hierarchy, should be
   *   rejected.
   */ _this._handleResponderTerminationRequest = function() {
            return !_this._observedScrollSinceBecomingResponder;
        }, /**
   * Invoke this from an `onScroll` event.
   */ _this._handleScrollShouldSetResponder = function() {
            // Allow any event touch pass through if the default pan responder is disabled
            if (_this.props.disableScrollViewPanResponder === true) {
                return false;
            }
            return _this._isTouching;
        }, /**
   * Merely touch starting is not sufficient for a scroll view to become the
   * responder. Being the "responder" means that the very next touch move/end
   * event will result in an action/movement.
   *
   * Invoke this from an `onStartShouldSetResponder` event.
   *
   * `onStartShouldSetResponder` is used when the next move/end will trigger
   * some UI movement/action, but when you want to yield priority to views
   * nested inside of the view.
   *
   * There may be some cases where scroll views actually should return `true`
   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap
   * that gives priority to nested views.
   *
   * - If a single tap on the scroll view triggers an action such as
   *   recentering a map style view yet wants to give priority to interaction
   *   views inside (such as dropped pins or labels), then we would return true
   *   from this method when there is a single touch.
   *
   * - Similar to the previous case, if a two finger "tap" should trigger a
   *   zoom, we would check the `touches` count, and if `>= 2`, we would return
   *   true.
   *
   */ _this._handleStartShouldSetResponder = function(e) {
            // Allow any event touch pass through if the default pan responder is disabled
            if (_this.props.disableScrollViewPanResponder === true) {
                return false;
            }
            var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
            if (_this.props.keyboardShouldPersistTaps === 'handled' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedInput) {
                return true;
            }
            return false;
        }, /**
   * There are times when the scroll view wants to become the responder
   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way
   * that *doesn't* give priority to nested views (hence the capture phase):
   *
   * - Currently animating.
   * - Tapping anywhere that is not a text input, while the keyboard is
   *   up (which should dismiss the keyboard).
   *
   * Invoke this from an `onStartShouldSetResponderCapture` event.
   */ _this._handleStartShouldSetResponderCapture = function(e) {
            // The scroll view should receive taps instead of its descendants if:
            // * it is already animating/decelerating
            if (_this._isAnimating()) {
                return true;
            }
            // Allow any event touch pass through if the default pan responder is disabled
            if (_this.props.disableScrollViewPanResponder === true) {
                return false;
            }
            // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),
            // and a new touch starts with a non-textinput target (in which case the
            // first tap should be sent to the scroll view and dismiss the keyboard,
            // then the second tap goes to the actual interior view)
            var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
            var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
            if (typeof e.target === 'number') {
                if (false) {}
                return false;
            }
            // Let presses through if the soft keyboard is detached from the viewport
            if (_this._softKeyboardIsDetached()) {
                return false;
            }
            if (keyboardNeverPersistTaps && _this._keyboardIsDismissible() && e.target != null && // $FlowFixMe[incompatible-call]
            !_TextInputState.default.isTextInput(e.target)) {
                return true;
            }
            return false;
        }, /**
   * Do we consider there to be a dismissible soft-keyboard open?
   */ _this._keyboardIsDismissible = function() {
            var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
            // We cannot dismiss the keyboard without an input to blur, even if a soft
            // keyboard is open (e.g. when keyboard is open due to a native component
            // not participating in TextInputState). It's also possible that the
            // currently focused input isn't a TextInput (such as by calling ref.focus
            // on a non-TextInput).
            var hasFocusedTextInput = currentlyFocusedInput != null && _TextInputState.default.isTextInput(currentlyFocusedInput);
            // Even if an input is focused, we may not have a keyboard to dismiss. E.g
            // when using a physical keyboard. Ensure we have an event for an opened
            // keyboard.
            var softKeyboardMayBeOpen = _this._keyboardMetrics != null || _this._keyboardEventsAreUnreliable();
            return hasFocusedTextInput && softKeyboardMayBeOpen;
        }, /**
   * Whether an open soft keyboard is present which does not overlap the
   * viewport. E.g. for a VR soft-keyboard which is detached from the app
   * viewport.
   */ _this._softKeyboardIsDetached = function() {
            return _this._keyboardMetrics != null && _this._keyboardMetrics.height === 0;
        }, _this._keyboardEventsAreUnreliable = function() {
            // Android versions prior to API 30 rely on observing layout changes when
            // `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.
            return _Platform.default.OS === 'android' && _Platform.default.Version < 30;
        }, /**
   * Invoke this from an `onTouchEnd` event.
   *
   * @param {PressEvent} e Event.
   */ _this._handleTouchEnd = function(e) {
            var nativeEvent = e.nativeEvent;
            _this._isTouching = nativeEvent.touches.length !== 0;
            var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
            var keyboardNeverPersistsTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
            // Dismiss the keyboard now if we didn't become responder in capture phase
            // to eat presses, but still want to dismiss on interaction.
            // Don't do anything if the target of the touch event is the current input.
            var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
            if (currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && _this._softKeyboardIsDetached() && _this._keyboardIsDismissible() && keyboardNeverPersistsTaps) {
                _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
            }
            _this.props.onTouchEnd && _this.props.onTouchEnd(e);
        }, /**
   * Invoke this from an `onTouchCancel` event.
   *
   * @param {PressEvent} e Event.
   */ _this._handleTouchCancel = function(e) {
            _this._isTouching = false;
            _this.props.onTouchCancel && _this.props.onTouchCancel(e);
        }, /**
   * Invoke this from an `onTouchStart` event.
   *
   * Since we know that the `SimpleEventPlugin` occurs later in the plugin
   * order, after `ResponderEventPlugin`, we can detect that we were *not*
   * permitted to be the responder (presumably because a contained view became
   * responder). The `onResponderReject` won't fire in that case - it only
   * fires when a *current* responder rejects our request.
   *
   * @param {PressEvent} e Touch Start event.
   */ _this._handleTouchStart = function(e) {
            _this._isTouching = true;
            _this.props.onTouchStart && _this.props.onTouchStart(e);
        }, /**
   * Invoke this from an `onTouchMove` event.
   *
   * Since we know that the `SimpleEventPlugin` occurs later in the plugin
   * order, after `ResponderEventPlugin`, we can detect that we were *not*
   * permitted to be the responder (presumably because a contained view became
   * responder). The `onResponderReject` won't fire in that case - it only
   * fires when a *current* responder rejects our request.
   *
   * @param {PressEvent} e Touch Start event.
   */ _this._handleTouchMove = function(e) {
            _this.props.onTouchMove && _this.props.onTouchMove(e);
        };
        var _this_props_contentOffset_y;
        _this._scrollAnimatedValue = new _AnimatedImplementation.default.Value((_this_props_contentOffset_y = (_this_props_contentOffset = _this.props.contentOffset) == null ? void 0 : _this_props_contentOffset.y) != null ? _this_props_contentOffset_y : 0);
        var _this_props_contentInset_top;
        _this._scrollAnimatedValue.setOffset((_this_props_contentInset_top = (_this_props_contentInset = _this.props.contentInset) == null ? void 0 : _this_props_contentInset.top) != null ? _this_props_contentInset_top : 0);
        return _this;
    }
    var _proto = ScrollView.prototype;
    _proto.componentDidMount = function componentDidMount() {
        if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {
            console.warn("'keyboardShouldPersistTaps={" + (this.props.keyboardShouldPersistTaps === true ? 'true' : 'false') + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (this.props.keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
        }
        this._keyboardMetrics = _Keyboard.default.metrics();
        this._additionalScrollOffset = 0;
        this._subscriptionKeyboardWillShow = _Keyboard.default.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
        this._subscriptionKeyboardWillHide = _Keyboard.default.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
        this._subscriptionKeyboardDidShow = _Keyboard.default.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
        this._subscriptionKeyboardDidHide = _Keyboard.default.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
        this._updateAnimatedNodeAttachment();
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var prevContentInsetTop = prevProps.contentInset ? prevProps.contentInset.top : 0;
        var newContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
        if (prevContentInsetTop !== newContentInsetTop) {
            this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);
        }
        this._updateAnimatedNodeAttachment();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        var _class_private_field_loose_base__onScrollEmitter;
        if (this._subscriptionKeyboardWillShow != null) {
            this._subscriptionKeyboardWillShow.remove();
        }
        if (this._subscriptionKeyboardWillHide != null) {
            this._subscriptionKeyboardWillHide.remove();
        }
        if (this._subscriptionKeyboardDidShow != null) {
            this._subscriptionKeyboardDidShow.remove();
        }
        if (this._subscriptionKeyboardDidHide != null) {
            this._subscriptionKeyboardDidHide.remove();
        }
        if (this._scrollAnimatedValueAttachment) {
            this._scrollAnimatedValueAttachment.detach();
        }
        (_class_private_field_loose_base__onScrollEmitter = _class_private_field_loose_base._(this, _onScrollEmitter)[_onScrollEmitter]) == null ? void 0 : _class_private_field_loose_base__onScrollEmitter.removeAllListeners();
    };
    _proto._textInputFocusError = function _textInputFocusError() {
        console.warn('Error measuring text field.');
    };
    _proto._getKeyForIndex = function _getKeyForIndex(index, childArray) {
        var child = childArray[index];
        return child && child.key;
    };
    _proto._updateAnimatedNodeAttachment = function _updateAnimatedNodeAttachment() {
        if (this._scrollAnimatedValueAttachment) {
            this._scrollAnimatedValueAttachment.detach();
        }
        if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
            this._scrollAnimatedValueAttachment = _AnimatedImplementation.default.attachNativeEvent(this.getNativeScrollRef(), 'onScroll', [
                {
                    nativeEvent: {
                        contentOffset: {
                            y: this._scrollAnimatedValue
                        }
                    }
                }
            ]);
        }
    };
    _proto._setStickyHeaderRef = function _setStickyHeaderRef(key, ref) {
        if (ref) {
            this._stickyHeaderRefs.set(key, ref);
        } else {
            this._stickyHeaderRefs["delete"](key);
        }
    };
    _proto._onStickyHeaderLayout = function _onStickyHeaderLayout(index, event, key) {
        var stickyHeaderIndices = this.props.stickyHeaderIndices;
        if (!stickyHeaderIndices) {
            return;
        }
        var childArray = _react.Children.toArray(this.props.children);
        if (key !== this._getKeyForIndex(index, childArray)) {
            // ignore stale layout update
            return;
        }
        var layoutY = event.nativeEvent.layout.y;
        this._headerLayoutYs.set(key, layoutY);
        var indexOfIndex = stickyHeaderIndices.indexOf(index);
        var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];
        if (previousHeaderIndex != null) {
            var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));
            previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
        }
    };
    _proto.render = function render() {
        var _this = this;
        var horizontal = this.props.horizontal === true;
        var NativeScrollView = horizontal ? _HScrollViewNativeComponents.HScrollViewNativeComponent : _VScrollViewNativeComponents.VScrollViewNativeComponent;
        var NativeScrollContentView = horizontal ? _HScrollViewNativeComponents.HScrollContentViewNativeComponent : _VScrollViewNativeComponents.VScrollContentViewNativeComponent;
        var contentContainerStyle = [
            horizontal && styles.contentContainerHorizontal,
            this.props.contentContainerStyle
        ];
        if (false) { var childLayoutProps, style }
        var contentSizeChangeProps = this.props.onContentSizeChange == null ? null : {
            onLayout: this._handleContentOnLayout
        };
        var stickyHeaderIndices = this.props.stickyHeaderIndices;
        var children = this.props.children;
        /**
     * This function can cause unnecessary remount when nested in conditionals as it causes remap of children keys.
     * https://react.dev/reference/react/Children#children-toarray-caveats
     */ children = _react.Children.toArray(children);
        if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
            children = children.map(function(child, index) {
                var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
                if (indexOfIndex > -1) {
                    var key = child.key;
                    var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
                    var StickyHeaderComponent = _this.props.StickyHeaderComponent || _ScrollViewStickyHeader.default;
                    return /*#__PURE__*/ _react.createElement(StickyHeaderComponent, {
                        key: key,
                        ref: function(ref) {
                            return _this._setStickyHeaderRef(key, ref);
                        },
                        nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, children)),
                        onLayout: function(event) {
                            return _this._onStickyHeaderLayout(index, event, key);
                        },
                        scrollAnimatedValue: _this._scrollAnimatedValue,
                        inverted: _this.props.invertStickyHeaders,
                        hiddenOnScroll: _this.props.stickyHeaderHiddenOnScroll,
                        scrollViewHeight: _this.state.layoutHeight
                    }, child);
                } else {
                    return child;
                }
            });
        }
        children = /*#__PURE__*/ _react.createElement(_ScrollViewContext.default.Provider, {
            value: horizontal ? _ScrollViewContext.HORIZONTAL : _ScrollViewContext.VERTICAL
        }, children);
        var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
        // Some ScrollView native component behaviors rely on using the metrics
        // of mounted views for anchoring. Make sure not to flatten children if
        // this is the case.
        var preserveChildren = this.props.maintainVisibleContentPosition != null || _Platform.default.OS === 'android' && this.props.snapToAlignment != null;
        var contentContainer = /*#__PURE__*/ _react.createElement(NativeScrollContentView, _extends._({}, contentSizeChangeProps, {
            ref: this._innerView.getForwardingRef(this.props.innerViewRef),
            style: contentContainerStyle,
            removeClippedSubviews: // Subview clipping causes issues with sticky headers on Android and
            // would be hard to fix properly in a performant way.
            _Platform.default.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
            collapsable: false,
            collapsableChildren: !preserveChildren
        }), children);
        var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
        var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
        var baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;
        var _this_props = this.props, experimental_endDraggingSensitivityMultiplier = _this_props.experimental_endDraggingSensitivityMultiplier, otherProps = _object_without_properties_loose._(_this_props, [
            "experimental_endDraggingSensitivityMultiplier"
        ]);
        var props = _extends._({}, otherProps, {
            alwaysBounceHorizontal: alwaysBounceHorizontal,
            alwaysBounceVertical: alwaysBounceVertical,
            style: _StyleSheet.default.compose(baseStyle, this.props.style),
            // Override the onContentSizeChange from props, since this event can
            // bubble up from TextInputs
            onContentSizeChange: null,
            onLayout: this._handleLayout,
            onMomentumScrollBegin: this._handleMomentumScrollBegin,
            onMomentumScrollEnd: this._handleMomentumScrollEnd,
            onResponderGrant: this._handleResponderGrant,
            onResponderReject: this._handleResponderReject,
            onResponderRelease: this._handleResponderRelease,
            onResponderTerminationRequest: this._handleResponderTerminationRequest,
            onScrollBeginDrag: this._handleScrollBeginDrag,
            onScrollEndDrag: this._handleScrollEndDrag,
            onScrollShouldSetResponder: this._handleScrollShouldSetResponder,
            onStartShouldSetResponder: this._handleStartShouldSetResponder,
            onStartShouldSetResponderCapture: this._handleStartShouldSetResponderCapture,
            onTouchEnd: this._handleTouchEnd,
            onTouchMove: this._handleTouchMove,
            onTouchStart: this._handleTouchStart,
            onTouchCancel: this._handleTouchCancel,
            onScroll: this._handleScroll,
            endDraggingSensitivityMultiplier: experimental_endDraggingSensitivityMultiplier,
            scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
            sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
            // default to true
            snapToStart: this.props.snapToStart !== false,
            // default to true
            snapToEnd: this.props.snapToEnd !== false,
            // pagingEnabled is overridden by snapToInterval / snapToOffsets
            pagingEnabled: _Platform.default.select({
                // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work
                ios: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null,
                // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work
                android: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null
            })
        });
        var decelerationRate = this.props.decelerationRate;
        if (decelerationRate != null) {
            props.decelerationRate = (0, _processDecelerationRate.default)(decelerationRate);
        }
        var refreshControl = this.props.refreshControl;
        var scrollViewRef = this._scrollView.getForwardingRef(this.props.scrollViewRef);
        if (refreshControl) {
            if (_Platform.default.OS === 'ios') {
                // On iOS the RefreshControl is a child of the ScrollView.
                return(// $FlowFixMe[incompatible-type] - Flow only knows element refs.
                /*#__PURE__*/ _react.createElement(NativeScrollView, _extends._({}, props, {
                    ref: scrollViewRef
                }), refreshControl, contentContainer));
            } else if (_Platform.default.OS === 'android') {
                // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.
                // Since the ScrollView is wrapped add the style props to the
                // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.
                // Note: we should split props.style on the inner and outer props
                // however, the ScrollView still needs the baseStyle to be scrollable
                // $FlowFixMe[underconstrained-implicit-instantiation]
                // $FlowFixMe[incompatible-call]
                var _splitLayoutProps1 = (0, _splitLayoutProps.default)((0, _flattenStyle.default)(props.style)), outer = _splitLayoutProps1.outer, inner = _splitLayoutProps1.inner;
                return /*#__PURE__*/ _react.cloneElement(refreshControl, {
                    style: _StyleSheet.default.compose(baseStyle, outer)
                }, /*#__PURE__*/ _react.createElement(NativeScrollView, _extends._({}, props, {
                    style: _StyleSheet.default.compose(baseStyle, inner),
                    // $FlowFixMe[incompatible-type] - Flow only knows element refs.
                    ref: scrollViewRef
                }), contentContainer));
            }
        }
        return(// $FlowFixMe[incompatible-type] - Flow only knows element refs.
        /*#__PURE__*/ _react.createElement(NativeScrollView, _extends._({}, props, {
            ref: scrollViewRef
        }), contentContainer));
    };
    return ScrollView;
}(_react.Component);
ScrollView.Context = _ScrollViewContext.default;
var styles = _StyleSheet.default.create({
    baseVertical: {
        flexGrow: 1,
        flexShrink: 1,
        flexDirection: 'column',
        overflow: 'scroll'
    },
    baseHorizontal: {
        flexGrow: 1,
        flexShrink: 1,
        flexDirection: 'row',
        overflow: 'scroll'
    },
    contentContainerHorizontal: {
        flexDirection: 'row'
    }
});
/**
 * Helper function that should be replaced with `useCallback` and `useMergeRefs`
 * once `ScrollView` is reimplemented as a functional component.
 */ function createRefForwarder(mutator) {
    var state = {
        getForwardingRef: (0, _memoizeone.default)(function(forwardedRef) {
            return function(nativeInstance) {
                var publicInstance = nativeInstance == null ? null : mutator(nativeInstance);
                state.nativeInstance = nativeInstance;
                state.publicInstance = publicInstance;
                if (forwardedRef != null) {
                    if (typeof forwardedRef === 'function') {
                        forwardedRef(publicInstance);
                    } else {
                        forwardedRef.current = publicInstance;
                    }
                }
            };
        }),
        nativeInstance: null,
        publicInstance: null
    };
    return state;
}
// TODO: After upgrading to React 19, remove `forwardRef` from this component.
// NOTE: This wrapper component is necessary because `ScrollView` is a class
// component and we need to map `ref` to a differently named prop. This can be
// removed when `ScrollView` is a functional component.
var Wrapper = /*#__PURE__*/ _react.forwardRef(function Wrapper(props, ref) {
    return ref == null ? /*#__PURE__*/ _react.createElement(ScrollView, props) : /*#__PURE__*/ _react.createElement(ScrollView, _extends._({}, props, {
        scrollViewRef: ref
    }));
});
Wrapper.displayName = 'ScrollView';
// $FlowExpectedError[prop-missing]
Wrapper.Context = _ScrollViewContext.default;
module.exports = Wrapper;


}),
12682: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedTracking;
    }
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var AnimatedTracking = /*#__PURE__*/ function(AnimatedNode) {
    _inherits._(AnimatedTracking, AnimatedNode);
    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
        var _this;
        _this = AnimatedNode.call(this) || this;
        _this._value = value;
        _this._parent = parent;
        _this._animationClass = animationClass;
        _this._animationConfig = animationConfig;
        _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(animationConfig);
        _this._callback = callback;
        _this.__attach();
        return _this;
    }
    var _proto = AnimatedTracking.prototype;
    _proto.__makeNative = function __makeNative(platformConfig) {
        this.__isNative = true;
        this._parent.__makeNative(platformConfig);
        AnimatedNode.prototype.__makeNative.call(this, platformConfig);
        this._value.__makeNative(platformConfig);
    };
    _proto.__getValue = function __getValue() {
        return this._parent.__getValue();
    };
    _proto.__attach = function __attach() {
        this._parent.__addChild(this);
        if (this._useNativeDriver) {
            // when the tracking starts we need to convert this node to a "native node"
            // so that the parent node will be made "native" too. This is necessary as
            // if we don't do this `update` method will get called. At that point it
            // may be too late as it would mean the JS driver has already started
            // updating node values
            var platformConfig = this._animationConfig.platformConfig;
            this.__makeNative(platformConfig);
        }
    };
    _proto.__detach = function __detach() {
        this._parent.__removeChild(this);
        AnimatedNode.prototype.__detach.call(this);
    };
    _proto.update = function update() {
        this._value.animate(new this._animationClass(_extends._({}, this._animationConfig, {
            toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        var animation = new this._animationClass(_extends._({}, this._animationConfig, {
            // remove toValue from the config as it's a ref to Animated.Value
            toValue: undefined
        }));
        var animationConfig = animation.__getNativeAnimationConfig();
        return {
            type: 'tracking',
            animationId: _NativeAnimatedHelper.default.generateNewAnimationId(),
            animationConfig: animationConfig,
            toValue: this._parent.__getNativeTag(),
            value: this._value.__getNativeTag()
        };
    };
    return AnimatedTracking;
}(_AnimatedNode.default);


}),
13111: (function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ var ReactNativeFeatureFlags = {
    shouldEmitW3CPointerEvents: function() {
        return false;
    },
    shouldPressibilityUseW3CPointerEventsForHover: function() {
        return false;
    }
};
module.exports = ReactNativeFeatureFlags;


}),
13493: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useMergeRefs;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _to_consumable_array = __webpack_require__(8034);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
function useMergeRefs() {
    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){
        refs[_key] = arguments[_key];
    }
    return (0, _react.useCallback)(function(current) {
        for(var _i = 0; _i < refs.length; _i++){
            var ref = refs[_i];
            if (ref != null) {
                if (typeof ref === 'function') {
                    ref(current);
                } else {
                    ref.current = current;
                }
            }
        }
    }, _to_consumable_array._(refs));
}


}),
13852: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DecayAnimation;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _wrap_native_super = __webpack_require__(67381);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _Animation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56934));
var DecayAnimation = /*#__PURE__*/ function(Animation) {
    _inherits._(DecayAnimation, Animation);
    function DecayAnimation(config) {
        var _this;
        _this = Animation.call(this) || this;
        var _config_deceleration;
        _this._deceleration = (_config_deceleration = config.deceleration) != null ? _config_deceleration : 0.998;
        _this._velocity = config.velocity;
        _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
        _this._platformConfig = config.platformConfig;
        var _config_isInteraction;
        _this.__isInteraction = (_config_isInteraction = config.isInteraction) != null ? _config_isInteraction : !_this._useNativeDriver;
        var _config_iterations;
        _this.__iterations = (_config_iterations = config.iterations) != null ? _config_iterations : 1;
        return _this;
    }
    var _proto = DecayAnimation.prototype;
    _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
        return {
            type: 'decay',
            deceleration: this._deceleration,
            velocity: this._velocity,
            iterations: this.__iterations,
            platformConfig: this._platformConfig
        };
    };
    _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();
        if (!this._useNativeDriver && animatedValue.__isNative === true) {
            throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
        }
        if (this._useNativeDriver) {
            this.__startNativeAnimation(animatedValue);
        } else {
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
    };
    _proto.onUpdate = function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));
        this._onUpdate(value);
        if (Math.abs(this._lastValue - value) < 0.1) {
            this.__debouncedOnEnd({
                finished: true
            });
            return;
        }
        this._lastValue = value;
        if (this.__active) {
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
    };
    _proto.stop = function stop() {
        Animation.prototype.stop.call(this);
        this.__active = false;
        __webpack_require__.g.cancelAnimationFrame(this._animationFrame);
        this.__debouncedOnEnd({
            finished: false
        });
    };
    return DecayAnimation;
}(_wrap_native_super._(_Animation.default));


}),
13972: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _RCTModalHostViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(40812), exports));
var _default = _RCTModalHostViewNativeComponent.default;


}),
14295: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _to_consumable_array = __webpack_require__(8034);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(26044));
__webpack_require__(11418);
var _virtualizedlists = __webpack_require__(83712);
var _memoizeone = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47459));
var View = __webpack_require__(8198);
var StyleSheet = __webpack_require__(91145);
var deepDiffer = __webpack_require__(27254);
var Platform = __webpack_require__(29861);
var invariant = __webpack_require__(27761);
var React = __webpack_require__(41845);
/**
 * Default Props Helper Functions
 * Use the following helper functions for default values
 */ // removeClippedSubviewsOrDefault(this.props.removeClippedSubviews)
function removeClippedSubviewsOrDefault(removeClippedSubviews) {
    if (_ReactNativeFeatureFlags.shouldUseRemoveClippedSubviewsAsDefaultOnIOS()) {
        return removeClippedSubviews != null ? removeClippedSubviews : true;
    } else {
        return removeClippedSubviews != null ? removeClippedSubviews : Platform.OS === 'android';
    }
}
// numColumnsOrDefault(this.props.numColumns)
function numColumnsOrDefault(numColumns) {
    return numColumns != null ? numColumns : 1;
}
function isArrayLike(data) {
    // $FlowExpectedError[incompatible-use]
    return typeof Object(data).length === 'number';
}
/**
 * A performant interface for rendering simple, flat lists, supporting the most handy features:
 *
 *  - Fully cross-platform.
 *  - Optional horizontal mode.
 *  - Configurable viewability callbacks.
 *  - Header support.
 *  - Footer support.
 *  - Separator support.
 *  - Pull to Refresh.
 *  - Scroll loading.
 *  - ScrollToIndex support.
 *
 * If you need section support, use [`<SectionList>`](docs/sectionlist.html).
 *
 * Minimal Example:
 *
 *     <FlatList
 *       data={[{key: 'a'}, {key: 'b'}]}
 *       renderItem={({item}) => <Text>{item.key}</Text>}
 *     />
 *
 * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.
 *
 * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will
 *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even
 *   if the components rendered in `MyListItem` did not have such optimizations.
 * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render
 *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it
 *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will
 *   not show any changes.
 * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.
 *
 *
 *     class MyListItem extends React.PureComponent {
 *       _onPress = () => {
 *         this.props.onPressItem(this.props.id);
 *       };
 *
 *       render() {
 *         const textColor = this.props.selected ? "red" : "black";
 *         return (
 *           <TouchableOpacity onPress={this._onPress}>
 *             <View>
 *               <Text style={{ color: textColor }}>
 *                 {this.props.title}
 *               </Text>
 *             </View>
 *           </TouchableOpacity>
 *         );
 *       }
 *     }
 *
 *     class MultiSelectList extends React.PureComponent {
 *       state = {selected: (new Map(): Map<string, boolean>)};
 *
 *       _keyExtractor = (item, index) => item.id;
 *
 *       _onPressItem = (id: string) => {
 *         // updater functions are preferred for transactional updates
 *         this.setState((state) => {
 *           // copy the map rather than modifying state.
 *           const selected = new Map(state.selected);
 *           selected.set(id, !selected.get(id)); // toggle
 *           return {selected};
 *         });
 *       };
 *
 *       _renderItem = ({item}) => (
 *         <MyListItem
 *           id={item.id}
 *           onPressItem={this._onPressItem}
 *           selected={!!this.state.selected.get(item.id)}
 *           title={item.title}
 *         />
 *       );
 *
 *       render() {
 *         return (
 *           <FlatList
 *             data={this.props.data}
 *             extraData={this.state}
 *             keyExtractor={this._keyExtractor}
 *             renderItem={this._renderItem}
 *           />
 *         );
 *       }
 *     }
 *
 * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),
 * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed
 * here, along with the following caveats:
 *
 * - Internal state is not preserved when content scrolls out of the render window. Make sure all
 *   your data is captured in the item data or external stores like Flux, Redux, or Relay.
 * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-
 *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop
 *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on
 *   changes. This includes the `data` prop and parent component state.
 * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously
 *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see
 *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,
 *   and we are working on improving it behind the scenes.
 * - By default, the list looks for a `key` prop on each item and uses that for the React key.
 *   Alternatively, you can provide a custom `keyExtractor` prop.
 *
 * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.
 */ var FlatList = /*#__PURE__*/ function(_React_PureComponent) {
    "use strict";
    _inherits._(FlatList, _React_PureComponent);
    function FlatList(props) {
        var _this;
        _this = _React_PureComponent.call(this, props) || this, _this._virtualizedListPairs = [], _this._captureRef = function(ref) {
            _this._listRef = ref;
        }, _this._getItem = function(data, index) {
            var numColumns = numColumnsOrDefault(_this.props.numColumns);
            if (numColumns > 1) {
                var ret = [];
                for(var kk = 0; kk < numColumns; kk++){
                    var itemIndex = index * numColumns + kk;
                    if (itemIndex < data.length) {
                        var item = data[itemIndex];
                        ret.push(item);
                    }
                }
                return ret;
            } else {
                return data[index];
            }
        }, _this._getItemCount = function(data) {
            // Legacy behavior of FlatList was to forward "undefined" length if invalid
            // data like a non-arraylike object is passed. VirtualizedList would then
            // coerce this, and the math would work out to no-op. For compatibility, if
            // invalid data is passed, we tell VirtualizedList there are zero items
            // available to prevent it from trying to read from the invalid data
            // (without propagating invalidly typed data).
            if (data != null && isArrayLike(data)) {
                var numColumns = numColumnsOrDefault(_this.props.numColumns);
                return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;
            } else {
                return 0;
            }
        }, _this._keyExtractor = function(items, index) {
            var numColumns = numColumnsOrDefault(_this.props.numColumns);
            var _this_props_keyExtractor;
            var keyExtractor = (_this_props_keyExtractor = _this.props.keyExtractor) != null ? _this_props_keyExtractor : _virtualizedlists.keyExtractor;
            if (numColumns > 1) {
                invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
                return items.map(function(item, kk) {
                    return keyExtractor(item, index * numColumns + kk);
                }).join(':');
            }
            // $FlowFixMe[incompatible-call] Can't call keyExtractor with an array
            return keyExtractor(items, index);
        }, _this._renderer = function(ListItemComponent, renderItem, columnWrapperStyle, numColumns, extraData) {
            var cols = numColumnsOrDefault(numColumns);
            var render = function(props) {
                if (ListItemComponent) {
                    // $FlowFixMe[not-a-component] Component isn't valid
                    // $FlowFixMe[incompatible-type-arg] Component isn't valid
                    // $FlowFixMe[incompatible-return] Component isn't valid
                    return /*#__PURE__*/ React.createElement(ListItemComponent, props);
                } else if (renderItem) {
                    // $FlowFixMe[incompatible-call]
                    return renderItem(props);
                } else {
                    return null;
                }
            };
            var renderProp = function(info) {
                if (cols > 1) {
                    var item = info.item, index = info.index;
                    invariant(Array.isArray(item), 'Expected array of items with numColumns > 1');
                    return /*#__PURE__*/ React.createElement(View, {
                        style: StyleSheet.compose(styles.row, columnWrapperStyle)
                    }, item.map(function(it, kk) {
                        var element = render({
                            // $FlowFixMe[incompatible-call]
                            item: it,
                            index: index * cols + kk,
                            separators: info.separators
                        });
                        return element != null ? /*#__PURE__*/ React.createElement(React.Fragment, {
                            key: kk
                        }, element) : null;
                    }));
                } else {
                    return render(info);
                }
            };
            return ListItemComponent ? {
                ListItemComponent: renderProp
            } : {
                renderItem: renderProp
            };
        }, // $FlowFixMe[missing-local-annot]
        _this._memoizedRenderer = (0, _memoizeone.default)(_this._renderer);
        _this._checkProps(_this.props);
        if (_this.props.viewabilityConfigCallbackPairs) {
            _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function(pair) {
                return {
                    viewabilityConfig: pair.viewabilityConfig,
                    onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
                };
            });
        } else if (_this.props.onViewableItemsChanged) {
            _this._virtualizedListPairs.push({
                /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.63 was deployed. To
         * see the error delete this comment and run Flow. */ viewabilityConfig: _this.props.viewabilityConfig,
                onViewableItemsChanged: _this._createOnViewableItemsChanged(// NOTE: we use a wrapper function to allow the actual callback to change
                // while still keeping the function provided to native to be stable
                function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    var _this_props;
                    invariant(_this.props.onViewableItemsChanged, 'Changing the nullability of onViewableItemsChanged is not supported. ' + 'Once a function or null is supplied that cannot be changed.');
                    return (_this_props = _this.props).onViewableItemsChanged.apply(_this_props, _to_consumable_array._(args));
                })
            });
        }
        return _this;
    }
    var _proto = FlatList.prototype;
    /**
   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.
   */ _proto.scrollToEnd = function scrollToEnd(params) {
        if (this._listRef) {
            this._listRef.scrollToEnd(params);
        }
    };
    /**
   * Scrolls to the item at the specified index such that it is positioned in the viewable area
   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the
   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */ _proto.scrollToIndex = function scrollToIndex(params) {
        if (this._listRef) {
            this._listRef.scrollToIndex(params);
        }
    };
    /**
   * Requires linear scan through data - use `scrollToIndex` instead if possible.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */ _proto.scrollToItem = function scrollToItem(params) {
        if (this._listRef) {
            this._listRef.scrollToItem(params);
        }
    };
    /**
   * Scroll to a specific content pixel offset in the list.
   *
   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList
   */ _proto.scrollToOffset = function scrollToOffset(params) {
        if (this._listRef) {
            this._listRef.scrollToOffset(params);
        }
    };
    /**
   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.
   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
   * taps on items or by navigation actions.
   */ _proto.recordInteraction = function recordInteraction() {
        if (this._listRef) {
            this._listRef.recordInteraction();
        }
    };
    /**
   * Displays the scroll indicators momentarily.
   *
   * @platform ios
   */ _proto.flashScrollIndicators = function flashScrollIndicators() {
        if (this._listRef) {
            this._listRef.flashScrollIndicators();
        }
    };
    /**
   * Provides a handle to the underlying scroll responder.
   */ _proto.getScrollResponder = function getScrollResponder() {
        if (this._listRef) {
            return this._listRef.getScrollResponder();
        }
    };
    /**
   * Provides a reference to the underlying host component
   */ _proto.getNativeScrollRef = function getNativeScrollRef() {
        if (this._listRef) {
            /* $FlowFixMe[incompatible-return] Suppresses errors found when fixing
       * TextInput typing */ return this._listRef.getScrollRef();
        }
    };
    _proto.getScrollableNode = function getScrollableNode() {
        if (this._listRef) {
            return this._listRef.getScrollableNode();
        }
    };
    _proto.setNativeProps = function setNativeProps(props) {
        if (this._listRef) {
            this._listRef.setNativeProps(props);
        }
    };
    // $FlowFixMe[missing-local-annot]
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        invariant(prevProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
        invariant(prevProps.onViewableItemsChanged == null === (this.props.onViewableItemsChanged == null), 'Changing onViewableItemsChanged nullability on the fly is not supported');
        invariant(!deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');
        invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');
        this._checkProps(this.props);
    };
    // $FlowFixMe[missing-local-annot]
    _proto._checkProps = function _checkProps(props) {
        var // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant
        getItem = props.getItem, // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant
        getItemCount = props.getItemCount, horizontal = props.horizontal, columnWrapperStyle = props.columnWrapperStyle, onViewableItemsChanged = props.onViewableItemsChanged, viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        var numColumns = numColumnsOrDefault(this.props.numColumns);
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');
        if (numColumns > 1) {
            invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
            invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }
        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');
    };
    _proto._pushMultiColumnViewable = function _pushMultiColumnViewable(arr, v) {
        var numColumns = numColumnsOrDefault(this.props.numColumns);
        var _this_props_keyExtractor;
        var keyExtractor = (_this_props_keyExtractor = this.props.keyExtractor) != null ? _this_props_keyExtractor : _virtualizedlists.keyExtractor;
        v.item.forEach(function(item, ii) {
            invariant(v.index != null, 'Missing index!');
            var index = v.index * numColumns + ii;
            arr.push(_extends._({}, v, {
                item: item,
                key: keyExtractor(item, index),
                index: index
            }));
        });
    };
    _proto._createOnViewableItemsChanged = function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this = this;
        return function(info) {
            var numColumns = numColumnsOrDefault(_this.props.numColumns);
            if (onViewableItemsChanged) {
                if (numColumns > 1) {
                    var changed = [];
                    var viewableItems = [];
                    info.viewableItems.forEach(function(v) {
                        return _this._pushMultiColumnViewable(viewableItems, v);
                    });
                    info.changed.forEach(function(v) {
                        return _this._pushMultiColumnViewable(changed, v);
                    });
                    onViewableItemsChanged({
                        viewableItems: viewableItems,
                        changed: changed
                    });
                } else {
                    onViewableItemsChanged(info);
                }
            }
        };
    };
    _proto.render = function render() {
        var _this_props = this.props, numColumns = _this_props.numColumns, columnWrapperStyle = _this_props.columnWrapperStyle, _removeClippedSubviews = _this_props.removeClippedSubviews, _this_props_strictMode = _this_props.strictMode, strictMode = _this_props_strictMode === void 0 ? false : _this_props_strictMode, restProps = _object_without_properties_loose._(_this_props, [
            "numColumns",
            "columnWrapperStyle",
            "removeClippedSubviews",
            "strictMode"
        ]);
        var renderer = strictMode ? this._memoizedRenderer : this._renderer;
        return(// $FlowFixMe[incompatible-exact] - `restProps` (`Props`) is inexact.
        /*#__PURE__*/ React.createElement(_virtualizedlists.VirtualizedList, _extends._({}, restProps, {
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs,
            removeClippedSubviews: removeClippedSubviewsOrDefault(_removeClippedSubviews)
        }, renderer(this.props.ListItemComponent, this.props.renderItem, columnWrapperStyle, numColumns, this.props.extraData))));
    };
    return FlatList;
}(React.PureComponent);
var styles = StyleSheet.create({
    row: {
        flexDirection: 'row'
    }
});
module.exports = FlatList;


}),
15794: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var _default = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'flashScrollIndicators',
        'scrollTo',
        'scrollToEnd',
        'zoomToRect'
    ]
});


}),
1625: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
__webpack_require__(83712);
var VirtualizedList = (__webpack_require__(83712)/* .VirtualizedList */.VirtualizedList);
module.exports = VirtualizedList;


}),
17255: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedDiffClamp;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79333));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var AnimatedDiffClamp = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedDiffClamp, AnimatedWithChildren);
    function AnimatedDiffClamp(a, min, max) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this;
        _this._a = a;
        _this._min = min;
        _this._max = max;
        _this._value = _this._lastValue = _this._a.__getValue();
        return _this;
    }
    var _proto = AnimatedDiffClamp.prototype;
    _proto.__makeNative = function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.interpolate = function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
    };
    _proto.__getValue = function __getValue() {
        var value = this._a.__getValue();
        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
    };
    _proto.__attach = function __attach() {
        this._a.__addChild(this);
    };
    _proto.__detach = function __detach() {
        this._a.__removeChild(this);
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        return {
            type: 'diffclamp',
            input: this._a.__getNativeTag(),
            min: this._min,
            max: this._max
        };
    };
    return AnimatedDiffClamp;
}(_AnimatedWithChildren.default);


}),
17444: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18504));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93671));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var _default = (0, _createAnimatedComponent.default)(_Text.default);


}),
17664: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeClipboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(78366));
/**
 * `Clipboard` gives you an interface for setting and getting content from Clipboard on both iOS and Android
 */ module.exports = {
    /**
   * Get content of string type, this method returns a `Promise`, so you can use following code to get clipboard content
   * ```javascript
   * async _getContent() {
   *   var content = await Clipboard.getString();
   * }
   * ```
   */ getString: function() {
        return _NativeClipboard.default.getString();
    },
    /**
   * Set content of string type. You can use following code to set clipboard content
   * ```javascript
   * _setContent() {
   *   Clipboard.setString('hello world');
   * }
   * ```
   * @param {string} content the content to be stored in the clipboard.
   */ setString: function(content) {
        _NativeClipboard.default.setString(content);
    }
};


}),
18002: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(38504);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(68493));
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTScrollContentView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {}
};
var ScrollContentViewNativeComponent = _NativeComponentRegistry.get('RCTScrollContentView', function() {
    return __INTERNAL_VIEW_CONFIG;
});
var _default = ScrollContentViewNativeComponent;


}),
18088: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(37297);
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _ts_generator = __webpack_require__(63563);
var _LayoutAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45519));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Dimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7139));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
__webpack_require__(74765);
var _AccessibilityInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27221));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _Keyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29723));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * View that moves out of the way when the keyboard appears by automatically
 * adjusting its height, position, or bottom padding.
 */ var KeyboardAvoidingView = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(KeyboardAvoidingView, _React_Component);
    function KeyboardAvoidingView(props) {
        var _this;
        var _this1;
        _this = _React_Component.call(this, props) || this, _this1 = _this, _this1._frame = null, _this1._keyboardEvent = null, _this1._subscriptions = [], _this1._initialFrameHeight = 0, _this1._bottom = 0, _this1._windowWidth = _Dimensions.default.get('window').width, _this1._onKeyboardChange = function(event) {
            _this1._keyboardEvent = event;
            // $FlowFixMe[unused-promise]
            _this1._updateBottomIfNecessary();
        }, _this1._onLayout = function(event) {
            return _async_to_generator._(function() {
                var oldFrame;
                return _ts_generator._(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            oldFrame = _this1._frame;
                            _this1._frame = event.nativeEvent.layout;
                            if (!_this1._initialFrameHeight) {
                                // save the initial frame height, before the keyboard is visible
                                _this1._initialFrameHeight = _this1._frame.height;
                            }
                            if (!(!oldFrame || oldFrame.height !== _this1._frame.height)) return [
                                3,
                                2
                            ];
                            return [
                                4,
                                _this1._updateBottomIfNecessary()
                            ];
                        case 1:
                            _state.sent();
                            _state.label = 2;
                        case 2:
                            if (_this1.props.onLayout) {
                                _this1.props.onLayout(event);
                            }
                            return [
                                2
                            ];
                    }
                });
            })();
        }, _this1._onDimensionsChange = function(param) {
            var window = param.window;
            var _window_width;
            _this1._windowWidth = (_window_width = window == null ? void 0 : window.width) != null ? _window_width : 0;
        }, // Avoid unnecessary renders if the KeyboardAvoidingView is disabled.
        _this1._setBottom = function(value) {
            var _this_props_enabled;
            var enabled = (_this_props_enabled = _this1.props.enabled) != null ? _this_props_enabled : true;
            _this1._bottom = value;
            if (enabled) {
                _this1.setState({
                    bottom: value
                });
            }
        }, _this1._updateBottomIfNecessary = function() {
            return _async_to_generator._(function() {
                var _this__keyboardEvent, duration, easing, endCoordinates, height, _this_props_enabled, enabled;
                return _ts_generator._(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            if (_this1._keyboardEvent == null) {
                                _this1._setBottom(0);
                                return [
                                    2
                                ];
                            }
                            if (_Platform.default.OS === 'ios' && _this1._windowWidth !== _this1._keyboardEvent.endCoordinates.width) {
                                // The keyboard is not the standard bottom-of-the-screen keyboard. For example, floating keyboard on iPadOS.
                                _this1._setBottom(0);
                                return [
                                    2
                                ];
                            }
                            _this__keyboardEvent = _this1._keyboardEvent, duration = _this__keyboardEvent.duration, easing = _this__keyboardEvent.easing, endCoordinates = _this__keyboardEvent.endCoordinates;
                            return [
                                4,
                                _this1._relativeKeyboardHeight(endCoordinates)
                            ];
                        case 1:
                            height = _state.sent();
                            if (_this1._bottom === height) {
                                return [
                                    2
                                ];
                            }
                            _this1._setBottom(height);
                            enabled = (_this_props_enabled = _this1.props.enabled) != null ? _this_props_enabled : true;
                            if (enabled && duration && easing) {
                                _LayoutAnimation.default.configureNext({
                                    // We have to pass the duration equal to minimal accepted duration defined here: RCTLayoutAnimation.m
                                    duration: duration > 10 ? duration : 10,
                                    update: {
                                        duration: duration > 10 ? duration : 10,
                                        type: _LayoutAnimation.default.Types[easing] || 'keyboard'
                                    }
                                });
                            }
                            return [
                                2
                            ];
                    }
                });
            })();
        };
        _this1.state = {
            bottom: 0
        };
        _this1.viewRef = /*#__PURE__*/ _react.createRef();
        return _this;
    }
    var _proto = KeyboardAvoidingView.prototype;
    _proto._relativeKeyboardHeight = function _relativeKeyboardHeight(keyboardFrame) {
        return _async_to_generator._(function() {
            var frame, _tmp, _this_props_keyboardVerticalOffset, keyboardY;
            return _ts_generator._(this, function(_state) {
                switch(_state.label){
                    case 0:
                        frame = this._frame;
                        if (!frame || !keyboardFrame) {
                            return [
                                2,
                                0
                            ];
                        }
                        _tmp = _Platform.default.OS === 'ios' && keyboardFrame.screenY === 0;
                        if (!_tmp) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            _AccessibilityInfo.default.prefersCrossFadeTransitions()
                        ];
                    case 1:
                        _tmp = _state.sent();
                        _state.label = 2;
                    case 2:
                        // On iOS when Prefer Cross-Fade Transitions is enabled, the keyboard position
                        // & height is reported differently (0 instead of Y position value matching height of frame)
                        if (_tmp) {
                            return [
                                2,
                                0
                            ];
                        }
                        keyboardY = keyboardFrame.screenY - ((_this_props_keyboardVerticalOffset = this.props.keyboardVerticalOffset) != null ? _this_props_keyboardVerticalOffset : 0);
                        if (this.props.behavior === 'height') {
                            return [
                                2,
                                Math.max(this.state.bottom + frame.y + frame.height - keyboardY, 0)
                            ];
                        }
                        // Calculate the displacement needed for the view such that it
                        // no longer overlaps with the keyboard
                        return [
                            2,
                            Math.max(frame.y + frame.height - keyboardY, 0)
                        ];
                }
            });
        }).call(this);
    };
    _proto.componentDidUpdate = function componentDidUpdate(_, prevState) {
        var _this_props_enabled;
        var enabled = (_this_props_enabled = this.props.enabled) != null ? _this_props_enabled : true;
        if (enabled && this._bottom !== prevState.bottom) {
            this.setState({
                bottom: this._bottom
            });
        }
    };
    _proto.componentDidMount = function componentDidMount() {
        if (_Platform.default.OS === 'ios') {
            this._subscriptions = [
                _Keyboard.default.addListener('keyboardWillChangeFrame', this._onKeyboardChange),
                _Dimensions.default.addEventListener('change', this._onDimensionsChange)
            ];
        } else {
            this._subscriptions = [
                _Keyboard.default.addListener('keyboardDidHide', this._onKeyboardChange),
                _Keyboard.default.addListener('keyboardDidShow', this._onKeyboardChange)
            ];
        }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this._subscriptions.forEach(function(subscription) {
            subscription.remove();
        });
    };
    _proto.render = function render() {
        var _this_props = this.props, behavior = _this_props.behavior, children = _this_props.children, contentContainerStyle = _this_props.contentContainerStyle, _this_props_enabled = _this_props.enabled, enabled = _this_props_enabled === void 0 ? true : _this_props_enabled, _this_props_keyboardVerticalOffset = _this_props.// eslint-disable-next-line no-unused-vars
        keyboardVerticalOffset, keyboardVerticalOffset = _this_props_keyboardVerticalOffset === void 0 ? 0 : _this_props_keyboardVerticalOffset, style = _this_props.style, onLayout = _this_props.onLayout, props = _object_without_properties_loose._(_this_props, [
            "behavior",
            "children",
            "contentContainerStyle",
            "enabled",
            "keyboardVerticalOffset",
            "style",
            "onLayout"
        ]);
        var bottomHeight = enabled === true ? this.state.bottom : 0;
        switch(behavior){
            case 'height':
                var heightStyle;
                if (this._frame != null && this.state.bottom > 0) {
                    // Note that we only apply a height change when there is keyboard present,
                    // i.e. this.state.bottom is greater than 0. If we remove that condition,
                    // this.frame.height will never go back to its original value.
                    // When height changes, we need to disable flex.
                    heightStyle = {
                        height: this._initialFrameHeight - bottomHeight,
                        flex: 0
                    };
                }
                return /*#__PURE__*/ _react.createElement(_View.default, _extends._({
                    ref: this.viewRef,
                    style: _StyleSheet.default.compose(style, heightStyle),
                    onLayout: this._onLayout
                }, props), children);
            case 'position':
                return /*#__PURE__*/ _react.createElement(_View.default, _extends._({
                    ref: this.viewRef,
                    style: style,
                    onLayout: this._onLayout
                }, props), /*#__PURE__*/ _react.createElement(_View.default, {
                    style: _StyleSheet.default.compose(contentContainerStyle, {
                        bottom: bottomHeight
                    })
                }, children));
            case 'padding':
                return /*#__PURE__*/ _react.createElement(_View.default, _extends._({
                    ref: this.viewRef,
                    style: _StyleSheet.default.compose(style, {
                        paddingBottom: bottomHeight
                    }),
                    onLayout: this._onLayout
                }, props), children);
            default:
                return /*#__PURE__*/ _react.createElement(_View.default, _extends._({
                    ref: this.viewRef,
                    onLayout: this._onLayout,
                    style: style
                }, props), children);
        }
    };
    return KeyboardAvoidingView;
}(_react.Component);
var _default = KeyboardAvoidingView;


}),
18504: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _sliced_to_array = __webpack_require__(21193);
var _type_of = __webpack_require__(29936);
var _PressabilityDebug = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(9966));
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76990));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79250));
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83900));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85511));
var _TextNativeComponent = __webpack_require__(64076);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * Text is the fundamental component for displaying text.
 *
 * @see https://reactnative.dev/docs/text
 */ var Text = /*#__PURE__*/ _react.forwardRef(function(_param, forwardedRef) {
    var accessible = _param.accessible, accessibilityLabel = _param.accessibilityLabel, accessibilityState = _param.accessibilityState, allowFontScaling = _param.allowFontScaling, ariaBusy = _param['aria-busy'], ariaChecked = _param['aria-checked'], ariaDisabled = _param['aria-disabled'], ariaExpanded = _param['aria-expanded'], ariaLabel = _param['aria-label'], ariaSelected = _param['aria-selected'], children = _param.children, ellipsizeMode = _param.ellipsizeMode, disabled = _param.disabled, id = _param.id, nativeID = _param.nativeID, numberOfLines = _param.numberOfLines, onLongPress = _param.onLongPress, onPress = _param.onPress, onPressIn = _param.onPressIn, onPressOut = _param.onPressOut, onResponderGrant = _param.onResponderGrant, onResponderMove = _param.onResponderMove, onResponderRelease = _param.onResponderRelease, onResponderTerminate = _param.onResponderTerminate, onResponderTerminationRequest = _param.onResponderTerminationRequest, onStartShouldSetResponder = _param.onStartShouldSetResponder, pressRetentionOffset = _param.pressRetentionOffset, selectable = _param.selectable, selectionColor = _param.selectionColor, suppressHighlighting = _param.suppressHighlighting, style = _param.style, restProps = _object_without_properties_loose._(_param, [
        "accessible",
        "accessibilityLabel",
        "accessibilityState",
        "allowFontScaling",
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-label',
        'aria-selected',
        "children",
        "ellipsizeMode",
        "disabled",
        "id",
        "nativeID",
        "numberOfLines",
        "onLongPress",
        "onPress",
        "onPressIn",
        "onPressOut",
        "onResponderGrant",
        "onResponderMove",
        "onResponderRelease",
        "onResponderTerminate",
        "onResponderTerminationRequest",
        "onStartShouldSetResponder",
        "pressRetentionOffset",
        "selectable",
        "selectionColor",
        "suppressHighlighting",
        "style"
    ]);
    var _accessibilityLabel = ariaLabel != null ? ariaLabel : accessibilityLabel;
    var _accessibilityState = accessibilityState;
    if (ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
        if (_accessibilityState != null) {
            _accessibilityState = {
                busy: ariaBusy != null ? ariaBusy : _accessibilityState.busy,
                checked: ariaChecked != null ? ariaChecked : _accessibilityState.checked,
                disabled: ariaDisabled != null ? ariaDisabled : _accessibilityState.disabled,
                expanded: ariaExpanded != null ? ariaExpanded : _accessibilityState.expanded,
                selected: ariaSelected != null ? ariaSelected : _accessibilityState.selected
            };
        } else {
            _accessibilityState = {
                busy: ariaBusy,
                checked: ariaChecked,
                disabled: ariaDisabled,
                expanded: ariaExpanded,
                selected: ariaSelected
            };
        }
    }
    var _accessibilityStateDisabled = _accessibilityState == null ? void 0 : _accessibilityState.disabled;
    var _disabled = disabled != null ? disabled : _accessibilityStateDisabled;
    var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;
    // TODO: Move this processing to the view configuration.
    var _selectionColor = selectionColor == null ? null : (0, _processColor.default)(selectionColor);
    var _style = style;
    if (false) {}
    var _numberOfLines = numberOfLines;
    if (_numberOfLines != null && !(_numberOfLines >= 0)) {
        if (false) {}
        _numberOfLines = 0;
    }
    var _selectable = selectable;
    var processedStyle = (0, _flattenStyle.default)(_style);
    if (processedStyle != null) {
        var overrides = null;
        if (typeof processedStyle.fontWeight === 'number') {
            overrides = overrides || {};
            overrides.fontWeight = // $FlowFixMe[incompatible-cast]
            processedStyle.fontWeight.toString();
        }
        if (processedStyle.userSelect != null) {
            _selectable = userSelectToSelectableMap[processedStyle.userSelect];
            overrides = overrides || {};
            overrides.userSelect = undefined;
        }
        if (processedStyle.verticalAlign != null) {
            overrides = overrides || {};
            overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[processedStyle.verticalAlign];
            overrides.verticalAlign = undefined;
        }
        if (overrides != null) {
            // $FlowFixMe[incompatible-type]
            _style = [
                _style,
                overrides
            ];
        }
    }
    var _nativeID = id != null ? id : nativeID;
    var hasTextAncestor = (0, _react.useContext)(_TextAncestor.default);
    if (hasTextAncestor) {
        if (isPressable) {
            return /*#__PURE__*/ _react.createElement(NativePressableVirtualText, {
                ref: forwardedRef,
                textProps: _extends._({}, restProps, {
                    accessibilityLabel: _accessibilityLabel,
                    accessibilityState: _accessibilityState,
                    nativeID: _nativeID,
                    numberOfLines: _numberOfLines,
                    selectable: _selectable,
                    selectionColor: _selectionColor,
                    style: _style,
                    disabled: disabled,
                    children: children
                }),
                textPressabilityProps: {
                    onLongPress: onLongPress,
                    onPress: onPress,
                    onPressIn: onPressIn,
                    onPressOut: onPressOut,
                    onResponderGrant: onResponderGrant,
                    onResponderMove: onResponderMove,
                    onResponderRelease: onResponderRelease,
                    onResponderTerminate: onResponderTerminate,
                    onResponderTerminationRequest: onResponderTerminationRequest,
                    onStartShouldSetResponder: onStartShouldSetResponder,
                    pressRetentionOffset: pressRetentionOffset,
                    suppressHighlighting: suppressHighlighting
                }
            });
        }
        return /*#__PURE__*/ _react.createElement(_TextNativeComponent.NativeVirtualText, _extends._({}, restProps, {
            accessibilityLabel: _accessibilityLabel,
            accessibilityState: _accessibilityState,
            isHighlighted: false,
            isPressable: false,
            nativeID: _nativeID,
            numberOfLines: _numberOfLines,
            ref: forwardedRef,
            selectable: _selectable,
            selectionColor: _selectionColor,
            style: _style,
            disabled: disabled
        }), children);
    }
    // If the disabled prop and accessibilityState.disabled are out of sync but not both in
    // falsy states we need to update the accessibilityState object to use the disabled prop.
    if (_disabled !== _accessibilityStateDisabled && (_disabled != null && _disabled !== false || _accessibilityStateDisabled != null && _accessibilityStateDisabled !== false)) {
        _accessibilityState = _extends._({}, _accessibilityState, {
            disabled: _disabled
        });
    }
    var _accessible = _Platform.default.select({
        ios: accessible !== false,
        android: accessible == null ? onPress != null || onLongPress != null : accessible,
        "default": accessible
    });
    var nativeText = null;
    if (isPressable) {
        nativeText = /*#__PURE__*/ _react.createElement(NativePressableText, {
            ref: forwardedRef,
            textProps: _extends._({}, restProps, {
                accessibilityLabel: _accessibilityLabel,
                accessibilityState: _accessibilityState,
                accessible: _accessible,
                allowFontScaling: allowFontScaling !== false,
                disabled: _disabled,
                ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : 'tail',
                nativeID: _nativeID,
                numberOfLines: _numberOfLines,
                selectable: _selectable,
                selectionColor: _selectionColor,
                style: _style,
                children: children
            }),
            textPressabilityProps: {
                onLongPress: onLongPress,
                onPress: onPress,
                onPressIn: onPressIn,
                onPressOut: onPressOut,
                onResponderGrant: onResponderGrant,
                onResponderMove: onResponderMove,
                onResponderRelease: onResponderRelease,
                onResponderTerminate: onResponderTerminate,
                onResponderTerminationRequest: onResponderTerminationRequest,
                onStartShouldSetResponder: onStartShouldSetResponder,
                pressRetentionOffset: pressRetentionOffset,
                suppressHighlighting: suppressHighlighting
            }
        });
    } else {
        nativeText = /*#__PURE__*/ _react.createElement(_TextNativeComponent.NativeText, _extends._({}, restProps, {
            accessibilityLabel: _accessibilityLabel,
            accessibilityState: _accessibilityState,
            accessible: _accessible,
            allowFontScaling: allowFontScaling !== false,
            disabled: _disabled,
            ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : 'tail',
            isHighlighted: false,
            nativeID: _nativeID,
            numberOfLines: _numberOfLines,
            ref: forwardedRef,
            selectable: _selectable,
            selectionColor: _selectionColor,
            style: _style
        }), children);
    }
    if (children == null) {
        return nativeText;
    }
    // If the children do not contain a JSX element it would not be possible to have a
    // nested `Text` component so we can skip adding the `TextAncestor` context wrapper
    // which has a performance overhead. Since we do this for performance reasons we need
    // to keep the check simple to avoid regressing overall perf. For this reason the
    // `children.length` constant is set to `3`, this should be a reasonable tradeoff
    // to capture the majority of `Text` uses but also not make this check too expensive.
    if (Array.isArray(children) && children.length <= 3) {
        var hasNonTextChild = false;
        for(var _i = 0; _i < children.length; _i++){
            var child = children[_i];
            if (child != null && (typeof child === "undefined" ? "undefined" : _type_of._(child)) === 'object') {
                hasNonTextChild = true;
                break;
            }
        }
        if (!hasNonTextChild) {
            return nativeText;
        }
    } else if ((typeof children === "undefined" ? "undefined" : _type_of._(children)) !== 'object') {
        return nativeText;
    }
    return /*#__PURE__*/ _react.createElement(_TextAncestor.default.Provider, {
        value: true
    }, nativeText);
});
Text.displayName = 'Text';
/**
 * Hook that handles setting up Pressability of Text components.
 *
 * NOTE: This hook is relatively expensive so it should only be used absolutely necessary.
 */ function useTextPressability(param) {
    var onLongPress = param.onLongPress, onPress = param.onPress, onPressIn = param.onPressIn, onPressOut = param.onPressOut, onResponderGrant = param.onResponderGrant, onResponderMove = param.onResponderMove, onResponderRelease = param.onResponderRelease, onResponderTerminate = param.onResponderTerminate, onResponderTerminationRequest = param.onResponderTerminationRequest, onStartShouldSetResponder = param.onStartShouldSetResponder, pressRetentionOffset = param.pressRetentionOffset, suppressHighlighting = param.suppressHighlighting;
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), isHighlighted = _useState[0], setHighlighted = _useState[1];
    // Setup pressability config and wrap callbacks needs to track the highlight state.
    var config = (0, _react.useMemo)(function() {
        var _onPressIn = onPressIn;
        var _onPressOut = onPressOut;
        // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it
        // in the best case, and cause issues with text selection in the worst case. Forcing
        // the isHighlighted prop to false on all platforms except iOS.
        if (_Platform.default.OS === 'ios') {
            _onPressIn = function(event) {
                setHighlighted(suppressHighlighting == null || !suppressHighlighting);
                onPressIn == null ? void 0 : onPressIn(event);
            };
            _onPressOut = function(event) {
                setHighlighted(false);
                onPressOut == null ? void 0 : onPressOut(event);
            };
        }
        return {
            disabled: false,
            pressRectOffset: pressRetentionOffset,
            onLongPress: onLongPress,
            onPress: onPress,
            onPressIn: _onPressIn,
            onPressOut: _onPressOut
        };
    }, [
        pressRetentionOffset,
        onLongPress,
        onPress,
        onPressIn,
        onPressOut,
        suppressHighlighting
    ]);
    // Init the pressability class
    var eventHandlers = (0, _usePressability.default)(config);
    // Create NativeText event handlers which proxy events to pressability
    var eventHandlersForText = (0, _react.useMemo)(function() {
        return eventHandlers == null ? null : {
            onResponderGrant: function(event) {
                eventHandlers.onResponderGrant(event);
                if (onResponderGrant != null) {
                    onResponderGrant(event);
                }
            },
            onResponderMove: function(event) {
                eventHandlers.onResponderMove(event);
                if (onResponderMove != null) {
                    onResponderMove(event);
                }
            },
            onResponderRelease: function(event) {
                eventHandlers.onResponderRelease(event);
                if (onResponderRelease != null) {
                    onResponderRelease(event);
                }
            },
            onResponderTerminate: function(event) {
                eventHandlers.onResponderTerminate(event);
                if (onResponderTerminate != null) {
                    onResponderTerminate(event);
                }
            },
            onClick: eventHandlers.onClick,
            onResponderTerminationRequest: onResponderTerminationRequest != null ? onResponderTerminationRequest : eventHandlers.onResponderTerminationRequest,
            onStartShouldSetResponder: onStartShouldSetResponder != null ? onStartShouldSetResponder : eventHandlers.onStartShouldSetResponder
        };
    }, [
        eventHandlers,
        onResponderGrant,
        onResponderMove,
        onResponderRelease,
        onResponderTerminate,
        onResponderTerminationRequest,
        onStartShouldSetResponder
    ]);
    // Return the highlight state and NativeText event handlers
    return (0, _react.useMemo)(function() {
        return [
            isHighlighted,
            eventHandlersForText
        ];
    }, [
        isHighlighted,
        eventHandlersForText
    ]);
}
/**
 * Wrap the NativeVirtualText component and initialize pressability.
 *
 * This logic is split out from the main Text component to enable the more
 * expensive pressability logic to be only initialized when needed.
 */ var NativePressableVirtualText = /*#__PURE__*/ _react.forwardRef(function(param, forwardedRef) {
    var textProps = param.textProps, textPressabilityProps = param.textPressabilityProps;
    var _useTextPressability = _sliced_to_array._(useTextPressability(textPressabilityProps), 2), isHighlighted = _useTextPressability[0], eventHandlersForText = _useTextPressability[1];
    return /*#__PURE__*/ _react.createElement(_TextNativeComponent.NativeVirtualText, _extends._({}, textProps, eventHandlersForText, {
        isHighlighted: isHighlighted,
        isPressable: true,
        ref: forwardedRef
    }));
});
/**
 * Wrap the NativeText component and initialize pressability.
 *
 * This logic is split out from the main Text component to enable the more
 * expensive pressability logic to be only initialized when needed.
 */ var NativePressableText = /*#__PURE__*/ _react.forwardRef(function(param, forwardedRef) {
    var textProps = param.textProps, textPressabilityProps = param.textPressabilityProps;
    var _useTextPressability = _sliced_to_array._(useTextPressability(textPressabilityProps), 2), isHighlighted = _useTextPressability[0], eventHandlersForText = _useTextPressability[1];
    return /*#__PURE__*/ _react.createElement(_TextNativeComponent.NativeText, _extends._({}, textProps, eventHandlersForText, {
        isHighlighted: isHighlighted,
        isPressable: true,
        ref: forwardedRef
    }));
});
var userSelectToSelectableMap = {
    auto: true,
    text: true,
    none: false,
    contain: true,
    all: true
};
var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
};
module.exports = Text;


}),
18717: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedStyle;
    }
}));
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _sliced_to_array = __webpack_require__(21193);
var _NativeAnimatedValidation = __webpack_require__(41230);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(26044));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79250));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var _AnimatedObject = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11213));
var _AnimatedTransform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57782));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
function createAnimatedStyle(inputStyle, keepUnanimatedValues) {
    var nodeKeys = [];
    var nodes = [];
    var style = {};
    var keys = Object.keys(inputStyle);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        var value = inputStyle[key];
        if (value != null && key === 'transform') {
            var node = _ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform() ? _AnimatedObject.default.from(value) : new _AnimatedTransform.default(value);
            if (node == null) {
                if (keepUnanimatedValues) {
                    style[key] = value;
                }
            } else {
                nodeKeys.push(key);
                nodes.push(node);
                style[key] = node;
            }
        } else if (value instanceof _AnimatedNode.default) {
            var node1 = value;
            nodeKeys.push(key);
            nodes.push(node1);
            style[key] = value;
        } else {
            var node2 = _AnimatedObject.default.from(value);
            if (node2 == null) {
                if (keepUnanimatedValues) {
                    style[key] = value;
                }
            } else {
                nodeKeys.push(key);
                nodes.push(node2);
                style[key] = node2;
            }
        }
    }
    return [
        nodeKeys,
        nodes,
        style
    ];
}
var _nodeKeys = /*#__PURE__*/ _class_private_field_loose_key._("_nodeKeys"), _nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes");
var AnimatedStyle = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedStyle, AnimatedWithChildren);
    function AnimatedStyle(inputStyle) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this, Object.defineProperty(_this, _nodeKeys, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        });
        _this._inputStyle = inputStyle;
        var // NOTE: This null check should not be necessary, but the types are not
        // strong nor enforced as of this writing. This check should be hoisted
        // to instantiation sites.
        _flattenStyle1;
        var _createAnimatedStyle = _sliced_to_array._(createAnimatedStyle((_flattenStyle1 = (0, _flattenStyle.default)(inputStyle)) != null ? _flattenStyle1 : {}, _Platform.default.OS !== 'web'), 3), nodeKeys = _createAnimatedStyle[0], nodes = _createAnimatedStyle[1], style = _createAnimatedStyle[2];
        _class_private_field_loose_base._(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _this._style = style;
        return _this;
    }
    var _proto = AnimatedStyle.prototype;
    _proto.__getValue = function __getValue() {
        var style = {};
        var keys = Object.keys(this._style);
        for(var ii = 0, length = keys.length; ii < length; ii++){
            var key = keys[ii];
            var value = this._style[key];
            if (value instanceof _AnimatedNode.default) {
                style[key] = value.__getValue();
            } else {
                style[key] = value;
            }
        }
        return _Platform.default.OS === 'web' ? [
            this._inputStyle,
            style
        ] : style;
    };
    _proto.__getAnimatedValue = function __getAnimatedValue() {
        var style = {};
        var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var key = nodeKeys[ii];
            var node = nodes[ii];
            style[key] = node.__getAnimatedValue();
        }
        return style;
    };
    _proto.__attach = function __attach() {
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__addChild(this);
        }
    };
    _proto.__detach = function __detach() {
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__removeChild(this);
        }
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__makeNative = function __makeNative(platformConfig) {
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__makeNative(platformConfig);
        }
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        var platformConfig = this.__getPlatformConfig();
        var styleConfig = {};
        var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var key = nodeKeys[ii];
            var node = nodes[ii];
            node.__makeNative(platformConfig);
            styleConfig[key] = node.__getNativeTag();
        }
        if (false) {}
        return {
            type: 'style',
            style: styleConfig
        };
    };
    return AnimatedStyle;
}(_AnimatedWithChildren.default);


}),
18984: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeIntentAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(98492), exports));
var _default = _NativeIntentAndroid.default;


}),
19129: (function (module) {
"use strict";

module.exports = function(param) {
    var _ref = param === void 0 ? {} : param, _ref_onlyFirst = _ref.onlyFirst, onlyFirst = _ref_onlyFirst === void 0 ? false : _ref_onlyFirst;
    var pattern = [
        '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
        '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
    ].join('|');
    return new RegExp(pattern, onlyFirst ? undefined : 'g');
};


}),
19820: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(68493));
var _ViewConfigIgnore = __webpack_require__(89529);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'setIsVisible_EXPERIMENTAL'
    ]
});
var __INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
        topLoadStart: {
            registrationName: 'onLoadStart'
        },
        topProgress: {
            registrationName: 'onProgress'
        },
        topError: {
            registrationName: 'onError'
        },
        topLoad: {
            registrationName: 'onLoad'
        },
        topLoadEnd: {
            registrationName: 'onLoadEnd'
        }
    },
    validAttributes: {
        blurRadius: true,
        internal_analyticTag: true,
        resizeMethod: true,
        resizeMode: true,
        resizeMultiplier: true,
        tintColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderBottomLeftRadius: true,
        borderTopLeftRadius: true,
        src: true,
        source: true,
        borderRadius: true,
        headers: true,
        shouldNotifyLoadEvents: true,
        defaultSrc: true,
        overlayColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        accessible: true,
        progressiveRenderingEnabled: true,
        fadeDuration: true,
        borderBottomRightRadius: true,
        borderTopRightRadius: true,
        loadingIndicatorSrc: true
    }
} : {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
        topLoadStart: {
            registrationName: 'onLoadStart'
        },
        topProgress: {
            registrationName: 'onProgress'
        },
        topError: {
            registrationName: 'onError'
        },
        topPartialLoad: {
            registrationName: 'onPartialLoad'
        },
        topLoad: {
            registrationName: 'onLoad'
        },
        topLoadEnd: {
            registrationName: 'onLoadEnd'
        }
    },
    validAttributes: _extends._({
        blurRadius: true,
        capInsets: {
            diff: __webpack_require__(16147)
        },
        defaultSource: {
            process: __webpack_require__(61558)
        },
        internal_analyticTag: true,
        resizeMode: true,
        source: true,
        tintColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        }
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onLoadStart: true,
        onLoad: true,
        onLoadEnd: true,
        onProgress: true,
        onError: true,
        onPartialLoad: true
    }))
};
var ImageViewNativeComponent = _NativeComponentRegistry.get('RCTImageView', function() {
    return __INTERNAL_VIEW_CONFIG;
});
var _default = ImageViewNativeComponent;


}),
19854: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _AndroidDrawerLayoutNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(41685), exports));
var _default = _AndroidDrawerLayoutNativeComponent.default;


}),
19903: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedMultiplication;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79333));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95338));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var AnimatedMultiplication = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedMultiplication, AnimatedWithChildren);
    function AnimatedMultiplication(a, b) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this;
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    var _proto = AnimatedMultiplication.prototype;
    _proto.__makeNative = function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getValue = function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
    };
    _proto.interpolate = function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
    };
    _proto.__attach = function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
    };
    _proto.__detach = function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        return {
            type: 'multiplication',
            input: [
                this._a.__getNativeTag(),
                this._b.__getNativeTag()
            ]
        };
    };
    return AnimatedMultiplication;
}(_AnimatedWithChildren.default);


}),
19920: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeSoundManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87644));
var SoundManager = {
    playTouchSound: function playTouchSound() {
        if (_NativeSoundManager.default) {
            _NativeSoundManager.default.playTouchSound();
        }
    }
};
module.exports = SoundManager;


}),
20267: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('ShareModule');


}),
20426: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useColorScheme;
    }
}));
var _Appearance = __webpack_require__(52442);
var _react = __webpack_require__(41845);
var subscribe = function(onStoreChange) {
    var appearanceSubscription = (0, _Appearance.addChangeListener)(onStoreChange);
    return function() {
        return appearanceSubscription.remove();
    };
};
function useColorScheme() {
    return (0, _react.useSyncExternalStore)(subscribe, _Appearance.getColorScheme);
}


}),
21231: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(38504);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(68493));
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTTextInlineImage',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
        resizeMode: true,
        src: true,
        tintColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        headers: true
    }
};
var TextInlineImage = _NativeComponentRegistry.get('RCTTextInlineImage', function() {
    return __INTERNAL_VIEW_CONFIG;
});
var _default = TextInlineImage;


}),
22004: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var NativeModule = _TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
    getConstants: function() {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    },
    setColor: function(color, animated) {
        NativeModule.setColor(color, animated);
    },
    setTranslucent: function(translucent) {
        NativeModule.setTranslucent(translucent);
    },
    setStyle: function(statusBarStyle) {
        NativeModule.setStyle(statusBarStyle);
    },
    setHidden: function(hidden) {
        NativeModule.setHidden(hidden);
    }
};
var _default = NativeStatusBarManager;


}),
22361: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _sliced_to_array = __webpack_require__(21193);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13493));
var _AndroidSwitchNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(45584));
var _SwitchNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(23828));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var returnsFalse = function() {
    return false;
};
var returnsTrue = function() {
    return true;
};
/**
  Renders a boolean input.

  This is a controlled component that requires an `onValueChange`
  callback that updates the `value` prop in order for the component to
  reflect user actions. If the `value` prop is not updated, the
  component will continue to render the supplied `value` prop instead of
  the expected result of any user actions.

  ```SnackPlayer name=Switch
  import React, { useState } from "react";
  import { View, Switch, StyleSheet } from "react-native";

  const App = () => {
    const [isEnabled, setIsEnabled] = useState(false);
    const toggleSwitch = () => setIsEnabled(previousState => !previousState);

    return (
      <View style={styles.container}>
        <Switch
          trackColor={{ false: "#767577", true: "#81b0ff" }}
          thumbColor={isEnabled ? "#f5dd4b" : "#f4f3f4"}
          ios_backgroundColor="#3e3e3e"
          onValueChange={toggleSwitch}
          value={isEnabled}
        />
      </View>
    );
  }

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      alignItems: "center",
      justifyContent: "center"
    }
  });

  export default App;
  ```
 */ var SwitchWithForwardedRef = /*#__PURE__*/ _react.forwardRef(function Switch(props, forwardedRef) {
    var disabled = props.disabled, ios_backgroundColor = props.ios_backgroundColor, onChange = props.onChange, onValueChange = props.onValueChange, style = props.style, thumbColor = props.thumbColor, trackColor = props.trackColor, value = props.value, restProps = _object_without_properties_loose._(props, [
        "disabled",
        "ios_backgroundColor",
        "onChange",
        "onValueChange",
        "style",
        "thumbColor",
        "trackColor",
        "value"
    ]);
    var trackColorForFalse = trackColor == null ? void 0 : trackColor["false"];
    var trackColorForTrue = trackColor == null ? void 0 : trackColor["true"];
    var nativeSwitchRef = _react.useRef(null);
    var ref = (0, _useMergeRefs.default)(nativeSwitchRef, forwardedRef);
    var _React_useState = _sliced_to_array._(_react.useState({
        value: null
    }), 2), _native = _React_useState[0], setNative = _React_useState[1];
    var handleChange = function(event) {
        // $FlowFixMe[unused-promise]
        onChange == null ? void 0 : onChange(event);
        // $FlowFixMe[unused-promise]
        onValueChange == null ? void 0 : onValueChange(event.nativeEvent.value);
        setNative({
            value: event.nativeEvent.value
        });
    };
    _react.useLayoutEffect(function() {
        var _nativeSwitchRef_current;
        // This is necessary in case native updates the switch and JS decides
        // that the update should be ignored and we should stick with the value
        // that we have in JS.
        var jsValue = value === true;
        var shouldUpdateNativeSwitch = _native.value != null && _native.value !== jsValue;
        if (shouldUpdateNativeSwitch && ((_nativeSwitchRef_current = nativeSwitchRef.current) == null ? void 0 : _nativeSwitchRef_current.setNativeProps) != null) {
            if (_Platform.default.OS === 'android') {
                _AndroidSwitchNativeComponent.Commands.setNativeValue(nativeSwitchRef.current, jsValue);
            } else {
                _SwitchNativeComponent.Commands.setValue(nativeSwitchRef.current, jsValue);
            }
        }
    }, [
        value,
        _native
    ]);
    if (_Platform.default.OS === 'android') {
        var accessibilityState = restProps.accessibilityState;
        var _disabled = disabled != null ? disabled : accessibilityState == null ? void 0 : accessibilityState.disabled;
        var _accessibilityState = _disabled !== (accessibilityState == null ? void 0 : accessibilityState.disabled) ? _extends._({}, accessibilityState, {
            disabled: _disabled
        }) : accessibilityState;
        var platformProps = {
            accessibilityState: _accessibilityState,
            enabled: _disabled !== true,
            on: value === true,
            style: style,
            thumbTintColor: thumbColor,
            trackColorForFalse: trackColorForFalse,
            trackColorForTrue: trackColorForTrue,
            trackTintColor: value === true ? trackColorForTrue : trackColorForFalse
        };
        var _props_accessibilityRole;
        return /*#__PURE__*/ _react.createElement(_AndroidSwitchNativeComponent.default, _extends._({}, restProps, platformProps, {
            accessibilityRole: (_props_accessibilityRole = props.accessibilityRole) != null ? _props_accessibilityRole : 'switch',
            onChange: handleChange,
            onResponderTerminationRequest: returnsFalse,
            onStartShouldSetResponder: returnsTrue,
            ref: ref
        }));
    } else {
        var platformProps1 = {
            disabled: disabled,
            onTintColor: trackColorForTrue,
            style: _StyleSheet.default.compose({
                height: 31,
                width: 51
            }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {
                backgroundColor: ios_backgroundColor,
                borderRadius: 16
            })),
            thumbTintColor: thumbColor,
            tintColor: trackColorForFalse,
            value: value === true
        };
        var _props_accessibilityRole1;
        return /*#__PURE__*/ _react.createElement(_SwitchNativeComponent.default, _extends._({}, restProps, platformProps1, {
            accessibilityRole: (_props_accessibilityRole1 = props.accessibilityRole) != null ? _props_accessibilityRole1 : 'switch',
            onChange: handleChange,
            onResponderTerminationRequest: returnsFalse,
            onStartShouldSetResponder: returnsTrue,
            ref: ref
        }));
    }
});
var _default = SwitchWithForwardedRef;


}),
23289: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('LinkingManager');


}),
23372: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeStatusBarManagerAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(22004), exports));
var _default = _NativeStatusBarManagerAndroid.default;


}),
23828: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _SwitchNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(45583), exports));
var _default = _SwitchNativeComponent.default;


}),
2396: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31043));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _NativeIntentAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18984));
var _NativeLinkingManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93917));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89169));
/**
 * `Linking` gives you a general interface to interact with both incoming
 * and outgoing app links.
 *
 * See https://reactnative.dev/docs/linking
 */ var Linking = /*#__PURE__*/ function(NativeEventEmitter) {
    "use strict";
    _inherits._(Linking, NativeEventEmitter);
    function Linking() {
        return NativeEventEmitter.call(this, _Platform.default.OS === 'ios' ? (0, _nullthrows.default)(_NativeLinkingManager.default) : undefined) || this;
    }
    var _proto = Linking.prototype;
    /**
   * Add a handler to Linking changes by listening to the `url` event type
   * and providing the handler
   *
   * See https://reactnative.dev/docs/linking#addeventlistener
   */ _proto.addEventListener = function addEventListener(eventType, listener, context) {
        return this.addListener(eventType, listener);
    };
    /**
   * Try to open the given `url` with any of the installed apps.
   *
   * See https://reactnative.dev/docs/linking#openurl
   */ _proto.openURL = function openURL(url) {
        this._validateURL(url);
        if (_Platform.default.OS === 'android') {
            return (0, _nullthrows.default)(_NativeIntentAndroid.default).openURL(url);
        } else {
            return (0, _nullthrows.default)(_NativeLinkingManager.default).openURL(url);
        }
    };
    /**
   * Determine whether or not an installed app can handle a given URL.
   *
   * See https://reactnative.dev/docs/linking#canopenurl
   */ _proto.canOpenURL = function canOpenURL(url) {
        this._validateURL(url);
        if (_Platform.default.OS === 'android') {
            return (0, _nullthrows.default)(_NativeIntentAndroid.default).canOpenURL(url);
        } else {
            return (0, _nullthrows.default)(_NativeLinkingManager.default).canOpenURL(url);
        }
    };
    /**
   * Open app settings.
   *
   * See https://reactnative.dev/docs/linking#opensettings
   */ _proto.openSettings = function openSettings() {
        if (_Platform.default.OS === 'android') {
            return (0, _nullthrows.default)(_NativeIntentAndroid.default).openSettings();
        } else {
            return (0, _nullthrows.default)(_NativeLinkingManager.default).openSettings();
        }
    };
    /**
   * If the app launch was triggered by an app link,
   * it will give the link url, otherwise it will give `null`
   *
   * See https://reactnative.dev/docs/linking#getinitialurl
   */ _proto.getInitialURL = function getInitialURL() {
        return _Platform.default.OS === 'android' ? (0, _nullthrows.default)(_NativeIntentAndroid.default).getInitialURL() : (0, _nullthrows.default)(_NativeLinkingManager.default).getInitialURL();
    };
    /*
   * Launch an Android intent with extras (optional)
   *
   * @platform android
   *
   * See https://reactnative.dev/docs/linking#sendintent
   */ _proto.sendIntent = function sendIntent(action, extras) {
        if (_Platform.default.OS === 'android') {
            return (0, _nullthrows.default)(_NativeIntentAndroid.default).sendIntent(action, extras);
        } else {
            return new Promise(function(resolve, reject) {
                return reject(new Error('Unsupported'));
            });
        }
    };
    _proto._validateURL = function _validateURL(url) {
        (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        (0, _invariant.default)(url, 'Invalid URL: cannot be empty');
    };
    return Linking;
}(_NativeEventEmitter.default);
module.exports = new Linking();


}),
24085: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _sliced_to_array = __webpack_require__(21193);
var _RefreshControl = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98620));
var _ScrollView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11418));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79250));
var _splitLayoutProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7730));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13493));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93671));
var _useAnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41201));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * @see https://github.com/facebook/react-native/commit/b8c8562
 */ var AnimatedScrollView = /*#__PURE__*/ _react.forwardRef(function AnimatedScrollViewWithOrWithoutInvertedRefreshControl(props, forwardedRef) {
    // (Android only) When a ScrollView has a RefreshControl and
    // any `style` property set with an Animated.Value, the CSS
    // gets incorrectly applied twice. This is because ScrollView
    // swaps the parent/child relationship of itself and the
    // RefreshControl component (see ScrollView.js for more details).
    if (_Platform.default.OS === 'android' && props.refreshControl != null && props.style != null) {
        return(// $FlowFixMe[prop-missing]
        /*#__PURE__*/ _react.createElement(AnimatedScrollViewWithInvertedRefreshControl, _extends._({
            scrollEventThrottle: 0.0001
        }, props, {
            ref: forwardedRef,
            refreshControl: props.refreshControl
        })));
    } else {
        return /*#__PURE__*/ _react.createElement(AnimatedScrollViewWithoutInvertedRefreshControl, _extends._({
            scrollEventThrottle: 0.0001
        }, props, {
            ref: forwardedRef
        }));
    }
});
var AnimatedScrollViewWithInvertedRefreshControl = /*#__PURE__*/ _react.forwardRef(// $FlowFixMe[incompatible-call]
function AnimatedScrollViewWithInvertedRefreshControl(props, forwardedRef) {
    // Split `props` into the animate-able props for the parent (RefreshControl)
    // and child (ScrollView).
    var _useMemo = (0, _react.useMemo)(function() {
        // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[incompatible-call]
        var _splitLayoutProps1 = (0, _splitLayoutProps.default)((0, _flattenStyle.default)(props.style)), outer = _splitLayoutProps1.outer, inner = _splitLayoutProps1.inner;
        return {
            intermediatePropsForRefreshControl: {
                style: outer
            },
            intermediatePropsForScrollView: _extends._({}, props, {
                style: inner
            })
        };
    }, [
        props
    ]), intermediatePropsForRefreshControl = _useMemo.intermediatePropsForRefreshControl, intermediatePropsForScrollView = _useMemo.intermediatePropsForScrollView;
    // Handle animated props on `refreshControl`.
    var _useAnimatedProps1 = _sliced_to_array._((0, _useAnimatedProps.default)(intermediatePropsForRefreshControl), 2), refreshControlAnimatedProps = _useAnimatedProps1[0], refreshControlRef = _useAnimatedProps1[1];
    // NOTE: Assumes that refreshControl.ref` and `refreshControl.style` can be
    // safely clobbered.
    var refreshControl = /*#__PURE__*/ _react.cloneElement(props.refreshControl, _extends._({}, refreshControlAnimatedProps, {
        ref: refreshControlRef
    }));
    // Handle animated props on `NativeDirectionalScrollView`.
    var _useAnimatedProps2 = _sliced_to_array._((0, _useAnimatedProps.default)(intermediatePropsForScrollView), 2), scrollViewAnimatedProps = _useAnimatedProps2[0], scrollViewRef = _useAnimatedProps2[1];
    var ref = (0, _useMergeRefs.default)(scrollViewRef, forwardedRef);
    return(// $FlowFixMe[incompatible-use] Investigate useAnimatedProps return value
    /*#__PURE__*/ _react.createElement(_ScrollView.default, _extends._({}, scrollViewAnimatedProps, {
        ref: ref,
        refreshControl: refreshControl,
        // Because `refreshControl` is a clone of `props.refreshControl` with
        // `refreshControlAnimatedProps` added, we need to pass ScrollView.js
        // the combined styles since it also splits the outer/inner styles for
        // its parent/child, respectively. Without this, the refreshControl
        // styles would be ignored.
        style: _StyleSheet.default.compose(scrollViewAnimatedProps.style, refreshControlAnimatedProps.style)
    })));
});
var AnimatedScrollViewWithoutInvertedRefreshControl = (0, _createAnimatedComponent.default)(_ScrollView.default);
var _default = AnimatedScrollView;


}),
24092: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31043));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _NativePushNotificationManagerIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(67411));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var PushNotificationEmitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
// If you want to use the native module on other platforms, please remove this condition and test its behavior
_Platform.default.OS !== 'ios' ? null : _NativePushNotificationManagerIOS.default);
var _notifHandlers = new Map();
var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';
/**
 * An event emitted by PushNotificationIOS.
 */ /**
 *
 * Handle notifications for your app, including scheduling and permissions.
 *
 * See https://reactnative.dev/docs/pushnotificationios
 */ var PushNotificationIOS = /*#__PURE__*/ function() {
    "use strict";
    function PushNotificationIOS(nativeNotif) {
        var _this = this;
        this._data = {};
        this._remoteNotificationCompleteCallbackCalled = false;
        this._isRemote = nativeNotif.remote;
        if (this._isRemote) {
            this._notificationId = nativeNotif.notificationId;
        }
        if (nativeNotif.remote) {
            // Extract data from Apple's `aps` dict as defined:
            // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService
            Object.keys(nativeNotif).forEach(function(notifKey) {
                var notifVal = nativeNotif[notifKey];
                if (notifKey === 'aps') {
                    _this._alert = notifVal.alert;
                    _this._sound = notifVal.sound;
                    _this._badgeCount = notifVal.badge;
                    _this._category = notifVal.category;
                    _this._contentAvailable = notifVal['content-available'];
                    _this._threadID = notifVal['thread-id'];
                } else {
                    _this._data[notifKey] = notifVal;
                }
            });
        } else {
            // Local notifications aren't being sent down with `aps` dict.
            this._badgeCount = nativeNotif.applicationIconBadgeNumber;
            this._sound = nativeNotif.soundName;
            this._alert = nativeNotif.alertBody;
            this._data = nativeNotif.userInfo;
            this._category = nativeNotif.category;
        }
    }
    var _proto = PushNotificationIOS.prototype;
    /**
   * This method is available for remote notifications that have been received via:
   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`. See docs
   * for more information.
   *
   * See https://reactnative.dev/docs/pushnotificationios#finish
   */ _proto.finish = function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
            return;
        }
        this._remoteNotificationCompleteCallbackCalled = true;
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.onFinishRemoteNotification(this._notificationId, fetchResult);
    };
    /**
   * An alias for `getAlert` to get the notification's main message string.
   */ _proto.getMessage = function getMessage() {
        // alias because "alert" is an ambiguous name
        return this._alert;
    };
    /**
   * Gets the sound string from the `aps` object. This will be `null` for local
   * notifications.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getsound
   */ _proto.getSound = function getSound() {
        return this._sound;
    };
    /**
   * Gets the category string from the `aps` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getcategory
   */ _proto.getCategory = function getCategory() {
        return this._category;
    };
    /**
   * Gets the notification's main message from the `aps` object. Also see the
   * alias: `getMessage()`.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getalert
   */ _proto.getAlert = function getAlert() {
        return this._alert;
    };
    /**
   * Gets the content-available number from the `aps` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getcontentavailable
   */ _proto.getContentAvailable = function getContentAvailable() {
        return this._contentAvailable;
    };
    /**
   * Gets the badge count number from the `aps` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getbadgecount
   */ _proto.getBadgeCount = function getBadgeCount() {
        return this._badgeCount;
    };
    /**
   * Gets the data object on the notification.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getdata
   */ _proto.getData = function getData() {
        return this._data;
    };
    /**
   * Gets the thread ID on the notification.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getthreadid
   */ _proto.getThreadID = function getThreadID() {
        return this._threadID;
    };
    /**
   * Schedules a local notification for immediate presentation.
   *
   * See https://reactnative.dev/docs/pushnotificationios#presentlocalnotification
   */ PushNotificationIOS.presentLocalNotification = function presentLocalNotification(details) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.presentLocalNotification(details);
    };
    /**
   * Schedules a local notification for future presentation.
   *
   * See https://reactnative.dev/docs/pushnotificationios#schedulelocalnotification
   */ PushNotificationIOS.scheduleLocalNotification = function scheduleLocalNotification(details) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.scheduleLocalNotification(details);
    };
    /**
   * Cancels all scheduled local notifications.
   *
   * See https://reactnative.dev/docs/pushnotificationios#cancelalllocalnotifications
   */ PushNotificationIOS.cancelAllLocalNotifications = function cancelAllLocalNotifications() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.cancelAllLocalNotifications();
    };
    /**
   * Removes all delivered notifications from Notification Center.
   *
   * See https://reactnative.dev/docs/pushnotificationios#removealldeliverednotifications
   */ PushNotificationIOS.removeAllDeliveredNotifications = function removeAllDeliveredNotifications() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.removeAllDeliveredNotifications();
    };
    /**
   * Provides a list of the app’s notifications that are currently displayed
   * in Notification Center.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getdeliverednotifications
   */ PushNotificationIOS.getDeliveredNotifications = function getDeliveredNotifications(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getDeliveredNotifications(callback);
    };
    /**
   * Removes the specified notifications from Notification Center.
   *
   * See https://reactnative.dev/docs/pushnotificationios#removedeliverednotifications
   */ PushNotificationIOS.removeDeliveredNotifications = function removeDeliveredNotifications(identifiers) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.removeDeliveredNotifications(identifiers);
    };
    /**
   * Sets the badge number for the app icon on the Home Screen.
   *
   * See https://reactnative.dev/docs/pushnotificationios#setapplicationiconbadgenumber
   */ PushNotificationIOS.setApplicationIconBadgeNumber = function setApplicationIconBadgeNumber(number) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.setApplicationIconBadgeNumber(number);
    };
    /**
   * Gets the current badge number for the app icon on the Home Screen.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getapplicationiconbadgenumber
   */ PushNotificationIOS.getApplicationIconBadgeNumber = function getApplicationIconBadgeNumber(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getApplicationIconBadgeNumber(callback);
    };
    /**
   * Cancels any scheduled local notifications which match the fields in the
   * provided `userInfo`.
   *
   * See https://reactnative.dev/docs/pushnotificationios#cancellocalnotification
   */ PushNotificationIOS.cancelLocalNotifications = function cancelLocalNotifications(userInfo) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.cancelLocalNotifications(userInfo);
    };
    /**
   * Gets the list of local notifications that are currently scheduled.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getscheduledlocalnotifications
   */ PushNotificationIOS.getScheduledLocalNotifications = function getScheduledLocalNotifications(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getScheduledLocalNotifications(callback);
    };
    /**
   * Attaches a listener to notification events including local notifications,
   * remote notifications, and notification registration results.
   *
   * See https://reactnative.dev/docs/pushnotificationios#addeventlistener
   */ PushNotificationIOS.addEventListener = function addEventListener(type, handler) {
        (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;
        if (type === 'notification') {
            listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function(notifData) {
                handler(new PushNotificationIOS(notifData));
            });
        } else if (type === 'localNotification') {
            listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function(notifData) {
                handler(new PushNotificationIOS(notifData));
            });
        } else if (type === 'register') {
            listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function(registrationInfo) {
                handler(registrationInfo.deviceToken);
            });
        } else if (type === 'registrationError') {
            listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function(errorInfo) {
                handler(errorInfo);
            });
        }
        _notifHandlers.set(type, listener);
    };
    /**
   * Removes the event listener. Do this in `componentWillUnmount` to prevent
   * memory leaks.
   *
   * See https://reactnative.dev/docs/pushnotificationios#removeeventlistener
   */ PushNotificationIOS.removeEventListener = function removeEventListener(type) {
        (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener = _notifHandlers.get(type);
        if (!listener) {
            return;
        }
        listener.remove();
        _notifHandlers["delete"](type);
    };
    /**
   * Requests notification permissions from iOS, prompting the user with a
   * dialog box. By default, it will request all notification permissions, but
   * you can optionally specify which permissions to request.
   *
   * See https://reactnative.dev/docs/pushnotificationios#requestpermissions
   */ PushNotificationIOS.requestPermissions = function requestPermissions(permissions) {
        var requestedPermissions = {
            alert: true,
            badge: true,
            sound: true
        };
        if (permissions) {
            requestedPermissions = {
                alert: !!permissions.alert,
                badge: !!permissions.badge,
                sound: !!permissions.sound
            };
        }
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        return _NativePushNotificationManagerIOS.default.requestPermissions(requestedPermissions);
    };
    /**
   * Unregister for all remote notifications received via Apple Push Notification
   * service. This should be called in rare circumstances only.
   *
   * See https://reactnative.dev/docs/pushnotificationios#abandonpermissions
   */ PushNotificationIOS.abandonPermissions = function abandonPermissions() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.abandonPermissions();
    };
    /**
   * Check which push permissions are currently enabled. `callback` will be
   * invoked with a `Permissions` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#checkpermissions
   */ PushNotificationIOS.checkPermissions = function checkPermissions(callback) {
        (0, _invariant.default)(typeof callback === 'function', 'Must provide a valid callback');
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.checkPermissions(callback);
    };
    /**
   * This method returns a promise that resolves to either the notification
   * object if the app was launched by a push notification, or `null` otherwise.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getinitialnotification
   */ PushNotificationIOS.getInitialNotification = function getInitialNotification() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        return _NativePushNotificationManagerIOS.default.getInitialNotification().then(function(notification) {
            return notification && new PushNotificationIOS(notification);
        });
    };
    /**
   * This method returns a promise that resolves to the current notification
   * authorization status. See UNAuthorizationStatus for possible values.
   */ PushNotificationIOS.getAuthorizationStatus = function getAuthorizationStatus(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getAuthorizationStatus(callback);
    };
    return PushNotificationIOS;
}();
PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
};
module.exports = PushNotificationIOS;


}),
24426: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _AnimatedImplementation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74124));
var _AnimatedMock = /*#__PURE__*/ _interop_require_default._(__webpack_require__(71673));
var Animated = _Platform.default.isDisableAnimations ? _AnimatedMock.default : _AnimatedImplementation.default;
var _default = _extends._({
    get FlatList () {
        return (__webpack_require__(66505)/* ["default"] */["default"]);
    },
    get Image () {
        return (__webpack_require__(31935)/* ["default"] */["default"]);
    },
    get ScrollView () {
        return (__webpack_require__(24085)/* ["default"] */["default"]);
    },
    get SectionList () {
        return (__webpack_require__(40898)/* ["default"] */["default"]);
    },
    get Text () {
        return (__webpack_require__(17444)/* ["default"] */["default"]);
    },
    get View () {
        return (__webpack_require__(39123)/* ["default"] */["default"]);
    }
}, Animated);


}),
2461: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeI18nManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(89067), exports));
var _default = _NativeI18nManager.default;


}),
24843: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeActionSheetManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(25653), exports));
var _default = _NativeActionSheetManager.default;


}),
25653: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('ActionSheetManager');


}),
26585: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useRefEffect;
    }
}));
var _react = __webpack_require__(41845);
function useRefEffect(effect) {
    var cleanupRef = (0, _react.useRef)(undefined);
    return (0, _react.useCallback)(function(instance) {
        if (cleanupRef.current) {
            cleanupRef.current();
            cleanupRef.current = undefined;
        }
        if (instance != null) {
            cleanupRef.current = effect(instance);
        }
    }, [
        effect
    ]);
}


}),
26732: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeAppearance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85390));
var _default = _NativeAppearance.default;


}),
27221: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70973));
var _RendererProxy = __webpack_require__(14288);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _legacySendAccessibilityEvent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61379));
var _NativeAccessibilityInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89546));
var _NativeAccessibilityManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91429));
// Events that are only supported on Android.
// Events that are only supported on iOS.
// Mapping of public event names to platform-specific event names.
var EventNames = _Platform.default.OS === 'android' ? new Map([
    [
        'change',
        'touchExplorationDidChange'
    ],
    [
        'reduceMotionChanged',
        'reduceMotionDidChange'
    ],
    [
        'screenReaderChanged',
        'touchExplorationDidChange'
    ],
    [
        'accessibilityServiceChanged',
        'accessibilityServiceDidChange'
    ]
]) : new Map([
    [
        'announcementFinished',
        'announcementFinished'
    ],
    [
        'boldTextChanged',
        'boldTextChanged'
    ],
    [
        'change',
        'screenReaderChanged'
    ],
    [
        'grayscaleChanged',
        'grayscaleChanged'
    ],
    [
        'invertColorsChanged',
        'invertColorsChanged'
    ],
    [
        'reduceMotionChanged',
        'reduceMotionChanged'
    ],
    [
        'reduceTransparencyChanged',
        'reduceTransparencyChanged'
    ],
    [
        'screenReaderChanged',
        'screenReaderChanged'
    ]
]);
/**
 * Sometimes it's useful to know whether or not the device has a screen reader
 * that is currently active. The `AccessibilityInfo` API is designed for this
 * purpose. You can use it to query the current state of the screen reader as
 * well as to register to be notified when the state of the screen reader
 * changes.
 *
 * See https://reactnative.dev/docs/accessibilityinfo
 */ var AccessibilityInfo = {
    /**
   * Query whether bold text is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when bold text is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isBoldTextEnabled
   */ isBoldTextEnabled: function() {
        if (_Platform.default.OS === 'android') {
            return Promise.resolve(false);
        } else {
            return new Promise(function(resolve, reject) {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentBoldTextState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether grayscale is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when grayscale is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isGrayscaleEnabled
   */ isGrayscaleEnabled: function() {
        if (_Platform.default.OS === 'android') {
            return Promise.resolve(false);
        } else {
            return new Promise(function(resolve, reject) {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentGrayscaleState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether inverted colors are currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when invert color is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isInvertColorsEnabled
   */ isInvertColorsEnabled: function() {
        if (_Platform.default.OS === 'android') {
            return Promise.resolve(false);
        } else {
            return new Promise(function(resolve, reject) {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentInvertColorsState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether reduced motion is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when a reduce motion is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isReduceMotionEnabled
   */ isReduceMotionEnabled: function() {
        return new Promise(function(resolve, reject) {
            if (_Platform.default.OS === 'android') {
                if (_NativeAccessibilityInfo.default != null) {
                    _NativeAccessibilityInfo.default.isReduceMotionEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentReduceMotionState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether reduce motion and prefer cross-fade transitions settings are currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when  prefer cross-fade transitions is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#prefersCrossFadeTransitions
   */ prefersCrossFadeTransitions: function() {
        return new Promise(function(resolve, reject) {
            if (_Platform.default.OS === 'android') {
                return Promise.resolve(false);
            } else {
                if ((_NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState) != null) {
                    _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether reduced transparency is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when a reduce transparency is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isReduceTransparencyEnabled
   */ isReduceTransparencyEnabled: function() {
        if (_Platform.default.OS === 'android') {
            return Promise.resolve(false);
        } else {
            return new Promise(function(resolve, reject) {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether a screen reader is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when a screen reader is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isScreenReaderEnabled
   */ isScreenReaderEnabled: function() {
        return new Promise(function(resolve, reject) {
            if (_Platform.default.OS === 'android') {
                if (_NativeAccessibilityInfo.default != null) {
                    _NativeAccessibilityInfo.default.isTouchExplorationEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentVoiceOverState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether Accessibility Service is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when any service is enabled and `false` otherwise.
   *
   * @platform android
   *
   * See https://reactnative.dev/docs/accessibilityinfo/#isaccessibilityserviceenabled-android
   */ isAccessibilityServiceEnabled: function() {
        return new Promise(function(resolve, reject) {
            if (_Platform.default.OS === 'android') {
                if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled != null) {
                    _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                reject(null);
            }
        });
    },
    /**
   * Add an event handler. Supported events:
   *
   * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.
   *   The argument to the event handler is a boolean. The boolean is `true` when a reduce
   *   motion is enabled (or when "Transition Animation Scale" in "Developer options" is
   *   "Animation off") and `false` otherwise.
   * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument
   *   to the event handler is a boolean. The boolean is `true` when a screen
   *   reader is enabled and `false` otherwise.
   *
   * These events are only supported on iOS:
   *
   * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.
   *   The argument to the event handler is a boolean. The boolean is `true` when a bold text
   *   is enabled and `false` otherwise.
   * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.
   *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale
   *   is enabled and `false` otherwise.
   * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle
   *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert
   *   colors is enabled and `false` otherwise.
   * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency
   *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`
   *   when a reduce transparency is enabled and `false` otherwise.
   * - `announcementFinished`: iOS-only event. Fires when the screen reader has
   *   finished making an announcement. The argument to the event handler is a
   *   dictionary with these keys:
   *     - `announcement`: The string announced by the screen reader.
   *     - `success`: A boolean indicating whether the announcement was
   *       successfully made.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#addeventlistener
   */ addEventListener: function(eventName, // $FlowIssue[incompatible-type] - Flow bug with unions and generics (T128099423)
    handler) {
        var deviceEventName = EventNames.get(eventName);
        return deviceEventName == null ? {
            remove: function() {}
        } : _RCTDeviceEventEmitter.default.addListener(deviceEventName, handler);
    },
    /**
   * Set accessibility focus to a React component.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#setaccessibilityfocus
   */ setAccessibilityFocus: function(reactTag) {
        (0, _legacySendAccessibilityEvent.default)(reactTag, 'focus');
    },
    /**
   * Send a named accessibility event to a HostComponent.
   */ sendAccessibilityEvent: function(handle, eventType) {
        // iOS only supports 'focus' event types
        if (_Platform.default.OS === 'ios' && eventType === 'click') {
            return;
        }
        // route through React renderer to distinguish between Fabric and non-Fabric handles
        (0, _RendererProxy.sendAccessibilityEvent)(handle, eventType);
    },
    /**
   * Post a string to be announced by the screen reader.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#announceforaccessibility
   */ announceForAccessibility: function(announcement) {
        if (_Platform.default.OS === 'android') {
            _NativeAccessibilityInfo.default == null ? void 0 : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);
        } else {
            _NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.announceForAccessibility(announcement);
        }
    },
    /**
   * Post a string to be announced by the screen reader.
   * - `announcement`: The string announced by the screen reader.
   * - `options`: An object that configures the reading options.
   *   - `queue`: The announcement will be queued behind existing announcements. iOS only.
   */ announceForAccessibilityWithOptions: function(announcement, options) {
        if (_Platform.default.OS === 'android') {
            _NativeAccessibilityInfo.default == null ? void 0 : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);
        } else {
            if (_NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.announceForAccessibilityWithOptions) {
                _NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.announceForAccessibilityWithOptions(announcement, options);
            } else {
                _NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.announceForAccessibility(announcement);
            }
        }
    },
    /**
   * Get the recommended timeout for changes to the UI needed by this user.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#getrecommendedtimeoutmillis
   */ getRecommendedTimeoutMillis: function(originalTimeout) {
        if (_Platform.default.OS === 'android') {
            return new Promise(function(resolve, reject) {
                if (_NativeAccessibilityInfo.default == null ? void 0 : _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis) {
                    _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis(originalTimeout, resolve);
                } else {
                    resolve(originalTimeout);
                }
            });
        } else {
            return Promise.resolve(originalTimeout);
        }
    }
};
var _default = AccessibilityInfo;


}),
27890: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('AccessibilityManager');


}),
28141: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeI18nManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2461));
var i18nConstants = getI18nManagerConstants();
function getI18nManagerConstants() {
    if (_NativeI18nManager.default) {
        var _NativeI18nManager_getConstants = _NativeI18nManager.default.getConstants(), isRTL = _NativeI18nManager_getConstants.isRTL, doLeftAndRightSwapInRTL = _NativeI18nManager_getConstants.doLeftAndRightSwapInRTL, localeIdentifier = _NativeI18nManager_getConstants.localeIdentifier;
        return {
            isRTL: isRTL,
            doLeftAndRightSwapInRTL: doLeftAndRightSwapInRTL,
            localeIdentifier: localeIdentifier
        };
    }
    return {
        isRTL: false,
        doLeftAndRightSwapInRTL: true
    };
}
module.exports = {
    getConstants: function() {
        return i18nConstants;
    },
    allowRTL: function(shouldAllow) {
        if (!_NativeI18nManager.default) {
            return;
        }
        _NativeI18nManager.default.allowRTL(shouldAllow);
    },
    forceRTL: function(shouldForce) {
        if (!_NativeI18nManager.default) {
            return;
        }
        _NativeI18nManager.default.forceRTL(shouldForce);
    },
    swapLeftAndRightInRTL: function(flipStyles) {
        if (!_NativeI18nManager.default) {
            return;
        }
        _NativeI18nManager.default.swapLeftAndRightInRTL(flipStyles);
    },
    isRTL: i18nConstants.isRTL,
    doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL
};


}),
28308: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('AppState');


}),
29723: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31043));
var _LayoutAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45519));
var _dismissKeyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98425));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _NativeKeyboardObserver = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81991));
/**
 * `Keyboard` module to control keyboard events.
 *
 * ### Usage
 *
 * The Keyboard module allows you to listen for native events and react to them, as
 * well as make changes to the keyboard, like dismissing it.
 *
 *```
 * import React, { Component } from 'react';
 * import { Keyboard, TextInput } from 'react-native';
 *
 * class Example extends Component {
 *   componentWillMount () {
 *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);
 *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);
 *   }
 *
 *   componentWillUnmount () {
 *     this.keyboardDidShowListener.remove();
 *     this.keyboardDidHideListener.remove();
 *   }
 *
 *   _keyboardDidShow () {
 *     alert('Keyboard Shown');
 *   }
 *
 *   _keyboardDidHide () {
 *     alert('Keyboard Hidden');
 *   }
 *
 *   render() {
 *     return (
 *       <TextInput
 *         onSubmitEditing={Keyboard.dismiss}
 *       />
 *     );
 *   }
 * }
 *```
 */ var Keyboard = /*#__PURE__*/ function() {
    "use strict";
    function Keyboard() {
        var _this = this;
        this._emitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeKeyboardObserver.default);
        this.addListener('keyboardDidShow', function(ev) {
            _this._currentlyShowing = ev;
        });
        this.addListener('keyboardDidHide', function(_ev) {
            _this._currentlyShowing = null;
        });
    }
    var _proto = Keyboard.prototype;
    /**
   * The `addListener` function connects a JavaScript function to an identified native
   * keyboard notification event.
   *
   * This function then returns the reference to the listener.
   *
   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This
   *can be any of the following:
   *
   * - `keyboardWillShow`
   * - `keyboardDidShow`
   * - `keyboardWillHide`
   * - `keyboardDidHide`
   * - `keyboardWillChangeFrame`
   * - `keyboardDidChangeFrame`
   *
   * Android versions prior to API 30 rely on observing layout changes when
   * `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.
   *
   * `keyboardWillShow` as well as `keyboardWillHide` are not available on Android since there is
   * no native corresponding event.
   *
   * @param {function} callback function to be called when the event fires.
   */ _proto.addListener = function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener);
    };
    /**
   * Removes all listeners for a specific event type.
   *
   * @param {string} eventType The native event string listeners are watching which will be removed.
   */ _proto.removeAllListeners = function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
    };
    /**
   * Dismisses the active keyboard and removes focus.
   */ _proto.dismiss = function dismiss() {
        (0, _dismissKeyboard.default)();
    };
    /**
   * Whether the keyboard is last known to be visible.
   */ _proto.isVisible = function isVisible() {
        return !!this._currentlyShowing;
    };
    /**
   * Return the metrics of the soft-keyboard if visible.
   */ _proto.metrics = function metrics() {
        var _this__currentlyShowing;
        return (_this__currentlyShowing = this._currentlyShowing) == null ? void 0 : _this__currentlyShowing.endCoordinates;
    };
    /**
   * Useful for syncing TextInput (or other keyboard accessory view) size of
   * position changes with keyboard movements.
   */ _proto.scheduleLayoutAnimation = function scheduleLayoutAnimation(event) {
        var duration = event.duration, easing = event.easing;
        if (duration != null && duration !== 0) {
            _LayoutAnimation.default.configureNext({
                duration: duration,
                update: {
                    duration: duration,
                    type: easing != null && _LayoutAnimation.default.Types[easing] || 'keyboard'
                }
            });
        }
    };
    return Keyboard;
}();
module.exports = new Keyboard();


}),
30225: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var deepFreezeAndThrowOnMutationInDev = __webpack_require__(91858);
/**
 * A collection of Unicode sequences for various characters and emoji.
 *
 *  - More explicit than using the sequences directly in code.
 *  - Source code should be limited to ASCII.
 *  - Less chance of typos.
 */ var UTFSequence = deepFreezeAndThrowOnMutationInDev({
    BOM: '\ufeff',
    BULLET: '\u2022',
    BULLET_SP: '\u00A0\u2022\u00A0',
    MIDDOT: '\u00B7',
    MIDDOT_SP: '\u00A0\u00B7\u00A0',
    MIDDOT_KATAKANA: '\u30FB',
    MDASH: '\u2014',
    MDASH_SP: '\u00A0\u2014\u00A0',
    NDASH: '\u2013',
    NDASH_SP: '\u00A0\u2013\u00A0',
    NEWLINE: '\u000A',
    NBSP: '\u00A0',
    PIZZA: '\uD83C\uDF55',
    TRIANGLE_LEFT: '\u25c0',
    TRIANGLE_RIGHT: '\u25b6'
});
var _default = UTFSequence;


}),
31004: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _type_of = __webpack_require__(29936);
var _PressabilityDebug = __webpack_require__(9966);
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35180));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _SoundManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19920));
var _BoundingDimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(39449));
var _Position = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34484));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var extractSingleTouch = function(nativeEvent) {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;
    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
};
/**
 * `Touchable`: Taps done right.
 *
 * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`
 * will measure time/geometry and tells you when to give feedback to the user.
 *
 * ====================== Touchable Tutorial ===============================
 * The `Touchable` mixin helps you handle the "press" interaction. It analyzes
 * the geometry of elements, and observes when another responder (scroll view
 * etc) has stolen the touch lock. It notifies your component when it should
 * give feedback to the user. (bouncing/highlighting/unhighlighting).
 *
 * - When a touch was activated (typically you highlight)
 * - When a touch was deactivated (typically you unhighlight)
 * - When a touch was "pressed" - a touch ended while still within the geometry
 *   of the element, and no other element (like scroller) has "stolen" touch
 *   lock ("responder") (Typically you bounce the element).
 *
 * A good tap interaction isn't as simple as you might think. There should be a
 * slight delay before showing a highlight when starting a touch. If a
 * subsequent touch move exceeds the boundary of the element, it should
 * unhighlight, but if that same touch is brought back within the boundary, it
 * should rehighlight again. A touch can move in and out of that boundary
 * several times, each time toggling highlighting, but a "press" is only
 * triggered if that touch ends while within the element's boundary and no
 * scroller (or anything else) has stolen the lock on touches.
 *
 * To create a new type of component that handles interaction using the
 * `Touchable` mixin, do the following:
 *
 * - Initialize the `Touchable` state.
 *
 *   getInitialState: function() {
 *     return merge(this.touchableGetInitialState(), yourComponentState);
 *   }
 *
 * - Choose the rendered component who's touches should start the interactive
 *   sequence. On that rendered node, forward all `Touchable` responder
 *   handlers. You can choose any rendered node you like. Choose a node whose
 *   hit target you'd like to instigate the interaction sequence:
 *
 *   // In render function:
 *   return (
 *     <View
 *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}
 *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}
 *       onResponderGrant={this.touchableHandleResponderGrant}
 *       onResponderMove={this.touchableHandleResponderMove}
 *       onResponderRelease={this.touchableHandleResponderRelease}
 *       onResponderTerminate={this.touchableHandleResponderTerminate}>
 *       <View>
 *         Even though the hit detection/interactions are triggered by the
 *         wrapping (typically larger) node, we usually end up implementing
 *         custom logic that highlights this inner one.
 *       </View>
 *     </View>
 *   );
 *
 * - You may set up your own handlers for each of these events, so long as you
 *   also invoke the `touchable*` handlers inside of your custom handler.
 *
 * - Implement the handlers on your component class in order to provide
 *   feedback to the user. See documentation for each of these class methods
 *   that you should implement.
 *
 *   touchableHandlePress: function() {
 *      this.performBounceAnimation();  // or whatever you want to do.
 *   },
 *   touchableHandleActivePressIn: function() {
 *     this.beginHighlighting(...);  // Whatever you like to convey activation
 *   },
 *   touchableHandleActivePressOut: function() {
 *     this.endHighlighting(...);  // Whatever you like to convey deactivation
 *   },
 *
 * - There are more advanced methods you can implement (see documentation below):
 *   touchableGetHighlightDelayMS: function() {
 *     return 20;
 *   }
 *   // In practice, *always* use a predeclared constant (conserve memory).
 *   touchableGetPressRectOffset: function() {
 *     return {top: 20, left: 20, right: 20, bottom: 100};
 *   }
 */ /**
 * Touchable states.
 */ var States = {
    NOT_RESPONDER: 'NOT_RESPONDER',
    RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',
    RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',
    RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
    RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
    ERROR: 'ERROR'
};
/*
 * Quick lookup map for states that are considered to be "active"
 */ var baseStatesConditions = {
    NOT_RESPONDER: false,
    RESPONDER_INACTIVE_PRESS_IN: false,
    RESPONDER_INACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_PRESS_IN: false,
    RESPONDER_ACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_LONG_PRESS_IN: false,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
    ERROR: false
};
var IsActive = _extends._({}, baseStatesConditions, {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
});
/**
 * Quick lookup for states that are considered to be "pressing" and are
 * therefore eligible to result in a "selection" if the press stops.
 */ var IsPressingIn = _extends._({}, baseStatesConditions, {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
var IsLongPressingIn = _extends._({}, baseStatesConditions, {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
/**
 * Inputs to the state machine.
 */ var Signals = {
    DELAY: 'DELAY',
    RESPONDER_GRANT: 'RESPONDER_GRANT',
    RESPONDER_RELEASE: 'RESPONDER_RELEASE',
    RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',
    ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',
    LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',
    LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'
};
/**
 * Mapping from States x Signals => States
 */ var Transitions = {
    NOT_RESPONDER: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
        RESPONDER_RELEASE: States.ERROR,
        RESPONDER_TERMINATED: States.ERROR,
        ENTER_PRESS_RECT: States.ERROR,
        LEAVE_PRESS_RECT: States.ERROR,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
        DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
        DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
        LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
        DELAY: States.NOT_RESPONDER,
        RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.NOT_RESPONDER,
        LEAVE_PRESS_RECT: States.NOT_RESPONDER,
        LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
};
// ==== Typical Constants for integrating into UI components ====
// var HIT_EXPAND_PX = 20;
// var HIT_VERT_OFFSET_PX = 10;
var HIGHLIGHT_DELAY_MS = 130;
var PRESS_EXPAND_PX = 20;
var LONG_PRESS_THRESHOLD = 500;
var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
var LONG_PRESS_ALLOWED_MOVEMENT = 10;
// Default amount "active" region protrudes beyond box
/**
 * By convention, methods prefixed with underscores are meant to be @private,
 * and not @protected. Mixers shouldn't access them - not even to provide them
 * as callback handlers.
 *
 *
 * ========== Geometry =========
 * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`
 * is an abstract box that is extended beyond the `HitRect`.
 *
 *  +--------------------------+
 *  |                          | - "Start" events in `HitRect` cause `HitRect`
 *  |  +--------------------+  |   to become the responder.
 *  |  |  +--------------+  |  | - `HitRect` is typically expanded around
 *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.
 *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,
 *  |  |  |              |  |  |   and before letting up, the Visual React
 *  |  |  +--------------+  |  |   will become "active". This makes it eligible
 *  |  |     HitRect        |  |   for being highlighted (so long as the
 *  |  +--------------------+  |   press remains in the `PressRect`).
 *  |        PressRect     o   |
 *  +----------------------|---+
 *           Out Region    |
 *                         +-----+ This gap between the `HitRect` and
 *                                 `PressRect` allows a touch to move far away
 *                                 from the original hit rect, and remain
 *                                 highlighted, and eligible for a "Press".
 *                                 Customize this via
 *                                 `touchableGetPressRectOffset()`.
 *
 *
 *
 * ======= State Machine =======
 *
 * +-------------+ <---+ RESPONDER_RELEASE
 * |NOT_RESPONDER|
 * +-------------+ <---+ RESPONDER_TERMINATED
 *     +
 *     | RESPONDER_GRANT (HitRect)
 *     v
 * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+
 * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|
 * +---------------------------+          +-------------------------+                +------------------------------+
 *     +            ^                         +           ^                                 +           ^
 *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_
 *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT
 *     |            |                         |           |                                 |           |
 *     v            +                         v           +                                 v           +
 * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+
 * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|
 * +----------------------------+         +--------------------------+               +-------------------------------+
 *
 * T + DELAY => LONG_PRESS_DELAY_MS + DELAY
 *
 * Not drawn are the side effects of each transition. The most important side
 * effect is the `touchableHandlePress` abstract method invocation that occurs
 * when a responder is released while in either of the "Press" states.
 *
 * The other important side effects are the highlight abstract method
 * invocations (internal callbacks) to be implemented by the mixer.
 *
 *
 * @lends Touchable.prototype
 */ var TouchableMixin = {
    componentDidMount: function componentDidMount() {
        if (!_Platform.default.isTV) {
            return;
        }
    },
    /**
   * Clear all timeouts on unmount
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ componentWillUnmount: function componentWillUnmount() {
        this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
        this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
        this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    /**
   * It's prefer that mixins determine state in this way, having the class
   * explicitly mix the state in the one and only `getInitialState` method.
   *
   * @return {object} State object to be placed inside of
   * `this.state.touchable`.
   */ touchableGetInitialState: function touchableGetInitialState() {
        return {
            touchable: {
                touchState: undefined,
                responderID: null
            }
        };
    },
    // ==== Hooks to Gesture Responder system ====
    /**
   * Must return true if embedded in a native platform scroll view.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
        return !this.props.rejectResponderTermination;
    },
    /**
   * Must return true to start the process of `Touchable`.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
        return !this.props.disabled;
    },
    /**
   * Return true to cancel press on long press.
   */ touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
        return true;
    },
    /**
   * Place as callback for a DOM element's `onResponderGrant` event.
   * @param {SyntheticEvent} e Synthetic event from event system.
   *
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
        var dispatchID = e.currentTarget;
        // Since e is used in a callback invoked on another event loop
        // (as in setTimeout etc), we need to call e.persist() on the
        // event to make sure it doesn't get reused in the event object pool.
        e.persist();
        this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
        this.pressOutDelayTimeout = null;
        this.state.touchable.touchState = States.NOT_RESPONDER;
        this.state.touchable.responderID = dispatchID;
        this._receiveSignal(Signals.RESPONDER_GRANT, e);
        var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
        delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
        if (delayMS !== 0) {
            this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
        } else {
            this._handleDelay(e);
        }
        var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
        longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
        this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    /**
   * Place as callback for a DOM element's `onResponderRelease` event.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
        this.pressInLocation = null;
        this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    /**
   * Place as callback for a DOM element's `onResponderTerminate` event.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
        this.pressInLocation = null;
        this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    /**
   * Place as callback for a DOM element's `onResponderMove` event.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderMove: function touchableHandleResponderMove(e) {
        // Measurement may not have returned yet.
        if (!this.state.touchable.positionOnActivate) {
            return;
        }
        var positionOnActivate = this.state.touchable.positionOnActivate;
        var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
        var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
            left: PRESS_EXPAND_PX,
            right: PRESS_EXPAND_PX,
            top: PRESS_EXPAND_PX,
            bottom: PRESS_EXPAND_PX
        };
        var pressExpandLeft = pressRectOffset.left;
        var pressExpandTop = pressRectOffset.top;
        var pressExpandRight = pressRectOffset.right;
        var pressExpandBottom = pressRectOffset.bottom;
        var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;
        if (hitSlop) {
            pressExpandLeft += hitSlop.left || 0;
            pressExpandTop += hitSlop.top || 0;
            pressExpandRight += hitSlop.right || 0;
            pressExpandBottom += hitSlop.bottom || 0;
        }
        var touch = extractSingleTouch(e.nativeEvent);
        var pageX = touch && touch.pageX;
        var pageY = touch && touch.pageY;
        if (this.pressInLocation) {
            var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
            if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
                this._cancelLongPressDelayTimeout();
            }
        }
        var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
        if (isTouchWithinActive) {
            var prevState = this.state.touchable.touchState;
            this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
            var curState = this.state.touchable.touchState;
            if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {
                // fix for t7967420
                this._cancelLongPressDelayTimeout();
            }
        } else {
            this._cancelLongPressDelayTimeout();
            this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
        }
    },
    /**
   * Invoked when the item receives focus. Mixers might override this to
   * visually distinguish the `VisualRect` so that the user knows that it
   * currently has the focus. Most platforms only support a single element being
   * focused at a time, in which case there may have been a previously focused
   * element that was blurred just prior to this. This can be overridden when
   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleFocus: function touchableHandleFocus(e) {
        this.props.onFocus && this.props.onFocus(e);
    },
    /**
   * Invoked when the item loses focus. Mixers might override this to
   * visually distinguish the `VisualRect` so that the user knows that it
   * no longer has focus. Most platforms only support a single element being
   * focused at a time, in which case the focus may have moved to another.
   * This can be overridden when using
   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleBlur: function touchableHandleBlur(e) {
        this.props.onBlur && this.props.onBlur(e);
    },
    // ==== Abstract Application Callbacks ====
    /**
   * Invoked when the item should be highlighted. Mixers should implement this
   * to visually distinguish the `VisualRect` so that the user knows that
   * releasing a touch will result in a "selection" (analog to click).
   *
   * @abstract
   * touchableHandleActivePressIn: function,
   */ /**
   * Invoked when the item is "active" (in that it is still eligible to become
   * a "select") but the touch has left the `PressRect`. Usually the mixer will
   * want to unhighlight the `VisualRect`. If the user (while pressing) moves
   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked
   * again and the mixer should probably highlight the `VisualRect` again. This
   * event will not fire on an `touchEnd/mouseUp` event, only move events while
   * the user is depressing the mouse/touch.
   *
   * @abstract
   * touchableHandleActivePressOut: function
   */ /**
   * Invoked when the item is "selected" - meaning the interaction ended by
   * letting up while the item was either in the state
   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.
   *
   * @abstract
   * touchableHandlePress: function
   */ /**
   * Invoked when the item is long pressed - meaning the interaction ended by
   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If
   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will
   * be called as it normally is. If `touchableHandleLongPress` is provided, by
   * default any `touchableHandlePress` callback will not be invoked. To
   * override this default behavior, override `touchableLongPressCancelsPress`
   * to return false. As a result, `touchableHandlePress` will be called when
   * lifting up, even if `touchableHandleLongPress` has also been called.
   *
   * @abstract
   * touchableHandleLongPress: function
   */ /**
   * Returns the number of millis to wait before triggering a highlight.
   *
   * @abstract
   * touchableGetHighlightDelayMS: function
   */ /**
   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive
   * numbers mean the size expands outwards.
   *
   * @abstract
   * touchableGetPressRectOffset: function
   */ // ==== Internal Logic ====
    /**
   * Measures the `HitRect` node on activation. The Bounding rectangle is with
   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`
   * should result in points that are in the same coordinate system as an
   * event's `globalX/globalY` data values.
   *
   * - Consider caching this for the lifetime of the component, or possibly
   *   being able to share this cache between any `ScrollMap` view.
   *
   * @sideeffects
   * @private
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
        var responderID = this.state.touchable.responderID;
        if (responderID == null) {
            return;
        }
        if (typeof responderID === 'number') {
            _UIManager.default.measure(responderID, this._handleQueryLayout);
        } else {
            responderID.measure(this._handleQueryLayout);
        }
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
        //don't do anything UIManager failed to measure node
        if (!l && !t && !w && !h && !globalX && !globalY) {
            return;
        }
        this.state.touchable.positionOnActivate && _Position.default.release(this.state.touchable.positionOnActivate);
        this.state.touchable.dimensionsOnActivate && _BoundingDimensions.default.release(this.state.touchable.dimensionsOnActivate);
        this.state.touchable.positionOnActivate = _Position.default.getPooled(globalX, globalY);
        this.state.touchable.dimensionsOnActivate = _BoundingDimensions.default.getPooled(w, h);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _handleDelay: function _handleDelay(e) {
        this.touchableDelayTimeout = null;
        this._receiveSignal(Signals.DELAY, e);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _handleLongDelay: function _handleLongDelay(e) {
        this.longPressDelayTimeout = null;
        var curState = this.state.touchable.touchState;
        if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
            this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
        }
    },
    /**
   * Receives a state machine signal, performs side effects of the transition
   * and stores the new state. Validates the transition as well.
   *
   * @param {Signals} signal State machine signal.
   * @throws Error if invalid state transition or unrecognized signal.
   * @sideeffects
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _receiveSignal: function _receiveSignal(signal, e) {
        var responderID = this.state.touchable.responderID;
        var curState = this.state.touchable.touchState;
        var nextState = Transitions[curState] && Transitions[curState][signal];
        if (!responderID && signal === Signals.RESPONDER_RELEASE) {
            return;
        }
        if (!nextState) {
            throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + _type_of._(this.state.touchable.responderID) === 'number' ? this.state.touchable.responderID : 'host component' + '`');
        }
        if (nextState === States.ERROR) {
            throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + _type_of._(this.state.touchable.responderID) === 'number' ? this.state.touchable.responderID : '<<host component>>' + '`');
        }
        if (curState !== nextState) {
            this._performSideEffectsForTransition(curState, nextState, signal, e);
            this.state.touchable.touchState = nextState;
        }
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
        this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
        this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
        return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _savePressInLocation: function _savePressInLocation(e) {
        var touch = extractSingleTouch(e.nativeEvent);
        var pageX = touch && touch.pageX;
        var pageY = touch && touch.pageY;
        var locationX = touch && touch.locationX;
        var locationY = touch && touch.locationY;
        this.pressInLocation = {
            pageX: pageX,
            pageY: pageY,
            locationX: locationX,
            locationY: locationY
        };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
        var deltaX = aX - bX;
        var deltaY = aY - bY;
        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    /**
   * Will perform a transition between touchable states, and identify any
   * highlighting or unhighlighting that must be performed for this particular
   * transition.
   *
   * @param {States} curState Current Touchable state.
   * @param {States} nextState Next Touchable state.
   * @param {Signal} signal Signal that triggered the transition.
   * @param {Event} e Native event.
   * @sideeffects
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
        var curIsHighlight = this._isHighlight(curState);
        var newIsHighlight = this._isHighlight(nextState);
        var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;
        if (isFinalSignal) {
            this._cancelLongPressDelayTimeout();
        }
        var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;
        var isActiveTransition = !IsActive[curState] && IsActive[nextState];
        if (isInitialTransition || isActiveTransition) {
            this._remeasureMetricsOnActivation();
        }
        if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
            this.touchableHandleLongPress && this.touchableHandleLongPress(e);
        }
        if (newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);
        } else if (!newIsHighlight && curIsHighlight) {
            this._endHighlight(e);
        }
        if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
            var hasLongPressHandler = !!this.props.onLongPress;
            var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && // We *are* long pressing.. // But either has no long handler
            (!hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.
            var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
            if (shouldInvokePress && this.touchableHandlePress) {
                if (!newIsHighlight && !curIsHighlight) {
                    // we never highlighted because of delay, but we should highlight now
                    this._startHighlight(e);
                    this._endHighlight(e);
                }
                if (_Platform.default.OS === 'android' && !this.props.touchSoundDisabled) {
                    _SoundManager.default.playTouchSound();
                }
                this.touchableHandlePress(e);
            }
        }
        this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
        this.touchableDelayTimeout = null;
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _startHighlight: function _startHighlight(e) {
        this._savePressInLocation(e);
        this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _endHighlight: function _endHighlight(e) {
        var _this = this;
        if (this.touchableHandleActivePressOut) {
            if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
                this.pressOutDelayTimeout = setTimeout(function() {
                    _this.touchableHandleActivePressOut(e);
                }, this.touchableGetPressOutDelayMS());
            } else {
                this.touchableHandleActivePressOut(e);
            }
        }
    },
    withoutDefaultFocusAndBlur: {}
};
/**
 * Provide an optional version of the mixin where `touchableHandleFocus` and
 * `touchableHandleBlur` can be overridden. This allows appropriate defaults to
 * be set on TV platforms, without breaking existing implementations of
 * `Touchable`.
 */ var touchableHandleFocus = TouchableMixin.touchableHandleFocus, touchableHandleBlur = TouchableMixin.touchableHandleBlur, TouchableMixinWithoutDefaultFocusAndBlur = _object_without_properties_loose._(TouchableMixin, [
    "touchableHandleFocus",
    "touchableHandleBlur"
]);
TouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;
var Touchable = {
    Mixin: TouchableMixin,
    /**
   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).
   */ renderDebugView: function(param) {
        var color = param.color, hitSlop = param.hitSlop;
        if (false) {}
        return null;
    }
};
var _default = Touchable;


}),
31497: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _RCTSafeAreaViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(95300), exports));
var _default = _RCTSafeAreaViewNativeComponent.default;


}),
31935: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _Image = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57597));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93671));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var _default = (0, _createAnimatedComponent.default)(_Image.default);


}),
32661: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31043));
var _NativeDevSettings = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83165));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var DevSettings = {
    addMenuItem: function(title, handler) {},
    reload: function(reason) {},
    onFastRefresh: function() {}
};
if (false) { var emitter, subscriptions }
module.exports = DevSettings;


}),
3317: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return SectionList;
    }
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _virtualizedlists = __webpack_require__(83712);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var SectionList = /*#__PURE__*/ function(_React_PureComponent) {
    _inherits._(SectionList, _React_PureComponent);
    function SectionList() {
        var _this;
        _this = _React_PureComponent.apply(this, arguments) || this, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ _this._captureRef = function(ref) {
            _this._wrapperListRef = ref;
        };
        return _this;
    }
    var _proto = SectionList.prototype;
    /**
   * Scrolls to the item at the specified `sectionIndex` and `itemIndex` (within the section)
   * positioned in the viewable area such that `viewPosition` 0 places it at the top (and may be
   * covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle. `viewOffset` is a
   * fixed number of pixels to offset the final target position, e.g. to compensate for sticky
   * headers.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */ _proto.scrollToLocation = function scrollToLocation(params) {
        if (this._wrapperListRef != null) {
            this._wrapperListRef.scrollToLocation(params);
        }
    };
    /**
   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.
   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
   * taps on items or by navigation actions.
   */ _proto.recordInteraction = function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        listRef && listRef.recordInteraction();
    };
    /**
   * Displays the scroll indicators momentarily.
   *
   * @platform ios
   */ _proto.flashScrollIndicators = function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        listRef && listRef.flashScrollIndicators();
    };
    /**
   * Provides a handle to the underlying scroll responder.
   */ _proto.getScrollResponder = function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
            return listRef.getScrollResponder();
        }
    };
    _proto.getScrollableNode = function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
            return listRef.getScrollableNode();
        }
    };
    _proto.setNativeProps = function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
            listRef.setNativeProps(props);
        }
    };
    _proto.render = function render() {
        var _this_props = this.props, _stickySectionHeadersEnabled = _this_props.stickySectionHeadersEnabled, restProps = _object_without_properties_loose._(_this_props, [
            "stickySectionHeadersEnabled"
        ]);
        var stickySectionHeadersEnabled = _stickySectionHeadersEnabled != null ? _stickySectionHeadersEnabled : _Platform.default.OS === 'ios';
        return(/* $FlowFixMe[incompatible-type] Error revealed after improved builtin
       * React utility types */ /* $FlowFixMe[incompatible-type] Error revealed after improved builtin
       * React utility types */ /*#__PURE__*/ _react.createElement(_virtualizedlists.VirtualizedSectionList, _extends._({}, restProps, {
            stickySectionHeadersEnabled: stickySectionHeadersEnabled,
            ref: this._captureRef,
            // $FlowFixMe[missing-local-annot]
            getItemCount: function(items) {
                return items.length;
            },
            // $FlowFixMe[missing-local-annot]
            getItem: function(items, index) {
                return items[index];
            }
        })));
    };
    return SectionList;
}(_react.PureComponent);


}),
34158: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedProps;
    }
}));
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _sliced_to_array = __webpack_require__(21193);
var _RendererProxy = __webpack_require__(14288);
var _AnimatedEvent = __webpack_require__(62137);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var _AnimatedObject = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11213));
var _AnimatedStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18717));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
function createAnimatedProps(inputProps) {
    var nodeKeys = [];
    var nodes = [];
    var props = {};
    var keys = Object.keys(inputProps);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        var value = inputProps[key];
        if (key === 'style') {
            var node = new _AnimatedStyle.default(value);
            nodeKeys.push(key);
            nodes.push(node);
            props[key] = node;
        } else if (value instanceof _AnimatedNode.default) {
            var node1 = value;
            nodeKeys.push(key);
            nodes.push(node1);
            props[key] = node1;
        } else {
            var node2 = _AnimatedObject.default.from(value);
            if (node2 == null) {
                props[key] = value;
            } else {
                nodeKeys.push(key);
                nodes.push(node2);
                props[key] = node2;
            }
        }
    }
    return [
        nodeKeys,
        nodes,
        props
    ];
}
var _nodeKeys = /*#__PURE__*/ _class_private_field_loose_key._("_nodeKeys"), _nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes");
var AnimatedProps = /*#__PURE__*/ function(AnimatedNode) {
    _inherits._(AnimatedProps, AnimatedNode);
    function AnimatedProps(inputProps, callback) {
        var _this;
        _this = AnimatedNode.call(this) || this, Object.defineProperty(_this, _nodeKeys, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        }), _this._animatedView = null;
        var _createAnimatedProps = _sliced_to_array._(createAnimatedProps(inputProps), 3), nodeKeys = _createAnimatedProps[0], nodes = _createAnimatedProps[1], props = _createAnimatedProps[2];
        _class_private_field_loose_base._(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _this._props = props;
        _this._callback = callback;
        return _this;
    }
    var _proto = AnimatedProps.prototype;
    _proto.__getValue = function __getValue() {
        var props = {};
        var keys = Object.keys(this._props);
        for(var ii = 0, length = keys.length; ii < length; ii++){
            var key = keys[ii];
            var value = this._props[key];
            if (value instanceof _AnimatedNode.default) {
                props[key] = value.__getValue();
            } else if (value instanceof _AnimatedEvent.AnimatedEvent) {
                props[key] = value.__getHandler();
            } else {
                props[key] = value;
            }
        }
        return props;
    };
    _proto.__getAnimatedValue = function __getAnimatedValue() {
        var props = {};
        var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var key = nodeKeys[ii];
            var node = nodes[ii];
            props[key] = node.__getAnimatedValue();
        }
        return props;
    };
    _proto.__attach = function __attach() {
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__addChild(this);
        }
    };
    _proto.__detach = function __detach() {
        if (this.__isNative && this._animatedView) {
            this.__disconnectAnimatedView();
        }
        this._animatedView = null;
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__removeChild(this);
        }
        AnimatedNode.prototype.__detach.call(this);
    };
    _proto.update = function update() {
        this._callback();
    };
    _proto.__makeNative = function __makeNative(platformConfig) {
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__makeNative(platformConfig);
        }
        if (!this.__isNative) {
            this.__isNative = true;
            // Since this does not call the super.__makeNative, we need to store the
            // supplied platformConfig here, before calling __connectAnimatedView
            // where it will be needed to traverse the graph of attached values.
            AnimatedNode.prototype.__setPlatformConfig.call(this, platformConfig);
            if (this._animatedView) {
                this.__connectAnimatedView();
            }
        }
    };
    _proto.setNativeView = function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
            return;
        }
        this._animatedView = animatedView;
        if (this.__isNative) {
            this.__connectAnimatedView();
        }
    };
    _proto.__connectAnimatedView = function __connectAnimatedView() {
        (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = (0, _RendererProxy.findNodeHandle)(this._animatedView);
        (0, _invariant.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        _NativeAnimatedHelper.default.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
    };
    _proto.__disconnectAnimatedView = function __disconnectAnimatedView() {
        (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = (0, _RendererProxy.findNodeHandle)(this._animatedView);
        (0, _invariant.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        _NativeAnimatedHelper.default.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
    };
    _proto.__restoreDefaultValues = function __restoreDefaultValues() {
        // When using the native driver, view properties need to be restored to
        // their default values manually since react no longer tracks them. This
        // is needed to handle cases where a prop driven by native animated is removed
        // after having been changed natively by an animation.
        if (this.__isNative) {
            _NativeAnimatedHelper.default.API.restoreDefaultValues(this.__getNativeTag());
        }
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        var platformConfig = this.__getPlatformConfig();
        var propsConfig = {};
        var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
        var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var key = nodeKeys[ii];
            var node = nodes[ii];
            node.__makeNative(platformConfig);
            propsConfig[key] = node.__getNativeTag();
        }
        return {
            type: 'props',
            props: propsConfig
        };
    };
    return AnimatedProps;
}(_AnimatedNode.default);


}),
34484: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _PooledClass = /*#__PURE__*/ _interop_require_default._(__webpack_require__(48572));
var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;
/**
 * Position does not expose methods for construction via an `HTMLDOMElement`,
 * because it isn't meaningful to construct such a thing without first defining
 * a frame of reference.
 *
 * @param {number} windowStartKey Key that window starts at.
 * @param {number} windowEndKey Key that window ends at.
 */ function Position(left, top) {
    this.left = left;
    this.top = top;
}
Position.prototype.destructor = function() {
    this.left = null;
    this.top = null;
};
_PooledClass.default.addPoolingTo(Position, twoArgumentPooler);
module.exports = Position;


}),
3468: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18504));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _TouchableNativeFeedback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(48073));
var _TouchableOpacity = /*#__PURE__*/ _interop_require_default._(__webpack_require__(50181));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
  A basic button component that should render nicely on any platform. Supports a
  minimal level of customization.

  If this button doesn't look right for your app, you can build your own button
  using [TouchableOpacity](touchableopacity) or
  [TouchableWithoutFeedback](touchablewithoutfeedback). For inspiration, look at
  the [source code for this button component][button:source]. Or, take a look at
  the [wide variety of button components built by the community]
  [button:examples].

  [button:source]:
  https://github.com/facebook/react-native/blob/HEAD/Libraries/Components/Button.js

  [button:examples]:
  https://js.coach/?menu%5Bcollections%5D=React%20Native&page=1&query=button

  ```jsx
  <Button
    onPress={onPressLearnMore}
    title="Learn More"
    color="#841584"
    accessibilityLabel="Learn more about this purple button"
  />
  ```

  ```SnackPlayer name=Button%20Example
  import React from 'react';
  import { StyleSheet, Button, View, SafeAreaView, Text, Alert } from 'react-native';

  const Separator = () => (
    <View style={styles.separator} />
  );

  const App = () => (
    <SafeAreaView style={styles.container}>
      <View>
        <Text style={styles.title}>
          The title and onPress handler are required. It is recommended to set accessibilityLabel to help make your app usable by everyone.
        </Text>
        <Button
          title="Press me"
          onPress={() => Alert.alert('Simple Button pressed')}
        />
      </View>
      <Separator />
      <View>
        <Text style={styles.title}>
          Adjust the color in a way that looks standard on each platform. On  iOS, the color prop controls the color of the text. On Android, the color adjusts the background color of the button.
        </Text>
        <Button
          title="Press me"
          color="#f194ff"
          onPress={() => Alert.alert('Button with adjusted color pressed')}
        />
      </View>
      <Separator />
      <View>
        <Text style={styles.title}>
          All interaction for the component are disabled.
        </Text>
        <Button
          title="Press me"
          disabled
          onPress={() => Alert.alert('Cannot press this one')}
        />
      </View>
      <Separator />
      <View>
        <Text style={styles.title}>
          This layout strategy lets the title define the width of the button.
        </Text>
        <View style={styles.fixToText}>
          <Button
            title="Left button"
            onPress={() => Alert.alert('Left button pressed')}
          />
          <Button
            title="Right button"
            onPress={() => Alert.alert('Right button pressed')}
          />
        </View>
      </View>
    </SafeAreaView>
  );

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      marginHorizontal: 16,
    },
    title: {
      textAlign: 'center',
      marginVertical: 8,
    },
    fixToText: {
      flexDirection: 'row',
      justifyContent: 'space-between',
    },
    separator: {
      marginVertical: 8,
      borderBottomColor: '#737373',
      borderBottomWidth: StyleSheet.hairlineWidth,
    },
  });

  export default App;
  ```
 */ var Touchable = _Platform.default.OS === 'android' ? _TouchableNativeFeedback.default : _TouchableOpacity.default;
var Button = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var accessibilityLabel = props.accessibilityLabel, accessibilityState = props.accessibilityState, ariaBusy = props['aria-busy'], ariaChecked = props['aria-checked'], ariaDisabled = props['aria-disabled'], ariaExpanded = props['aria-expanded'], ariaLabel = props['aria-label'], ariaSelected = props['aria-selected'], importantForAccessibility = props.importantForAccessibility, color = props.color, onPress = props.onPress, touchSoundDisabled = props.touchSoundDisabled, title = props.title, hasTVPreferredFocus = props.hasTVPreferredFocus, nextFocusDown = props.nextFocusDown, nextFocusForward = props.nextFocusForward, nextFocusLeft = props.nextFocusLeft, nextFocusRight = props.nextFocusRight, nextFocusUp = props.nextFocusUp, testID = props.testID, accessible = props.accessible, accessibilityActions = props.accessibilityActions, accessibilityHint = props.accessibilityHint, accessibilityLanguage = props.accessibilityLanguage, onAccessibilityAction = props.onAccessibilityAction;
    var buttonStyles = [
        styles.button
    ];
    var textStyles = [
        styles.text
    ];
    if (color) {
        if (_Platform.default.OS === 'ios') {
            textStyles.push({
                color: color
            });
        } else {
            buttonStyles.push({
                backgroundColor: color
            });
        }
    }
    var _accessibilityState = {
        busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
        checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
        disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
        expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
        selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
    };
    var disabled = props.disabled != null ? props.disabled : _accessibilityState == null ? void 0 : _accessibilityState.disabled;
    _accessibilityState = disabled !== (_accessibilityState == null ? void 0 : _accessibilityState.disabled) ? _extends._({}, _accessibilityState, {
        disabled: disabled
    }) : _accessibilityState;
    if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
    }
    (0, _invariant.default)(typeof title === 'string', 'The title prop of a Button must be a string');
    var formattedTitle = _Platform.default.OS === 'android' ? title.toUpperCase() : title;
    // If `no` is specified for `importantForAccessibility`, it will be changed to `no-hide-descendants` because the text inside should not be focused.
    var _importantForAccessibility = importantForAccessibility === 'no' ? 'no-hide-descendants' : importantForAccessibility;
    return /*#__PURE__*/ _react.createElement(Touchable, {
        accessible: accessible,
        accessibilityActions: accessibilityActions,
        onAccessibilityAction: onAccessibilityAction,
        accessibilityLabel: ariaLabel || accessibilityLabel,
        accessibilityHint: accessibilityHint,
        accessibilityLanguage: accessibilityLanguage,
        accessibilityRole: "button",
        accessibilityState: _accessibilityState,
        importantForAccessibility: _importantForAccessibility,
        hasTVPreferredFocus: hasTVPreferredFocus,
        nextFocusDown: nextFocusDown,
        nextFocusForward: nextFocusForward,
        nextFocusLeft: nextFocusLeft,
        nextFocusRight: nextFocusRight,
        nextFocusUp: nextFocusUp,
        testID: testID,
        disabled: disabled,
        onPress: onPress,
        touchSoundDisabled: touchSoundDisabled,
        ref: ref
    }, /*#__PURE__*/ _react.createElement(_View.default, {
        style: buttonStyles
    }, /*#__PURE__*/ _react.createElement(_Text.default, {
        style: textStyles,
        disabled: disabled
    }, formattedTitle)));
});
Button.displayName = 'Button';
var styles = _StyleSheet.default.create({
    button: _Platform.default.select({
        ios: {},
        android: {
            elevation: 4,
            // Material design blue from https://material.google.com/style/color.html#color-color-palette
            backgroundColor: '#2196F3',
            borderRadius: 2
        }
    }),
    text: _extends._({
        textAlign: 'center',
        margin: 8
    }, _Platform.default.select({
        ios: {
            // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/
            color: '#007AFF',
            fontSize: 18
        },
        android: {
            color: 'white',
            fontWeight: '500'
        }
    })),
    buttonDisabled: _Platform.default.select({
        ios: {},
        android: {
            elevation: 0,
            backgroundColor: '#dfdfdf'
        }
    }),
    textDisabled: _Platform.default.select({
        ios: {
            color: '#cdcdcd'
        },
        android: {
            color: '#a1a1a1'
        }
    })
});
var _default = Button;


}),
35984: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _object_without_properties_loose = __webpack_require__(35684);
var _ProgressBarAndroidNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81927));
var React = __webpack_require__(41845);
/**
 * React component that wraps the Android-only `ProgressBar`. This component is
 * used to indicate that the app is loading or there is activity in the app.
 *
 * Example:
 *
 * ```
 * render: function() {
 *   var progressBar =
 *     <View style={styles.container}>
 *       <ProgressBar styleAttr="Inverse" />
 *     </View>;

 *   return (
 *     <MyLoadingComponent
 *       componentView={componentView}
 *       loadingView={progressBar}
 *       style={styles.loadingComponent}
 *     />
 *   );
 * },
 * ```
 */ var ProgressBarAndroid = function(_param, forwardedRef) {
    var _param_styleAttr = _param.styleAttr, styleAttr = _param_styleAttr === void 0 ? 'Normal' : _param_styleAttr, _param_indeterminate = _param.indeterminate, indeterminate = _param_indeterminate === void 0 ? true : _param_indeterminate, _param_animating = _param.animating, animating = _param_animating === void 0 ? true : _param_animating, restProps = _object_without_properties_loose._(_param, [
        "styleAttr",
        "indeterminate",
        "animating"
    ]);
    return /*#__PURE__*/ React.createElement(_ProgressBarAndroidNativeComponent.default, _extends._({
        styleAttr: styleAttr,
        indeterminate: indeterminate,
        animating: animating
    }, restProps, {
        ref: forwardedRef
    }));
};
var ProgressBarAndroidToExport = React.forwardRef(ProgressBarAndroid);
module.exports = /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */ ProgressBarAndroidToExport;


}),
36152: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('AccessibilityInfo');


}),
36408: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('ImageLoader');


}),
3698: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Portions Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * BezierEasing - use bezier curve for transition easing function
 * https://github.com/gre/bezier-easing
 * @copyright 2014-2015 Gaëtan Renaudeau. MIT License.
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return bezier;
    }
}));
// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
var float32ArraySupported = typeof Float32Array === 'function';
function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
    return 3.0 * aA1;
}
// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}
// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}
function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
    var currentX, currentT, i = 0, aA = _aA, aB = _aB;
    do {
        currentT = aA + (aB - aA) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0.0) {
            aB = currentT;
        } else {
            aA = currentT;
        }
    }while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
}
function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
    var aGuessT = _aGuessT;
    for(var i = 0; i < NEWTON_ITERATIONS; ++i){
        var currentSlope = getSlope(aGuessT, mX1, mX2);
        if (currentSlope === 0.0) {
            return aGuessT;
        }
        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
}
function bezier(mX1, mY1, mX2, mY2) {
    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
        throw new Error('bezier x values must be in [0, 1] range');
    }
    // Precompute samples table
    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
    if (mX1 !== mY1 || mX2 !== mY2) {
        for(var i = 0; i < kSplineTableSize; ++i){
            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
        }
    }
    function getTForX(aX) {
        var intervalStart = 0.0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;
        for(; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample){
            intervalStart += kSampleStepSize;
        }
        --currentSample;
        // Interpolate to provide an initial guess for t
        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist * kSampleStepSize;
        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0.0) {
            return guessForT;
        } else {
            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
    }
    return function BezierEasing(x) {
        if (mX1 === mY1 && mX2 === mY2) {
            return x; // linear
        }
        // Because JavaScript number are imprecise, we should guarantee the extremes are right.
        if (x === 0) {
            return 0;
        }
        if (x === 1) {
            return 1;
        }
        return calcBezier(getTForX(x), mY1, mY2);
    };
}


}),
37330: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _PullToRefreshViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(43436), exports));
var _default = _PullToRefreshViewNativeComponent.default;


}),
3783: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedColor;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _type_of = __webpack_require__(29936);
var _normalizeColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89103));
var _PlatformColorValueTypes = __webpack_require__(99321);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedValue = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(95338));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
var defaultColor = {
    r: 0,
    g: 0,
    b: 0,
    a: 1.0
};
/* eslint no-bitwise: 0 */ function processColor(color) {
    if (color === undefined || color === null) {
        return null;
    }
    if (isRgbaValue(color)) {
        // $FlowIgnore[incompatible-cast] - Type is verified above
        return color;
    }
    var normalizedColor = (0, _normalizeColor.default)(// $FlowIgnore[incompatible-cast] - Type is verified above
    color);
    if (normalizedColor === undefined || normalizedColor === null) {
        return null;
    }
    if ((typeof normalizedColor === "undefined" ? "undefined" : _type_of._(normalizedColor)) === 'object') {
        var processedColorObj = (0, _PlatformColorValueTypes.processColorObject)(normalizedColor);
        if (processedColorObj != null) {
            return processedColorObj;
        }
    } else if (typeof normalizedColor === 'number') {
        var r = (normalizedColor & 0xff000000) >>> 24;
        var g = (normalizedColor & 0x00ff0000) >>> 16;
        var b = (normalizedColor & 0x0000ff00) >>> 8;
        var a = (normalizedColor & 0x000000ff) / 255;
        return {
            r: r,
            g: g,
            b: b,
            a: a
        };
    }
    return null;
}
function isRgbaValue(value) {
    return value && typeof value.r === 'number' && typeof value.g === 'number' && typeof value.b === 'number' && typeof value.a === 'number';
}
function isRgbaAnimatedValue(value) {
    return value && value.r instanceof _AnimatedValue.default && value.g instanceof _AnimatedValue.default && value.b instanceof _AnimatedValue.default && value.a instanceof _AnimatedValue.default;
}
var AnimatedColor = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedColor, AnimatedWithChildren);
    function AnimatedColor(valueIn, config) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this, _this._suspendCallbacks = 0;
        var value = valueIn != null ? valueIn : defaultColor;
        if (isRgbaAnimatedValue(value)) {
            // $FlowIgnore[incompatible-cast] - Type is verified above
            var rgbaAnimatedValue = value;
            _this.r = rgbaAnimatedValue.r;
            _this.g = rgbaAnimatedValue.g;
            _this.b = rgbaAnimatedValue.b;
            _this.a = rgbaAnimatedValue.a;
        } else {
            var // $FlowIgnore[incompatible-cast] - Type is verified above
            _processColor;
            var processedColor = (_processColor = processColor(value)) != null ? _processColor : defaultColor;
            var initColor = defaultColor;
            if (isRgbaValue(processedColor)) {
                // $FlowIgnore[incompatible-cast] - Type is verified above
                initColor = processedColor;
            } else {
                // $FlowIgnore[incompatible-cast] - Type is verified above
                _this.nativeColor = processedColor;
            }
            _this.r = new _AnimatedValue.default(initColor.r);
            _this.g = new _AnimatedValue.default(initColor.g);
            _this.b = new _AnimatedValue.default(initColor.b);
            _this.a = new _AnimatedValue.default(initColor.a);
        }
        if (config == null ? void 0 : config.useNativeDriver) {
            _this.__makeNative();
        }
        return _this;
    }
    var _proto = AnimatedColor.prototype;
    /**
   * Directly set the value. This will stop any animations running on the value
   * and update all the bound properties.
   */ _proto.setValue = function setValue(value) {
        var _this = this;
        var shouldUpdateNodeConfig = false;
        if (this.__isNative) {
            var nativeTag = this.__getNativeTag();
            NativeAnimatedAPI.setWaitingForIdentifier(nativeTag.toString());
        }
        var _processColor;
        var processedColor = (_processColor = processColor(value)) != null ? _processColor : defaultColor;
        this._withSuspendedCallbacks(function() {
            if (isRgbaValue(processedColor)) {
                // $FlowIgnore[incompatible-type] - Type is verified above
                var rgbaValue = processedColor;
                _this.r.setValue(rgbaValue.r);
                _this.g.setValue(rgbaValue.g);
                _this.b.setValue(rgbaValue.b);
                _this.a.setValue(rgbaValue.a);
                if (_this.nativeColor != null) {
                    _this.nativeColor = null;
                    shouldUpdateNodeConfig = true;
                }
            } else {
                // $FlowIgnore[incompatible-type] - Type is verified above
                var nativeColor = processedColor;
                if (_this.nativeColor !== nativeColor) {
                    _this.nativeColor = nativeColor;
                    shouldUpdateNodeConfig = true;
                }
            }
        });
        if (this.__isNative) {
            var nativeTag1 = this.__getNativeTag();
            if (shouldUpdateNodeConfig) {
                NativeAnimatedAPI.updateAnimatedNodeConfig(nativeTag1, this.__getNativeConfig());
            }
            NativeAnimatedAPI.unsetWaitingForIdentifier(nativeTag1.toString());
        } else {
            (0, _AnimatedValue.flushValue)(this);
        }
        // $FlowFixMe[incompatible-call]
        this.__callListeners(this.__getValue());
    };
    /**
   * Sets an offset that is applied on top of whatever value is set, whether
   * via `setValue`, an animation, or `Animated.event`. Useful for compensating
   * things like the start of a pan gesture.
   */ _proto.setOffset = function setOffset(offset) {
        this.r.setOffset(offset.r);
        this.g.setOffset(offset.g);
        this.b.setOffset(offset.b);
        this.a.setOffset(offset.a);
    };
    /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   */ _proto.flattenOffset = function flattenOffset() {
        this.r.flattenOffset();
        this.g.flattenOffset();
        this.b.flattenOffset();
        this.a.flattenOffset();
    };
    /**
   * Sets the offset value to the base value, and resets the base value to
   * zero. The final output of the value is unchanged.
   */ _proto.extractOffset = function extractOffset() {
        this.r.extractOffset();
        this.g.extractOffset();
        this.b.extractOffset();
        this.a.extractOffset();
    };
    /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   */ _proto.stopAnimation = function stopAnimation(callback) {
        this.r.stopAnimation();
        this.g.stopAnimation();
        this.b.stopAnimation();
        this.a.stopAnimation();
        callback && callback(this.__getValue());
    };
    /**
   * Stops any animation and resets the value to its original.
   */ _proto.resetAnimation = function resetAnimation(callback) {
        this.r.resetAnimation();
        this.g.resetAnimation();
        this.b.resetAnimation();
        this.a.resetAnimation();
        callback && callback(this.__getValue());
    };
    _proto.__getValue = function __getValue() {
        if (this.nativeColor != null) {
            return this.nativeColor;
        } else {
            return "rgba(" + this.r.__getValue() + ", " + this.g.__getValue() + ", " + this.b.__getValue() + ", " + this.a.__getValue() + ")";
        }
    };
    _proto.__attach = function __attach() {
        this.r.__addChild(this);
        this.g.__addChild(this);
        this.b.__addChild(this);
        this.a.__addChild(this);
        AnimatedWithChildren.prototype.__attach.call(this);
    };
    _proto.__detach = function __detach() {
        this.r.__removeChild(this);
        this.g.__removeChild(this);
        this.b.__removeChild(this);
        this.a.__removeChild(this);
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto._withSuspendedCallbacks = function _withSuspendedCallbacks(callback) {
        this._suspendCallbacks++;
        callback();
        this._suspendCallbacks--;
    };
    _proto.__callListeners = function __callListeners(value) {
        if (this._suspendCallbacks === 0) {
            AnimatedWithChildren.prototype.__callListeners.call(this, value);
        }
    };
    _proto.__makeNative = function __makeNative(platformConfig) {
        this.r.__makeNative(platformConfig);
        this.g.__makeNative(platformConfig);
        this.b.__makeNative(platformConfig);
        this.a.__makeNative(platformConfig);
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        return {
            type: 'color',
            r: this.r.__getNativeTag(),
            g: this.g.__getNativeTag(),
            b: this.b.__getNativeTag(),
            a: this.a.__getNativeTag(),
            nativeColor: this.nativeColor
        };
    };
    return AnimatedColor;
}(_AnimatedWithChildren.default);


}),
3848: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('PushNotificationManager');


}),
38593: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var NativeComponentRegistry = __webpack_require__(72499);
var nativeComponentName = 'RCTActivityIndicatorView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTActivityIndicatorView',
    validAttributes: {
        hidesWhenStopped: true,
        animating: true,
        color: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        size: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
39104: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _AndroidSwipeRefreshLayoutNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(95029), exports));
var _default = _AndroidSwipeRefreshLayoutNativeComponent.default;


}),
39123: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93671));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var _default = (0, _createAnimatedComponent.default)(_View.default);


}),
39130: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(68493));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _RCTTextInputViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49436));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = _extends._({
    uiViewClassName: 'RCTMultilineTextInputView'
}, _RCTTextInputViewConfig.default, {
    validAttributes: _extends._({}, _RCTTextInputViewConfig.default.validAttributes, {
        dataDetectorTypes: true
    })
});
var MultilineTextInputNativeComponent = _NativeComponentRegistry.get('RCTMultilineTextInputView', function() {
    return __INTERNAL_VIEW_CONFIG;
});
var _default = MultilineTextInputNativeComponent;


}),
39449: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _PooledClass = /*#__PURE__*/ _interop_require_default._(__webpack_require__(48572));
var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;
/**
 * PooledClass representing the bounding rectangle of a region.
 *
 * @param {number} width Width of bounding rectangle.
 * @param {number} height Height of bounding rectangle.
 * @constructor BoundingDimensions
 */ function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
}
BoundingDimensions.prototype.destructor = function() {
    this.width = null;
    this.height = null;
};
/**
 * @param {HTMLElement} element Element to return `BoundingDimensions` for.
 * @return {BoundingDimensions} Bounding dimensions of `element`.
 */ BoundingDimensions.getPooledFromElement = function(element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
};
_PooledClass.default.addPoolingTo(BoundingDimensions, twoArgumentPooler);
module.exports = BoundingDimensions;


}),
39981: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeAnimatedTurboModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(7743), exports));
var _default = _NativeAnimatedTurboModule.default;


}),
40812: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var NativeComponentRegistry = __webpack_require__(72499);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(83089)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RCTModalHostView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTModalHostView',
    directEventTypes: {
        topRequestClose: {
            registrationName: 'onRequestClose'
        },
        topShow: {
            registrationName: 'onShow'
        },
        topDismiss: {
            registrationName: 'onDismiss'
        },
        topOrientationChange: {
            registrationName: 'onOrientationChange'
        }
    },
    validAttributes: _extends._({
        animationType: true,
        presentationStyle: true,
        transparent: true,
        statusBarTranslucent: true,
        hardwareAccelerated: true,
        visible: true,
        animated: true,
        supportedOrientations: true,
        identifier: true
    }, ConditionallyIgnoredEventHandlers({
        onRequestClose: true,
        onShow: true,
        onDismiss: true,
        onOrientationChange: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
40898: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _SectionList = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3317));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93671));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var _default = (0, _createAnimatedComponent.default)(_SectionList.default);


}),
41201: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAnimatedProps;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _sliced_to_array = __webpack_require__(21193);
var _type_of = __webpack_require__(29936);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(26044));
var _ReactFabricPublicInstanceUtils = __webpack_require__(43887);
var _useRefEffect = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26585));
var _AnimatedEvent = __webpack_require__(62137);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var _AnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34158));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95338));
var _react = __webpack_require__(41845);
function useAnimatedProps(props) {
    var _useReducer = _sliced_to_array._((0, _react.useReducer)(function(count) {
        return count + 1;
    }, 0), 2), scheduleUpdate = _useReducer[1];
    var onUpdateRef = (0, _react.useRef)(null);
    var timerRef = (0, _react.useRef)(null);
    // TODO: Only invalidate `node` if animated props or `style` change. In the
    // previous implementation, we permitted `style` to override props with the
    // same name property name as styles, so we can probably continue doing that.
    // The ordering of other props *should* not matter.
    var node = (0, _react.useMemo)(function() {
        return new _AnimatedProps.default(props, function() {
            return onUpdateRef.current == null ? void 0 : onUpdateRef.current.call(onUpdateRef);
        });
    }, [
        props
    ]);
    var useNativePropsInFabric = _ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();
    var useSetNativePropsInNativeAnimationsInFabric = _ReactNativeFeatureFlags.shouldUseSetNativePropsInNativeAnimationsInFabric();
    var useAnimatedPropsLifecycle = _ReactNativeFeatureFlags.usePassiveEffectsForAnimations() ? useAnimatedPropsLifecycle_passiveEffects : useAnimatedPropsLifecycle_layoutEffects;
    useAnimatedPropsLifecycle(node);
    // TODO: This "effect" does three things:
    //
    //   1) Call `setNativeView`.
    //   2) Update `onUpdateRef`.
    //   3) Update listeners for `AnimatedEvent` props.
    //
    // Ideally, each of these would be separate "effects" so that they are not
    // unnecessarily re-run when irrelevant dependencies change. For example, we
    // should be able to hoist all `AnimatedEvent` props and only do #3 if either
    // the `AnimatedEvent` props change or `instance` changes.
    //
    // But there is no way to transparently compose three separate callback refs,
    // so we just combine them all into one for now.
    var refEffect = (0, _react.useCallback)(function(instance) {
        // NOTE: This may be called more often than necessary (e.g. when `props`
        // changes), but `setNativeView` already optimizes for that.
        node.setNativeView(instance);
        // NOTE: When using the JS animation driver, this callback is called on
        // every animation frame. When using the native driver, this callback is
        // called when the animation completes.
        onUpdateRef.current = function() {
            if (false) {}
            var isFabricNode = isFabricInstance(instance);
            if (node.__isNative) {
                // Check 2: this is an animation driven by native.
                // In native driven animations, this callback is only called once the animation completes.
                if (isFabricNode) {
                    // Call `scheduleUpdate` to synchronise Fiber and Shadow tree.
                    // Must not be called in Paper.
                    if (useSetNativePropsInNativeAnimationsInFabric) {
                        // $FlowFixMe[incompatible-use]
                        instance.setNativeProps(node.__getAnimatedValue());
                    } else {
                        scheduleUpdate();
                    }
                }
                return;
            }
            if ((typeof instance === "undefined" ? "undefined" : _type_of._(instance)) !== 'object' || typeof (instance == null ? void 0 : instance.setNativeProps) !== 'function') {
                // Check 3: the instance does not support setNativeProps. Call `scheduleUpdate`.
                return scheduleUpdate();
            }
            if (!isFabricNode) {
                // Check 4: this is a paper instance, call setNativeProps.
                // $FlowIgnore[not-a-function] - Assume it's still a function.
                // $FlowFixMe[incompatible-use]
                return instance.setNativeProps(node.__getAnimatedValue());
            }
            if (!useNativePropsInFabric) {
                // Check 5: setNativeProps are disabled.
                return scheduleUpdate();
            }
            // This is a Fabric instance and setNativeProps is supported.
            // $FlowIgnore[not-a-function] - Assume it's still a function.
            // $FlowFixMe[incompatible-use]
            instance.setNativeProps(node.__getAnimatedValue());
            // Keeping state of Fiber tree and Shadow tree in sync.
            //
            // This is done by calling `scheduleUpdate` which will trigger a commit.
            // However, React commit is not fast enough to drive animations.
            // This is where setNativeProps comes in handy but the state between
            // Fiber tree and Shadow tree needs to be kept in sync.
            // The goal is to call `scheduleUpdate` as little as possible to maintain
            // performance but frequently enough to keep state in sync.
            // Debounce is set to 48ms, which is 3 * the duration of a frame.
            // 3 frames was the highest value where flickering state was not observed.
            if (timerRef.current != null) {
                clearTimeout(timerRef.current);
            }
            timerRef.current = setTimeout(function() {
                timerRef.current = null;
                scheduleUpdate();
            }, 48);
        };
        var target = getEventTarget(instance);
        var events = [];
        var animatedValueListeners = [];
        for(var propName in props){
            // $FlowFixMe[invalid-computed-prop]
            var propValue = props[propName];
            if (propValue instanceof _AnimatedEvent.AnimatedEvent && propValue.__isNative) {
                propValue.__attach(target, propName);
                events.push([
                    propName,
                    propValue
                ]);
                // $FlowFixMe[incompatible-call] - the `addListenersToPropsValue` drills down the propValue.
                addListenersToPropsValue(propValue, animatedValueListeners);
            }
        }
        return function() {
            onUpdateRef.current = null;
            for(var _i = 0; _i < events.length; _i++){
                var _events__i = _sliced_to_array._(events[_i], 2), propName = _events__i[0], propValue = _events__i[1];
                propValue.__detach(target, propName);
            }
            for(var _i1 = 0; _i1 < animatedValueListeners.length; _i1++){
                var _animatedValueListeners__i = animatedValueListeners[_i1], propValue1 = _animatedValueListeners__i.propValue, listenerId = _animatedValueListeners__i.listenerId;
                propValue1.removeListener(listenerId);
            }
        };
    }, [
        node,
        useNativePropsInFabric,
        useSetNativePropsInNativeAnimationsInFabric,
        props
    ]);
    var callbackRef = (0, _useRefEffect.default)(refEffect);
    return [
        reduceAnimatedProps(node),
        callbackRef
    ];
}
function reduceAnimatedProps(node) {
    // Force `collapsable` to be false so that the native view is not flattened.
    // Flattened views cannot be accurately referenced by the native driver.
    return _extends._({}, node.__getValue(), {
        collapsable: false
    });
}
function addListenersToPropsValue(propValue, accumulator) {
    // propValue can be a scalar value, an array or an object.
    if (propValue instanceof _AnimatedValue.default) {
        var listenerId = propValue.addListener(function() {});
        accumulator.push({
            propValue: propValue,
            listenerId: listenerId
        });
    } else if (Array.isArray(propValue)) {
        // An array can be an array of scalar values, arrays of arrays, or arrays of objects
        for(var _i = 0; _i < propValue.length; _i++){
            var prop = propValue[_i];
            addListenersToPropsValue(prop, accumulator);
        }
    } else if (propValue instanceof Object) {
        addAnimatedValuesListenersToProps(propValue, accumulator);
    }
}
function addAnimatedValuesListenersToProps(props, accumulator) {
    for(var propName in props){
        // $FlowFixMe[prop-missing] - This is an object contained in a prop, but we don't know the exact type.
        var propValue = props[propName];
        addListenersToPropsValue(propValue, accumulator);
    }
}
/**
 * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`
 * and `__detach`. However, this is more complicated because `AnimatedProps`
 * uses reference counting to determine when to recursively detach its children
 * nodes. So in order to optimize this, we avoid detaching until the next attach
 * unless we are unmounting.
 */ function useAnimatedPropsLifecycle_layoutEffects(node) {
    var prevNodeRef = (0, _react.useRef)(null);
    var isUnmountingRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(function() {
        // It is ok for multiple components to call `flushQueue` because it noops
        // if the queue is empty. When multiple animated components are mounted at
        // the same time. Only first component flushes the queue and the others will noop.
        _NativeAnimatedHelper.default.API.flushQueue();
        var drivenAnimationEndedListener = null;
        if (node.__isNative) {
            drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', function(data) {
                node.update();
            });
        }
        return function() {
            drivenAnimationEndedListener == null ? void 0 : drivenAnimationEndedListener.remove();
        };
    });
    (0, _react.useLayoutEffect)(function() {
        isUnmountingRef.current = false;
        return function() {
            isUnmountingRef.current = true;
        };
    }, []);
    (0, _react.useLayoutEffect)(function() {
        node.__attach();
        if (prevNodeRef.current != null) {
            var prevNode = prevNodeRef.current;
            // TODO: Stop restoring default values (unless `reset` is called).
            prevNode.__restoreDefaultValues();
            prevNode.__detach();
            prevNodeRef.current = null;
        }
        return function() {
            if (isUnmountingRef.current) {
                // NOTE: Do not restore default values on unmount, see D18197735.
                node.__detach();
            } else {
                prevNodeRef.current = node;
            }
        };
    }, [
        node
    ]);
}
/**
 * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`
 * and `__detach`. However, this is more complicated because `AnimatedProps`
 * uses reference counting to determine when to recursively detach its children
 * nodes. So in order to optimize this, we avoid detaching until the next attach
 * unless we are unmounting.
 *
 * NOTE: unlike `useAnimatedPropsLifecycle_layoutEffects`, this version uses passive effects to setup animation graph.
 */ function useAnimatedPropsLifecycle_passiveEffects(node) {
    var prevNodeRef = (0, _react.useRef)(null);
    var isUnmountingRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(function() {
        // It is ok for multiple components to call `flushQueue` because it noops
        // if the queue is empty. When multiple animated components are mounted at
        // the same time. Only first component flushes the queue and the others will noop.
        _NativeAnimatedHelper.default.API.flushQueue();
    });
    (0, _react.useEffect)(function() {
        isUnmountingRef.current = false;
        return function() {
            isUnmountingRef.current = true;
        };
    }, []);
    (0, _react.useEffect)(function() {
        node.__attach();
        var drivenAnimationEndedListener = null;
        if (node.__isNative) {
            drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', function(data) {
                node.update();
            });
        }
        if (prevNodeRef.current != null) {
            var prevNode = prevNodeRef.current;
            // TODO: Stop restoring default values (unless `reset` is called).
            prevNode.__restoreDefaultValues();
            prevNode.__detach();
            prevNodeRef.current = null;
        }
        return function() {
            if (isUnmountingRef.current) {
                // NOTE: Do not restore default values on unmount, see D18197735.
                node.__detach();
            } else {
                prevNodeRef.current = node;
            }
            drivenAnimationEndedListener == null ? void 0 : drivenAnimationEndedListener.remove();
        };
    }, [
        node
    ]);
}
function getEventTarget(instance) {
    return (typeof instance === "undefined" ? "undefined" : _type_of._(instance)) === 'object' && typeof (instance == null ? void 0 : instance.getScrollableNode) === 'function' ? instance.getScrollableNode() : instance;
}
// $FlowFixMe[unclear-type] - Legacy instance assumptions.
function isFabricInstance(instance) {
    var _instance_getNativeScrollRef, _instance_getScrollResponder_getNativeScrollRef, _instance_getScrollResponder, _instance_getScrollResponder1;
    return (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance) || // Some components have a setNativeProps function but aren't a host component
    // such as lists like FlatList and SectionList. These should also use
    // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying
    // host component. This crazy hack is essentially special casing those lists and
    // ScrollView itself to use forceUpdate in Fabric.
    // If these components end up using forwardRef then these hacks can go away
    // as instance would actually be the underlying host component and the above check
    // would be sufficient.
    (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null ? void 0 : (_instance_getNativeScrollRef = instance.getNativeScrollRef) == null ? void 0 : _instance_getNativeScrollRef.call(instance)) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null ? void 0 : (_instance_getScrollResponder1 = instance.getScrollResponder) == null ? void 0 : (_instance_getScrollResponder = _instance_getScrollResponder1.call(instance)) == null ? void 0 : (_instance_getScrollResponder_getNativeScrollRef = _instance_getScrollResponder.getNativeScrollRef) == null ? void 0 : _instance_getScrollResponder_getNativeScrollRef.call(_instance_getScrollResponder));
}


}),
41230: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get validateInterpolation () {
        return validateInterpolation;
    },
    get validateStyles () {
        return validateStyles;
    },
    get validateTransform () {
        return validateTransform;
    }
});
var _NativeAnimatedAllowlist = __webpack_require__(99475);
function validateInterpolation(config) {
    for(var key in config){
        if (!(0, _NativeAnimatedAllowlist.isSupportedInterpolationParam)(key)) {
            console.error("Interpolation property '" + key + "' is not supported by native animated module");
        }
    }
}
function validateStyles(styles) {
    for(var key in styles){
        if (!(0, _NativeAnimatedAllowlist.isSupportedStyleProp)(key)) {
            console.error("Style property '" + key + "' is not supported by native animated module");
        }
    }
}
function validateTransform(configs) {
    configs.forEach(function(config) {
        if (!(0, _NativeAnimatedAllowlist.isSupportedTransformProp)(config.property)) {
            console.error("Property '" + config.property + "' is not supported by native animated module");
        }
    });
}


}),
41543: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAnimatedValue;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24426));
var _react = __webpack_require__(41845);
function useAnimatedValue(initialValue, config) {
    var ref = (0, _react.useRef)(null);
    if (ref.current == null) {
        ref.current = new _Animated.default.Value(initialValue, config);
    }
    return ref.current;
}


}),
41685: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var NativeComponentRegistry = __webpack_require__(72499);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(83089)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(22841)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'AndroidDrawerLayout';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidDrawerLayout',
    directEventTypes: {
        topDrawerSlide: {
            registrationName: 'onDrawerSlide'
        },
        topDrawerStateChanged: {
            registrationName: 'onDrawerStateChanged'
        },
        topDrawerOpen: {
            registrationName: 'onDrawerOpen'
        },
        topDrawerClose: {
            registrationName: 'onDrawerClose'
        }
    },
    validAttributes: _extends._({
        keyboardDismissMode: true,
        drawerBackgroundColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        drawerPosition: true,
        drawerWidth: true,
        drawerLockMode: true,
        statusBarBackgroundColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        }
    }, ConditionallyIgnoredEventHandlers({
        onDrawerSlide: true,
        onDrawerStateChanged: true,
        onDrawerOpen: true,
        onDrawerClose: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});
var Commands = {
    openDrawer: function(ref) {
        dispatchCommand(ref, "openDrawer", []);
    },
    closeDrawer: function(ref) {
        dispatchCommand(ref, "closeDrawer", []);
    }
};


}),
41930: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "convertObjectFitToResizeMode", ({
    enumerable: true,
    get: function() {
        return convertObjectFitToResizeMode;
    }
}));
var objectFitMap = {
    contain: 'contain',
    cover: 'cover',
    fill: 'stretch',
    'scale-down': 'contain'
};
function convertObjectFitToResizeMode(objectFit) {
    return objectFit != null ? objectFitMap[objectFit] : undefined;
}


}),
42638: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83900));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _NativeStatusBarManagerAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23372));
var _NativeStatusBarManagerIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43583));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * Status bar style
 */ /**
 * Status bar animation
 */ /**
 * Merges the prop stack with the default values.
 */ function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function(prev, cur) {
        for(var prop in cur){
            if (cur[prop] != null) {
                prev[prop] = cur[prop];
            }
        }
        return prev;
    }, _extends._({}, defaultValues));
}
/**
 * Returns an object to insert in the props stack from the props
 * and the transition/animation info.
 */ function createStackEntry(props) {
    var _props_animated;
    var animated = (_props_animated = props.animated) != null ? _props_animated : false;
    var _props_showHideTransition;
    var showHideTransition = (_props_showHideTransition = props.showHideTransition) != null ? _props_showHideTransition : 'fade';
    return {
        backgroundColor: props.backgroundColor != null ? {
            value: props.backgroundColor,
            animated: animated
        } : null,
        barStyle: props.barStyle != null ? {
            value: props.barStyle,
            animated: animated
        } : null,
        translucent: props.translucent,
        hidden: props.hidden != null ? {
            value: props.hidden,
            animated: animated,
            transition: showHideTransition
        } : null,
        networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
}
/**
 * Component to control the app status bar.
 *
 * It is possible to have multiple `StatusBar` components mounted at the same
 * time. The props will be merged in the order the `StatusBar` components were
 * mounted.
 *
 * ### Imperative API
 *
 * For cases where using a component is not ideal, there are static methods
 * to manipulate the `StatusBar` display stack. These methods have the same
 * behavior as mounting and unmounting a `StatusBar` component.
 *
 * For example, you can call `StatusBar.pushStackEntry` to update the status bar
 * before launching a third-party native UI component, and then call
 * `StatusBar.popStackEntry` when completed.
 *
 * ```
 * const openThirdPartyBugReporter = async () => {
 *   // The bug reporter has a dark background, so we push a new status bar style.
 *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});
 *
 *   // `open` returns a promise that resolves when the UI is dismissed.
 *   await BugReporter.open();
 *
 *   // Don't forget to call `popStackEntry` when you're done.
 *   StatusBar.popStackEntry(stackEntry);
 * };
 * ```
 *
 * There is a legacy imperative API that enables you to manually update the
 * status bar styles. However, the legacy API does not update the internal
 * `StatusBar` display stack, which means that any changes will be overridden
 * whenever a `StatusBar` component is mounted or unmounted.
 *
 * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or
 * `replaceStackEntry` instead of the static methods beginning with `set`.
 *
 * ### Constants
 *
 * `currentHeight` (Android only) The height of the status bar.
 */ var StatusBar = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(StatusBar, _React_Component);
    function StatusBar() {
        var _this;
        _this = _React_Component.apply(this, arguments) || this, // $FlowFixMe[missing-local-annot]
        _this._stackEntry = null;
        return _this;
    }
    var _proto = StatusBar.prototype;
    _proto.componentDidMount = function componentDidMount() {
        // Every time a StatusBar component is mounted, we push it's prop to a stack
        // and always update the native status bar with the props from the top of then
        // stack. This allows having multiple StatusBar components and the one that is
        // added last or is deeper in the view hierarchy will have priority.
        this._stackEntry = StatusBar.pushStackEntry(this.props);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        // When a StatusBar is unmounted, remove itself from the stack and update
        // the native bar with the next props.
        StatusBar.popStackEntry(this._stackEntry);
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
        this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);
    };
    _proto.render = function render() {
        return null;
    };
    // Provide an imperative API as static functions of the component.
    // See the corresponding prop for more detail.
    /**
   * Show or hide the status bar
   * @param hidden Hide the status bar.
   * @param animation Optional animation when
   *    changing the status bar hidden property.
   */ StatusBar.setHidden = function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;
        if (_Platform.default.OS === 'ios') {
            _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
        } else if (_Platform.default.OS === 'android') {
            _NativeStatusBarManagerAndroid.default.setHidden(hidden);
        }
    };
    /**
   * Set the status bar style
   * @param style Status bar style to set
   * @param animated Animate the style change.
   */ StatusBar.setBarStyle = function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;
        if (_Platform.default.OS === 'ios') {
            _NativeStatusBarManagerIOS.default.setStyle(style, animated);
        } else if (_Platform.default.OS === 'android') {
            _NativeStatusBarManagerAndroid.default.setStyle(style);
        }
    };
    /**
   * DEPRECATED - The status bar network activity indicator is not supported in iOS 13 and later. This will be removed in a future release.
   * @param visible Show the indicator.
   *
   * @deprecated
   */ StatusBar.setNetworkActivityIndicatorVisible = function setNetworkActivityIndicatorVisible(visible) {
        if (_Platform.default.OS !== 'ios') {
            console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
            return;
        }
        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);
    };
    /**
   * Set the background color for the status bar
   * @param color Background color.
   * @param animated Animate the style change.
   */ StatusBar.setBackgroundColor = function setBackgroundColor(color, animated) {
        if (_Platform.default.OS !== 'android') {
            console.warn('`setBackgroundColor` is only available on Android');
            return;
        }
        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        var processedColor = (0, _processColor.default)(color);
        if (processedColor == null) {
            console.warn("`StatusBar.setBackgroundColor`: Color " + color + " parsed to null or undefined");
            return;
        }
        (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');
        _NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);
    };
    /**
   * Control the translucency of the status bar
   * @param translucent Set as translucent.
   */ StatusBar.setTranslucent = function setTranslucent(translucent) {
        if (_Platform.default.OS !== 'android') {
            console.warn('`setTranslucent` is only available on Android');
            return;
        }
        StatusBar._defaultProps.translucent = translucent;
        _NativeStatusBarManagerAndroid.default.setTranslucent(translucent);
    };
    /**
   * Push a StatusBar entry onto the stack.
   * The return value should be passed to `popStackEntry` when complete.
   *
   * @param props Object containing the StatusBar props to use in the stack entry.
   */ StatusBar.pushStackEntry = function pushStackEntry(props) {
        var entry = createStackEntry(props);
        StatusBar._propsStack.push(entry);
        StatusBar._updatePropsStack();
        return entry;
    };
    /**
   * Pop a StatusBar entry from the stack.
   *
   * @param entry Entry returned from `pushStackEntry`.
   */ StatusBar.popStackEntry = function popStackEntry(entry) {
        var index = StatusBar._propsStack.indexOf(entry);
        if (index !== -1) {
            StatusBar._propsStack.splice(index, 1);
        }
        StatusBar._updatePropsStack();
    };
    /**
   * Replace an existing StatusBar stack entry with new props.
   *
   * @param entry Entry returned from `pushStackEntry` to replace.
   * @param props Object containing the StatusBar props to use in the replacement stack entry.
   */ StatusBar.replaceStackEntry = function replaceStackEntry(entry, props) {
        var newEntry = createStackEntry(props);
        var index = StatusBar._propsStack.indexOf(entry);
        if (index !== -1) {
            StatusBar._propsStack[index] = newEntry;
        }
        StatusBar._updatePropsStack();
        return newEntry;
    };
    return StatusBar;
}(_react.Component);
StatusBar._propsStack = [];
var _NativeStatusBarManagerAndroid_getConstants_DEFAULT_BACKGROUND_COLOR;
StatusBar._defaultProps = createStackEntry({
    backgroundColor: _Platform.default.OS === 'android' ? (_NativeStatusBarManagerAndroid_getConstants_DEFAULT_BACKGROUND_COLOR = _NativeStatusBarManagerAndroid.default.getConstants().DEFAULT_BACKGROUND_COLOR) != null ? _NativeStatusBarManagerAndroid_getConstants_DEFAULT_BACKGROUND_COLOR : 'black' : 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
});
// Timer for updating the native module values at the end of the frame.
// $FlowFixMe[missing-local-annot]
StatusBar._updateImmediate = null;
// The current merged values from the props stack.
// $FlowFixMe[missing-local-annot]
StatusBar._currentValues = null;
// TODO(janic): Provide a real API to deal with status bar height. See the
// discussion in #6195.
/**
   * The current height of the status bar on the device.
   *
   * @platform android
   */ StatusBar.currentHeight = _Platform.default.OS === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().HEIGHT : null;
/**
   * Updates the native status bar with the props from the stack.
   */ StatusBar._updatePropsStack = function() {
    // Send the update to the native module only once at the end of the frame.
    clearImmediate(StatusBar._updateImmediate);
    StatusBar._updateImmediate = setImmediate(function() {
        var oldProps = StatusBar._currentValues;
        var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);
        // Update the props that have changed using the merged values from the props stack.
        if (_Platform.default.OS === 'ios') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
                _NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);
            }
            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
                _NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
            }
            if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
                _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
            }
        } else if (_Platform.default.OS === 'android') {
            //todo(T60684787): Add back optimization to only update bar style and
            //background color if the new value is different from the old value.
            _NativeStatusBarManagerAndroid.default.setStyle(mergedProps.barStyle.value);
            var processedColor = (0, _processColor.default)(mergedProps.backgroundColor.value);
            if (processedColor == null) {
                console.warn("`StatusBar._updatePropsStack`: Color " + mergedProps.backgroundColor.value + " parsed to null or undefined");
            } else {
                (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');
                _NativeStatusBarManagerAndroid.default.setColor(processedColor, mergedProps.backgroundColor.animated);
            }
            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
                _NativeStatusBarManagerAndroid.default.setHidden(mergedProps.hidden.value);
            }
            // Activities are not translucent by default, so always set if true.
            if (!oldProps || oldProps.translucent !== mergedProps.translucent || mergedProps.translucent) {
                _NativeStatusBarManagerAndroid.default.setTranslucent(mergedProps.translucent);
            }
        }
        // Update the current prop values.
        StatusBar._currentValues = mergedProps;
    });
};
module.exports = StatusBar;


}),
43306: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeToastAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(58555), exports));
var _default = _NativeToastAndroid.default;


}),
43436: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var NativeComponentRegistry = __webpack_require__(72499);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(83089)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(22841)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'RCTRefreshControl';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTRefreshControl',
    directEventTypes: {
        topRefresh: {
            registrationName: 'onRefresh'
        }
    },
    validAttributes: _extends._({
        tintColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        titleColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        title: true,
        progressViewOffset: true,
        refreshing: true
    }, ConditionallyIgnoredEventHandlers({
        onRefresh: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});
var Commands = {
    setNativeRefreshing: function(ref, refreshing) {
        dispatchCommand(ref, "setNativeRefreshing", [
            refreshing
        ]);
    }
};


}),
43583: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeStatusBarManagerIOS = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(90933), exports));
var _default = _NativeStatusBarManagerIOS.default;


}),
43705: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedNode;
    }
}));
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _interop_require_default = __webpack_require__(48810);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _NativeAnimatedHelper_API = _NativeAnimatedHelper.default.API, startListeningToAnimatedNodeValue = _NativeAnimatedHelper_API.startListeningToAnimatedNodeValue, stopListeningToAnimatedNodeValue = _NativeAnimatedHelper_API.stopListeningToAnimatedNodeValue;
var _uniqueId = 1;
var _assertNativeAnimatedModule = function() {
    _NativeAnimatedHelper.default.assertNativeAnimatedModule();
    // We only have to assert that the module exists once. After we've asserted
    // this, clear out the function so we know to skip it in the future.
    _assertNativeAnimatedModule = null;
};
var _listeners = /*#__PURE__*/ _class_private_field_loose_key._("_listeners");
var AnimatedNode = /*#__PURE__*/ function() {
    function AnimatedNode() {
        Object.defineProperty(this, _listeners, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _listeners)[_listeners] = new Map();
        this._platformConfig = undefined;
        this.__nativeAnimatedValueListener = null;
        /* Methods and props used by native Animated impl */ this.__isNative = false;
        this.__nativeTag = undefined;
        this.__shouldUpdateListenersForNewNativeTag = false;
    }
    var _proto = AnimatedNode.prototype;
    _proto.__attach = function __attach() {};
    _proto.__detach = function __detach() {
        this.removeAllListeners();
        if (this.__isNative && this.__nativeTag != null) {
            _NativeAnimatedHelper.default.API.dropAnimatedNode(this.__nativeTag);
            this.__nativeTag = undefined;
        }
    };
    _proto.__getValue = function __getValue() {};
    _proto.__getAnimatedValue = function __getAnimatedValue() {
        return this.__getValue();
    };
    _proto.__addChild = function __addChild(child) {};
    _proto.__removeChild = function __removeChild(child) {};
    _proto.__getChildren = function __getChildren() {
        return [];
    };
    _proto.__makeNative = function __makeNative(platformConfig) {
        if (!this.__isNative) {
            throw new Error('This node cannot be made a "native" animated node');
        }
        this._platformConfig = platformConfig;
        if (_class_private_field_loose_base._(this, _listeners)[_listeners].size > 0) {
            this._startListeningToNativeValueUpdates();
        }
    };
    /**
   * Adds an asynchronous listener to the value so you can observe updates from
   * animations.  This is useful because there is no way to
   * synchronously read the value because it might be driven natively.
   *
   * See https://reactnative.dev/docs/animatedvalue#addlistener
   */ _proto.addListener = function addListener(callback) {
        var id = String(_uniqueId++);
        _class_private_field_loose_base._(this, _listeners)[_listeners].set(id, callback);
        if (this.__isNative) {
            this._startListeningToNativeValueUpdates();
        }
        return id;
    };
    /**
   * Unregister a listener. The `id` param shall match the identifier
   * previously returned by `addListener()`.
   *
   * See https://reactnative.dev/docs/animatedvalue#removelistener
   */ _proto.removeListener = function removeListener(id) {
        _class_private_field_loose_base._(this, _listeners)[_listeners]["delete"](id);
        if (this.__isNative && _class_private_field_loose_base._(this, _listeners)[_listeners].size === 0) {
            this._stopListeningForNativeValueUpdates();
        }
    };
    /**
   * Remove all registered listeners.
   *
   * See https://reactnative.dev/docs/animatedvalue#removealllisteners
   */ _proto.removeAllListeners = function removeAllListeners() {
        _class_private_field_loose_base._(this, _listeners)[_listeners].clear();
        if (this.__isNative) {
            this._stopListeningForNativeValueUpdates();
        }
    };
    _proto.hasListeners = function hasListeners() {
        return _class_private_field_loose_base._(this, _listeners)[_listeners].size > 0;
    };
    _proto._startListeningToNativeValueUpdates = function _startListeningToNativeValueUpdates() {
        var _this = this;
        if (this.__nativeAnimatedValueListener && !this.__shouldUpdateListenersForNewNativeTag) {
            return;
        }
        if (this.__shouldUpdateListenersForNewNativeTag) {
            this.__shouldUpdateListenersForNewNativeTag = false;
            this._stopListeningForNativeValueUpdates();
        }
        startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onAnimatedValueUpdate', function(data) {
            if (data.tag !== _this.__getNativeTag()) {
                return;
            }
            _this.__onAnimatedValueUpdateReceived(data.value);
        });
    };
    _proto.__onAnimatedValueUpdateReceived = function __onAnimatedValueUpdateReceived(value) {
        this.__callListeners(value);
    };
    _proto.__callListeners = function __callListeners(value) {
        var event = {
            value: value
        };
        _class_private_field_loose_base._(this, _listeners)[_listeners].forEach(function(listener) {
            listener(event);
        });
    };
    _proto._stopListeningForNativeValueUpdates = function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
            return;
        }
        this.__nativeAnimatedValueListener.remove();
        this.__nativeAnimatedValueListener = null;
        stopListeningToAnimatedNodeValue(this.__getNativeTag());
    };
    _proto.__getNativeTag = function __getNativeTag() {
        var nativeTag = this.__nativeTag;
        if (nativeTag == null) {
            _assertNativeAnimatedModule == null ? void 0 : _assertNativeAnimatedModule();
            // `__isNative` is initialized as false and only ever set to true. So we
            // only need to check it once here when initializing `__nativeTag`.
            (0, _invariant.default)(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
            nativeTag = _NativeAnimatedHelper.default.generateNewNodeTag();
            this.__nativeTag = nativeTag;
            var config = this.__getNativeConfig();
            if (this._platformConfig) {
                config.platformConfig = this._platformConfig;
            }
            _NativeAnimatedHelper.default.API.createAnimatedNode(nativeTag, config);
            this.__shouldUpdateListenersForNewNativeTag = true;
        }
        return nativeTag;
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
    };
    _proto.toJSON = function toJSON() {
        return this.__getValue();
    };
    _proto.__getPlatformConfig = function __getPlatformConfig() {
        return this._platformConfig;
    };
    _proto.__setPlatformConfig = function __setPlatformConfig(platformConfig) {
        this._platformConfig = platformConfig;
    };
    return AnimatedNode;
}();


}),
43887: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ /**
 * IMPORTANT!!
 *
 * This module cannot import `ReactFabric` (directly or indirectly)
 * because it can be used by apps only using the legacy renderer.
 * In that case `nativeFabricUIManager` isn't defined and `ReactFabric` throws.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "isPublicInstance", ({
    enumerable: true,
    get: function() {
        return isPublicInstance;
    }
}));
function isPublicInstance(maybeInstance) {
    return maybeInstance != null && // TODO: implement a better check when the instance is defined in the React Native repository.
    (maybeInstance.__nativeTag != null || // TODO: remove this check when syncing the new version of the renderer from React to React Native.
    isLegacyFabricInstance(maybeInstance));
}
function isLegacyFabricInstance(maybeInstance) {
    /* eslint-disable dot-notation */ return maybeInstance != null && // $FlowExpectedError[incompatible-use]
    maybeInstance['_internalInstanceHandle'] != null && maybeInstance['_internalInstanceHandle'].stateNode != null && maybeInstance['_internalInstanceHandle'].stateNode.canonical != null;
}


}),
44737: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _type_of = __webpack_require__(29936);
var _NativeActionSheetManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24843));
var _NativeShareModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63171));
var processColor = (__webpack_require__(83900)/* ["default"] */["default"]);
var Platform = __webpack_require__(29861);
var invariant = __webpack_require__(27761);
var Share = /*#__PURE__*/ function() {
    "use strict";
    function Share() {}
    /**
   * Open a dialog to share text content.
   *
   * In iOS, Returns a Promise which will be invoked an object containing `action`, `activityType`.
   * If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction`
   * and all the other keys being undefined.
   *
   * In Android, Returns a Promise which always resolves with action being `Share.sharedAction`.
   *
   * ### Content
   *
   * #### iOS
   *
   *  - `url` - a URL to share
   *  - `message` - a message to share
   *
   * At least one of `URL` or `message` is required.
   *
   * #### Android
   *
   * - `title` - title of the message (optional)
   * - `message` - a message to share (often will include a URL).
   *
   * ### Options
   *
   * #### iOS
   *
   *  - `subject` - a subject to share via email
   *  - `excludedActivityTypes`
   *  - `tintColor`
   *
   * #### Android
   *
   *  - `dialogTitle`
   *
   */ Share.share = function share(content, options) {
        if (options === void 0) options = {};
        invariant((typeof content === "undefined" ? "undefined" : _type_of._(content)) === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL or message is required');
        invariant((typeof options === "undefined" ? "undefined" : _type_of._(options)) === 'object' && options !== null, 'Options must be a valid object');
        if (Platform.OS === 'android') {
            invariant(_NativeShareModule.default, 'ShareModule should be registered on Android.');
            invariant(content.title == null || typeof content.title === 'string', 'Invalid title: title should be a string.');
            var newContent = {
                title: content.title,
                message: typeof content.message === 'string' ? content.message : undefined
            };
            return _NativeShareModule.default.share(newContent, options.dialogTitle).then(function(result) {
                return _extends._({
                    activityType: null
                }, result);
            });
        } else if (Platform.OS === 'ios') {
            return new Promise(function(resolve, reject) {
                var tintColor = processColor(options.tintColor);
                invariant(tintColor == null || typeof tintColor === 'number', 'Unexpected color given for options.tintColor');
                invariant(_NativeActionSheetManager.default, 'NativeActionSheetManager is not registered on iOS, but it should be.');
                _NativeActionSheetManager.default.showShareActionSheetWithOptions({
                    message: typeof content.message === 'string' ? content.message : undefined,
                    url: typeof content.url === 'string' ? content.url : undefined,
                    subject: options.subject,
                    tintColor: typeof tintColor === 'number' ? tintColor : undefined,
                    anchor: typeof options.anchor === 'number' ? options.anchor : undefined,
                    excludedActivityTypes: options.excludedActivityTypes
                }, function(error) {
                    return reject(error);
                }, function(success, activityType) {
                    if (success) {
                        resolve({
                            action: 'sharedAction',
                            activityType: activityType
                        });
                    } else {
                        resolve({
                            action: 'dismissedAction',
                            activityType: null
                        });
                    }
                });
            });
        } else {
            return Promise.reject(new Error('Unsupported platform'));
        }
    };
    return Share;
}();
/**
   * The content was successfully shared.
   */ Share.sharedAction = 'sharedAction';
/**
   * The dialog has been dismissed.
   * @platform ios
   */ Share.dismissedAction = 'dismissedAction';
module.exports = Share;


}),
45086: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get unstable_getImageComponentDecorator () {
        return unstable_getImageComponentDecorator;
    },
    get unstable_registerImageAttachedCallback () {
        return unstable_registerImageAttachedCallback;
    },
    get unstable_setImageComponentDecorator () {
        return unstable_setImageComponentDecorator;
    },
    get unstable_unregisterImageAttachedCallback () {
        return unstable_unregisterImageAttachedCallback;
    },
    get useWrapRefWithImageAttachedCallbacks () {
        return useWrapRefWithImageAttachedCallbacks;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13493));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var injectedImageComponentDecorator;
function unstable_setImageComponentDecorator(imageComponentDecorator) {
    injectedImageComponentDecorator = imageComponentDecorator;
}
function unstable_getImageComponentDecorator() {
    return injectedImageComponentDecorator;
}
var imageAttachedCallbacks = new Set();
function unstable_registerImageAttachedCallback(callback) {
    imageAttachedCallbacks.add(callback);
}
function unstable_unregisterImageAttachedCallback(callback) {
    imageAttachedCallbacks["delete"](callback);
}
function useWrapRefWithImageAttachedCallbacks(forwardedRef) {
    var pendingCleanupCallbacks = (0, _react.useRef)([]);
    var imageAttachedCallbacksRef = (0, _react.useRef)(null);
    if (imageAttachedCallbacksRef.current == null) {
        imageAttachedCallbacksRef.current = function(node) {
            if (node == null) {
                if (pendingCleanupCallbacks.current.length > 0) {
                    pendingCleanupCallbacks.current.forEach(function(cb) {
                        return cb();
                    });
                    pendingCleanupCallbacks.current = [];
                }
            } else {
                imageAttachedCallbacks.forEach(function(imageAttachedCallback) {
                    var maybeCleanupCallback = imageAttachedCallback(node);
                    if (maybeCleanupCallback != null) {
                        pendingCleanupCallbacks.current.push(maybeCleanupCallback);
                    }
                });
            }
        };
    }
    // `useMergeRefs` returns a stable ref if its arguments don't change.
    return (0, _useMergeRefs.default)(forwardedRef, imageAttachedCallbacksRef.current);
}


}),
45519: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(26044));
var _FabricUIManager = __webpack_require__(28600);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var UIManager = __webpack_require__(35180);
// Reexport type
var isLayoutAnimationEnabled = _ReactNativeFeatureFlags.isLayoutAnimationEnabled();
function setEnabled(value) {
    isLayoutAnimationEnabled = isLayoutAnimationEnabled;
}
/**
 * Configures the next commit to be animated.
 *
 * onAnimationDidEnd is guaranteed to be called when the animation completes.
 * onAnimationDidFail is *never* called in the classic, pre-Fabric renderer,
 * and never has been. In the new renderer (Fabric) it is called only if configuration
 * parsing fails.
 */ function configureNext(config, onAnimationDidEnd, onAnimationDidFail) {
    if (_Platform.default.isDisableAnimations) {
        return;
    }
    if (!isLayoutAnimationEnabled) {
        return;
    }
    // Since LayoutAnimations may possibly be disabled for now on iOS (Fabric),
    // or Android (non-Fabric) we race a setTimeout with animation completion,
    // in case onComplete is never called
    // from native. Once LayoutAnimations+Fabric unconditionally ship everywhere, we can
    // delete this mechanism at least in the Fabric branch.
    var animationCompletionHasRun = false;
    var onAnimationComplete = function() {
        if (animationCompletionHasRun) {
            return;
        }
        animationCompletionHasRun = true;
        clearTimeout(raceWithAnimationId);
        onAnimationDidEnd == null ? void 0 : onAnimationDidEnd();
    };
    var _config_duration;
    var raceWithAnimationId = setTimeout(onAnimationComplete, ((_config_duration = config.duration) != null ? _config_duration : 0) + 17 /* one frame + 1ms */ );
    // In Fabric, LayoutAnimations are unconditionally enabled for Android, and
    // conditionally enabled on iOS (pending fully shipping; this is a temporary state).
    var FabricUIManager = (0, _FabricUIManager.getFabricUIManager)();
    if (FabricUIManager == null ? void 0 : FabricUIManager.configureNextLayoutAnimation) {
        var _global_nativeFabricUIManager, _global;
        (_global = __webpack_require__.g) == null ? void 0 : (_global_nativeFabricUIManager = _global.nativeFabricUIManager) == null ? void 0 : _global_nativeFabricUIManager.configureNextLayoutAnimation(config, onAnimationComplete, onAnimationDidFail != null ? onAnimationDidFail : function() {} /* this will only be called if configuration parsing fails */ );
        return;
    }
    // This will only run if Fabric is *not* installed.
    // If you have Fabric + non-Fabric running in the same VM, non-Fabric LayoutAnimations
    // will not work.
    if (UIManager == null ? void 0 : UIManager.configureNextLayoutAnimation) {
        UIManager.configureNextLayoutAnimation(config, onAnimationComplete != null ? onAnimationComplete : function() {}, onAnimationDidFail != null ? onAnimationDidFail : function() {} /* this should never be called in Non-Fabric */ );
    }
}
function create(duration, type, property) {
    return {
        duration: duration,
        create: {
            type: type,
            property: property
        },
        update: {
            type: type
        },
        "delete": {
            type: type,
            property: property
        }
    };
}
var Presets = {
    easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
    linear: create(500, 'linear', 'opacity'),
    spring: {
        duration: 700,
        create: {
            type: 'linear',
            property: 'opacity'
        },
        update: {
            type: 'spring',
            springDamping: 0.4
        },
        "delete": {
            type: 'linear',
            property: 'opacity'
        }
    }
};
/**
 * Automatically animates views to their new positions when the
 * next layout happens.
 *
 * A common way to use this API is to call it before calling `setState`.
 *
 * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:
 *
 *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);
 */ var LayoutAnimation = {
    /**
   * Schedules an animation to happen on the next layout.
   *
   * @param config Specifies animation properties:
   *
   *   - `duration` in milliseconds
   *   - `create`, `AnimationConfig` for animating in new views
   *   - `update`, `AnimationConfig` for animating views that have been updated
   *
   * @param onAnimationDidEnd Called when the animation finished.
   * Only supported on iOS.
   * @param onError Called on error. Only supported on iOS.
   */ configureNext: configureNext,
    /**
   * Helper for creating a config for `configureNext`.
   */ create: create,
    Types: Object.freeze({
        spring: 'spring',
        linear: 'linear',
        easeInEaseOut: 'easeInEaseOut',
        easeIn: 'easeIn',
        easeOut: 'easeOut',
        keyboard: 'keyboard'
    }),
    Properties: Object.freeze({
        opacity: 'opacity',
        scaleX: 'scaleX',
        scaleY: 'scaleY',
        scaleXY: 'scaleXY'
    }),
    checkConfig: function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        console.error('LayoutAnimation.checkConfig(...) has been disabled.');
    },
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring),
    setEnabled: setEnabled
};
module.exports = LayoutAnimation;


}),
45583: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var NativeComponentRegistry = __webpack_require__(72499);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(83089)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(22841)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'RCTSwitch';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSwitch',
    bubblingEventTypes: {
        topChange: {
            phasedRegistrationNames: {
                captured: 'onChangeCapture',
                bubbled: 'onChange'
            }
        }
    },
    validAttributes: _extends._({
        disabled: true,
        value: true,
        tintColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        onTintColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        thumbTintColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        thumbColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        trackColorForFalse: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        trackColorForTrue: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        }
    }, ConditionallyIgnoredEventHandlers({
        onChange: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});
var Commands = {
    setValue: function(ref, value) {
        dispatchCommand(ref, "setValue", [
            value
        ]);
    }
};


}),
45584: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _AndroidSwitchNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(68899), exports));
var _default = _AndroidSwitchNativeComponent.default;


}),
46110: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createSquare () {
        return createSquare;
    },
    get normalizeRect () {
        return normalizeRect;
    }
});
function createSquare(size) {
    return {
        bottom: size,
        left: size,
        right: size,
        top: size
    };
}
function normalizeRect(rectOrSize) {
    return typeof rectOrSize === 'number' ? createSquare(rectOrSize) : rectOrSize;
}


}),
46846: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74765));
var BatchedBridge = __webpack_require__(70572);
var infoLog = __webpack_require__(51515);
var TaskQueue = __webpack_require__(87330);
var invariant = __webpack_require__(27761);
var _emitter = new _EventEmitter.default();
var DEBUG_DELAY = 0;
var DEBUG = false;
/**
 * InteractionManager allows long-running work to be scheduled after any
 * interactions/animations have completed. In particular, this allows JavaScript
 * animations to run smoothly.
 *
 * Applications can schedule tasks to run after interactions with the following:
 *
 * ```
 * InteractionManager.runAfterInteractions(() => {
 *   // ...long-running synchronous task...
 * });
 * ```
 *
 * Compare this to other scheduling alternatives:
 *
 * - requestAnimationFrame(): for code that animates a view over time.
 * - setImmediate/setTimeout(): run code later, note this may delay animations.
 * - runAfterInteractions(): run code later, without delaying active animations.
 *
 * The touch handling system considers one or more active touches to be an
 * 'interaction' and will delay `runAfterInteractions()` callbacks until all
 * touches have ended or been cancelled.
 *
 * InteractionManager also allows applications to register animations by
 * creating an interaction 'handle' on animation start, and clearing it upon
 * completion:
 *
 * ```
 * var handle = InteractionManager.createInteractionHandle();
 * // run animation... (`runAfterInteractions` tasks are queued)
 * // later, on animation completion:
 * InteractionManager.clearInteractionHandle(handle);
 * // queued tasks run if all handles were cleared
 * ```
 *
 * `runAfterInteractions` takes either a plain callback function, or a
 * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a
 * `PromiseTask` is supplied, then it is fully resolved (including asynchronous
 * dependencies that also schedule more tasks via `runAfterInteractions`) before
 * starting on the next task that might have been queued up synchronously
 * earlier.
 *
 * By default, queued tasks are executed together in a loop in one
 * `setImmediate` batch. If `setDeadline` is called with a positive number, then
 * tasks will only be executed until the deadline (in terms of js event loop run
 * time) approaches, at which point execution will yield via setTimeout,
 * allowing events such as touches to start interactions and block queued tasks
 * from executing, making apps more responsive.
 */ var InteractionManager = {
    Events: {
        interactionStart: 'interactionStart',
        interactionComplete: 'interactionComplete'
    },
    /**
   * Schedule a function to run after all interactions have completed. Returns a cancellable
   * "promise".
   */ runAfterInteractions: function(task) {
        var tasks = [];
        var promise = new Promise(function(resolve) {
            _scheduleUpdate();
            if (task) {
                tasks.push(task);
            }
            tasks.push({
                run: resolve,
                name: 'resolve ' + (task && task.name || '?')
            });
            _taskQueue.enqueueTasks(tasks);
        });
        return {
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            then: promise.then.bind(promise),
            cancel: function cancel() {
                _taskQueue.cancelTasks(tasks);
            }
        };
    },
    /**
   * Notify manager that an interaction has started.
   */ createInteractionHandle: function() {
        DEBUG && infoLog('InteractionManager: create interaction handle');
        _scheduleUpdate();
        var handle = ++_inc;
        _addInteractionSet.add(handle);
        return handle;
    },
    /**
   * Notify manager that an interaction has completed.
   */ clearInteractionHandle: function(handle) {
        DEBUG && infoLog('InteractionManager: clear interaction handle');
        invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');
        _scheduleUpdate();
        _addInteractionSet["delete"](handle);
        _deleteInteractionSet.add(handle);
    },
    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
    addListener: _emitter.addListener.bind(_emitter),
    /**
   * A positive number will use setTimeout to schedule any tasks after the
   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be
   * executed in one setImmediate batch (default).
   */ setDeadline: function(deadline) {
        _deadline = deadline;
    }
};
var _interactionSet = new Set();
var _addInteractionSet = new Set();
var _deleteInteractionSet = new Set();
var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
});
var _nextUpdateHandle = 0;
var _inc = 0;
var _deadline = -1;
/**
 * Schedule an asynchronous update to the interaction state.
 */ function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
        if (_deadline > 0) {
            _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
        } else {
            _nextUpdateHandle = setImmediate(_processUpdate);
        }
    }
}
/**
 * Notify listeners, process queue, etc
 */ function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;
    _addInteractionSet.forEach(function(handle) {
        return _interactionSet.add(handle);
    });
    _deleteInteractionSet.forEach(function(handle) {
        return _interactionSet["delete"](handle);
    });
    var nextInteractionCount = _interactionSet.size;
    if (interactionCount !== 0 && nextInteractionCount === 0) {
        // transition from 1+ --> 0 interactions
        _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
        // transition from 0 --> 1+ interactions
        _emitter.emit(InteractionManager.Events.interactionStart);
    }
    // process the queue regardless of a transition
    if (nextInteractionCount === 0) {
        while(_taskQueue.hasTasksToProcess()){
            _taskQueue.processNext();
            if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
                // Hit deadline before processing all tasks, so process more later.
                _scheduleUpdate();
                break;
            }
        }
    }
    _addInteractionSet.clear();
    _deleteInteractionSet.clear();
}
module.exports = InteractionManager;


}),
47005: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('Clipboard');


}),
47459: (function (module) {
"use strict";

var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === 'number' && value !== value;
};
function isEqual(first, second) {
    if (first === second) {
        return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
    }
    return false;
}
function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
        return false;
    }
    for(var i = 0; i < newInputs.length; i++){
        if (!isEqual(newInputs[i], lastInputs[i])) {
            return false;
        }
    }
    return true;
}
function memoizeOne(resultFn, isEqual) {
    if (isEqual === void 0) {
        isEqual = areInputsEqual;
    }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
        var newArgs = [];
        for(var _i = 0; _i < arguments.length; _i++){
            newArgs[_i] = arguments[_i];
        }
        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
            return lastResult;
        }
        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
        return lastResult;
    }
    return memoized;
}
module.exports = memoizeOne;


}),
47546: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var NativeComponentRegistry = __webpack_require__(72499);
var nativeComponentName = 'RCTInputAccessoryView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTInputAccessoryView',
    validAttributes: {
        backgroundColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        }
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
4789: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _sliced_to_array = __webpack_require__(21193);
var _PressabilityDebug = __webpack_require__(9966);
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76990));
__webpack_require__(46110);
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13493));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _useAndroidRippleForView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91769));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * Component used to build display components that should respond to whether the
 * component is currently pressed or not.
 */ function Pressable(props, forwardedRef) {
    var _props_accessibilityValue, _props_accessibilityValue1, _props_accessibilityValue2, _props_accessibilityValue3;
    var accessible = props.accessible, accessibilityState = props.accessibilityState, ariaLive = props['aria-live'], android_disableSound = props.android_disableSound, android_ripple = props.android_ripple, ariaBusy = props['aria-busy'], ariaChecked = props['aria-checked'], ariaDisabled = props['aria-disabled'], ariaExpanded = props['aria-expanded'], ariaLabel = props['aria-label'], ariaSelected = props['aria-selected'], cancelable = props.cancelable, children = props.children, delayHoverIn = props.delayHoverIn, delayHoverOut = props.delayHoverOut, delayLongPress = props.delayLongPress, disabled = props.disabled, focusable = props.focusable, hitSlop = props.hitSlop, onHoverIn = props.onHoverIn, onHoverOut = props.onHoverOut, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, pressRetentionOffset = props.pressRetentionOffset, style = props.style, testOnly_pressed = props.testOnly_pressed, unstable_pressDelay = props.unstable_pressDelay, restProps = _object_without_properties_loose._(props, [
        "accessible",
        "accessibilityState",
        'aria-live',
        "android_disableSound",
        "android_ripple",
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-label',
        'aria-selected',
        "cancelable",
        "children",
        "delayHoverIn",
        "delayHoverOut",
        "delayLongPress",
        "disabled",
        "focusable",
        "hitSlop",
        "onHoverIn",
        "onHoverOut",
        "onLongPress",
        "onPress",
        "onPressIn",
        "onPressOut",
        "pressRetentionOffset",
        "style",
        "testOnly_pressed",
        "unstable_pressDelay"
    ]);
    var viewRef = (0, _react.useRef)(null);
    var mergedRef = (0, _useMergeRefs.default)(forwardedRef, viewRef);
    var android_rippleConfig = (0, _useAndroidRippleForView.default)(android_ripple, viewRef);
    var _usePressState = _sliced_to_array._(usePressState(testOnly_pressed === true), 2), pressed = _usePressState[0], setPressed = _usePressState[1];
    var shouldUpdatePressed = typeof children === 'function' || typeof style === 'function';
    var _accessibilityState = {
        busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
        checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
        disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
        expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
        selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
    };
    _accessibilityState = disabled != null ? _extends._({}, _accessibilityState, {
        disabled: disabled
    }) : _accessibilityState;
    var _props_ariavaluemax, _props_ariavaluemin, _props_ariavaluenow, _props_ariavaluetext;
    var accessibilityValue = {
        max: (_props_ariavaluemax = props['aria-valuemax']) != null ? _props_ariavaluemax : (_props_accessibilityValue = props.accessibilityValue) == null ? void 0 : _props_accessibilityValue.max,
        min: (_props_ariavaluemin = props['aria-valuemin']) != null ? _props_ariavaluemin : (_props_accessibilityValue1 = props.accessibilityValue) == null ? void 0 : _props_accessibilityValue1.min,
        now: (_props_ariavaluenow = props['aria-valuenow']) != null ? _props_ariavaluenow : (_props_accessibilityValue2 = props.accessibilityValue) == null ? void 0 : _props_accessibilityValue2.now,
        text: (_props_ariavaluetext = props['aria-valuetext']) != null ? _props_ariavaluetext : (_props_accessibilityValue3 = props.accessibilityValue) == null ? void 0 : _props_accessibilityValue3.text
    };
    var accessibilityLiveRegion = ariaLive === 'off' ? 'none' : ariaLive != null ? ariaLive : props.accessibilityLiveRegion;
    var accessibilityLabel = ariaLabel != null ? ariaLabel : props.accessibilityLabel;
    var _restProps_ariamodal;
    var restPropsWithDefaults = _extends._({}, restProps, android_rippleConfig == null ? void 0 : android_rippleConfig.viewProps, {
        accessible: accessible !== false,
        accessibilityViewIsModal: (_restProps_ariamodal = restProps['aria-modal']) != null ? _restProps_ariamodal : restProps.accessibilityViewIsModal,
        accessibilityLiveRegion: accessibilityLiveRegion,
        accessibilityLabel: accessibilityLabel,
        accessibilityState: _accessibilityState,
        focusable: focusable !== false,
        accessibilityValue: accessibilityValue,
        hitSlop: hitSlop
    });
    var config = (0, _react.useMemo)(function() {
        return {
            cancelable: cancelable,
            disabled: disabled,
            hitSlop: hitSlop,
            pressRectOffset: pressRetentionOffset,
            android_disableSound: android_disableSound,
            delayHoverIn: delayHoverIn,
            delayHoverOut: delayHoverOut,
            delayLongPress: delayLongPress,
            delayPressIn: unstable_pressDelay,
            onHoverIn: onHoverIn,
            onHoverOut: onHoverOut,
            onLongPress: onLongPress,
            onPress: onPress,
            onPressIn: function(event) {
                if (android_rippleConfig != null) {
                    android_rippleConfig.onPressIn(event);
                }
                shouldUpdatePressed && setPressed(true);
                if (onPressIn != null) {
                    onPressIn(event);
                }
            },
            onPressMove: android_rippleConfig == null ? void 0 : android_rippleConfig.onPressMove,
            onPressOut: function(event) {
                if (android_rippleConfig != null) {
                    android_rippleConfig.onPressOut(event);
                }
                shouldUpdatePressed && setPressed(false);
                if (onPressOut != null) {
                    onPressOut(event);
                }
            }
        };
    }, [
        android_disableSound,
        android_rippleConfig,
        cancelable,
        delayHoverIn,
        delayHoverOut,
        delayLongPress,
        disabled,
        hitSlop,
        onHoverIn,
        onHoverOut,
        onLongPress,
        onPress,
        onPressIn,
        onPressOut,
        pressRetentionOffset,
        setPressed,
        shouldUpdatePressed,
        unstable_pressDelay
    ]);
    var eventHandlers = (0, _usePressability.default)(config);
    return /*#__PURE__*/ _react.createElement(_View.default, _extends._({}, restPropsWithDefaults, eventHandlers, {
        ref: mergedRef,
        style: typeof style === 'function' ? style({
            pressed: pressed
        }) : style,
        collapsable: false
    }), typeof children === 'function' ? children({
        pressed: pressed
    }) : children,  false ? /*#__PURE__*/ 0 : null);
}
function usePressState(forcePressed) {
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), pressed = _useState[0], setPressed = _useState[1];
    return [
        pressed || forcePressed,
        setPressed
    ];
}
var MemoedPressable = /*#__PURE__*/ _react.memo(/*#__PURE__*/ _react.forwardRef(Pressable));
MemoedPressable.displayName = 'Pressable';
var _default = MemoedPressable;


}),
48073: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _to_consumable_array = __webpack_require__(8034);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85672));
var _PressabilityDebug = __webpack_require__(9966);
var _RendererProxy = __webpack_require__(14288);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83900));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _ViewNativeComponent = __webpack_require__(95606);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var TouchableNativeFeedback = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(TouchableNativeFeedback, _React_Component);
    function TouchableNativeFeedback() {
        var _this;
        _this = _React_Component.apply(this, arguments) || this, _this.state = {
            pressability: new _Pressability.default(_this._createPressabilityConfig())
        };
        return _this;
    }
    var _proto = TouchableNativeFeedback.prototype;
    _proto._createPressabilityConfig = function _createPressabilityConfig() {
        var _this = this;
        var _this_props_accessibilityState;
        var _this_props_ariadisabled;
        var accessibilityStateDisabled = (_this_props_ariadisabled = this.props['aria-disabled']) != null ? _this_props_ariadisabled : (_this_props_accessibilityState = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState.disabled;
        return {
            cancelable: !this.props.rejectResponderTermination,
            disabled: this.props.disabled != null ? this.props.disabled : accessibilityStateDisabled,
            hitSlop: this.props.hitSlop,
            delayLongPress: this.props.delayLongPress,
            delayPressIn: this.props.delayPressIn,
            delayPressOut: this.props.delayPressOut,
            minPressDuration: 0,
            pressRectOffset: this.props.pressRetentionOffset,
            android_disableSound: this.props.touchSoundDisabled,
            onLongPress: this.props.onLongPress,
            onPress: this.props.onPress,
            onPressIn: function(event) {
                if (_Platform.default.OS === 'android') {
                    _this._dispatchHotspotUpdate(event);
                    _this._dispatchPressedStateChange(true);
                }
                if (_this.props.onPressIn != null) {
                    _this.props.onPressIn(event);
                }
            },
            onPressMove: function(event) {
                if (_Platform.default.OS === 'android') {
                    _this._dispatchHotspotUpdate(event);
                }
            },
            onPressOut: function(event) {
                if (_Platform.default.OS === 'android') {
                    _this._dispatchPressedStateChange(false);
                }
                if (_this.props.onPressOut != null) {
                    _this.props.onPressOut(event);
                }
            }
        };
    };
    _proto._dispatchPressedStateChange = function _dispatchPressedStateChange(pressed) {
        if (_Platform.default.OS === 'android') {
            var hostComponentRef = (0, _RendererProxy.findHostInstance_DEPRECATED)(this);
            if (hostComponentRef == null) {
                console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
            } else {
                _ViewNativeComponent.Commands.setPressed(hostComponentRef, pressed);
            }
        }
    };
    _proto._dispatchHotspotUpdate = function _dispatchHotspotUpdate(event) {
        if (_Platform.default.OS === 'android') {
            var _event_nativeEvent = event.nativeEvent, locationX = _event_nativeEvent.locationX, locationY = _event_nativeEvent.locationY;
            var hostComponentRef = (0, _RendererProxy.findHostInstance_DEPRECATED)(this);
            if (hostComponentRef == null) {
                console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
            } else {
                _ViewNativeComponent.Commands.hotspotUpdate(hostComponentRef, locationX != null ? locationX : 0, locationY != null ? locationY : 0);
            }
        }
    };
    _proto.render = function render() {
        var /*#__PURE__*/ _React;
        var _this_props_accessibilityState, _this_props_accessibilityState1, _this_props_accessibilityState2, _this_props_accessibilityState3, _this_props_accessibilityState4, _this_props_accessibilityValue, _this_props_accessibilityValue1, _this_props_accessibilityValue2, _this_props_accessibilityValue3;
        var element = _react.Children.only(this.props.children);
        var children = [
            element.props.children
        ];
        if (false) {}
        // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
        // adopting `Pressability`, so preserve that behavior.
        var _this_state_pressability_getEventHandlers = this.state.pressability.getEventHandlers(), onBlur = _this_state_pressability_getEventHandlers.onBlur, onFocus = _this_state_pressability_getEventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties_loose._(_this_state_pressability_getEventHandlers, [
            "onBlur",
            "onFocus"
        ]);
        var _this_props_ariabusy, _this_props_ariachecked, _this_props_ariadisabled, _this_props_ariaexpanded, _this_props_ariaselected;
        var _accessibilityState = {
            busy: (_this_props_ariabusy = this.props['aria-busy']) != null ? _this_props_ariabusy : (_this_props_accessibilityState = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState.busy,
            checked: (_this_props_ariachecked = this.props['aria-checked']) != null ? _this_props_ariachecked : (_this_props_accessibilityState1 = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState1.checked,
            disabled: (_this_props_ariadisabled = this.props['aria-disabled']) != null ? _this_props_ariadisabled : (_this_props_accessibilityState2 = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState2.disabled,
            expanded: (_this_props_ariaexpanded = this.props['aria-expanded']) != null ? _this_props_ariaexpanded : (_this_props_accessibilityState3 = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState3.expanded,
            selected: (_this_props_ariaselected = this.props['aria-selected']) != null ? _this_props_ariaselected : (_this_props_accessibilityState4 = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState4.selected
        };
        _accessibilityState = this.props.disabled != null ? _extends._({}, _accessibilityState, {
            disabled: this.props.disabled
        }) : _accessibilityState;
        var _this_props_ariavaluemax, _this_props_ariavaluemin, _this_props_ariavaluenow, _this_props_ariavaluetext;
        var accessibilityValue = {
            max: (_this_props_ariavaluemax = this.props['aria-valuemax']) != null ? _this_props_ariavaluemax : (_this_props_accessibilityValue = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue.max,
            min: (_this_props_ariavaluemin = this.props['aria-valuemin']) != null ? _this_props_ariavaluemin : (_this_props_accessibilityValue1 = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue1.min,
            now: (_this_props_ariavaluenow = this.props['aria-valuenow']) != null ? _this_props_ariavaluenow : (_this_props_accessibilityValue2 = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue2.now,
            text: (_this_props_ariavaluetext = this.props['aria-valuetext']) != null ? _this_props_ariavaluetext : (_this_props_accessibilityValue3 = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue3.text
        };
        var _this_props_arialive;
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : (_this_props_arialive = this.props['aria-live']) != null ? _this_props_arialive : this.props.accessibilityLiveRegion;
        var _this_props_arialabel;
        var accessibilityLabel = (_this_props_arialabel = this.props['aria-label']) != null ? _this_props_arialabel : this.props.accessibilityLabel;
        var _this_props_ariamodal, _this_props_ariahidden, _this_props_id;
        return (_React = _react).cloneElement.apply(_React, [
            element,
            _extends._({}, eventHandlersWithoutBlurAndFocus, getBackgroundProp(this.props.background === undefined ? TouchableNativeFeedback.SelectableBackground() : this.props.background, this.props.useForeground === true), {
                accessible: this.props.accessible !== false,
                accessibilityHint: this.props.accessibilityHint,
                accessibilityLanguage: this.props.accessibilityLanguage,
                accessibilityLabel: accessibilityLabel,
                accessibilityRole: this.props.accessibilityRole,
                accessibilityState: _accessibilityState,
                accessibilityActions: this.props.accessibilityActions,
                onAccessibilityAction: this.props.onAccessibilityAction,
                accessibilityValue: accessibilityValue,
                importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
                accessibilityViewIsModal: (_this_props_ariamodal = this.props['aria-modal']) != null ? _this_props_ariamodal : this.props.accessibilityViewIsModal,
                accessibilityLiveRegion: accessibilityLiveRegion,
                accessibilityElementsHidden: (_this_props_ariahidden = this.props['aria-hidden']) != null ? _this_props_ariahidden : this.props.accessibilityElementsHidden,
                hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                hitSlop: this.props.hitSlop,
                focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
                nativeID: (_this_props_id = this.props.id) != null ? _this_props_id : this.props.nativeID,
                nextFocusDown: this.props.nextFocusDown,
                nextFocusForward: this.props.nextFocusForward,
                nextFocusLeft: this.props.nextFocusLeft,
                nextFocusRight: this.props.nextFocusRight,
                nextFocusUp: this.props.nextFocusUp,
                onLayout: this.props.onLayout,
                testID: this.props.testID
            })
        ].concat(_to_consumable_array._(children)));
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
    };
    _proto.componentDidMount = function componentDidMount() {
        this.state.pressability.configure(this._createPressabilityConfig());
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.state.pressability.reset();
    };
    return TouchableNativeFeedback;
}(_react.Component);
/**
   * Creates a value for the `background` prop that uses the Android theme's
   * default background for selectable elements.
   */ TouchableNativeFeedback.SelectableBackground = function(rippleRadius) {
    return {
        type: 'ThemeAttrAndroid',
        attribute: 'selectableItemBackground',
        rippleRadius: rippleRadius
    };
};
/**
   * Creates a value for the `background` prop that uses the Android theme's
   * default background for borderless selectable elements. Requires API 21+.
   */ TouchableNativeFeedback.SelectableBackgroundBorderless = function(rippleRadius) {
    return {
        type: 'ThemeAttrAndroid',
        attribute: 'selectableItemBackgroundBorderless',
        rippleRadius: rippleRadius
    };
};
/**
   * Creates a value for the `background` prop that uses the Android ripple with
   * the supplied color. If `borderless` is true, the ripple will render outside
   * of the view bounds. Requires API 21+.
   */ TouchableNativeFeedback.Ripple = function(color, borderless, rippleRadius) {
    var processedColor = (0, _processColor.default)(color);
    (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
    return {
        type: 'RippleAndroid',
        // $FlowFixMe[incompatible-type]
        color: processedColor,
        borderless: borderless,
        rippleRadius: rippleRadius
    };
};
/**
   * Whether `useForeground` is supported.
   */ TouchableNativeFeedback.canUseNativeForeground = function() {
    return _Platform.default.OS === 'android';
};
var getBackgroundProp = _Platform.default.OS === 'android' ? /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ function(background, useForeground) {
    return useForeground && TouchableNativeFeedback.canUseNativeForeground() ? {
        nativeForegroundAndroid: background
    } : {
        nativeBackgroundAndroid: background
    };
} : /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ function(background, useForeground) {
    return null;
};
TouchableNativeFeedback.displayName = 'TouchableNativeFeedback';
module.exports = TouchableNativeFeedback;


}),
48572: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, copyFieldsFrom);
        return instance;
    } else {
        return new Klass(copyFieldsFrom);
    }
};
/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2);
        return instance;
    } else {
        return new Klass(a1, a2);
    }
};
/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3);
        return instance;
    } else {
        return new Klass(a1, a2, a3);
    }
};
/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3, a4);
        return instance;
    } else {
        return new Klass(a1, a2, a3, a4);
    }
};
/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
 * LTI update could not be added via codemod */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var standardReleaser = function standardReleaser(instance) {
    var Klass = this; // eslint-disable-line consistent-this
    (0, _invariant.default)(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
        Klass.instancePool.push(instance);
    }
};
var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;
/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */ var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    // Casting as any so that flow ignores the actual implementation and trusts
    // it to match the type we declared
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
        NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
};
var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
};
module.exports = PooledClass;


}),
48688: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeFrameRateLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57932));
var invariant = __webpack_require__(27761);
/**
 * Flow API for native FrameRateLogger module. If the native module is not installed, function calls
 * are just no-ops.
 *
 * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a
 * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the
 * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the
 * native module gathers up all it's frame drop data and reports it via an analytics pipeline for
 * analysis.
 *
 * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a
 * bug, but the native module should be robust to that.
 *
 * In the future we may add support for tracking frame drops in other types of interactions beyond
 * scrolling.
 */ var FrameRateLogger = {
    /**
   * Enable `debug` to see local logs of what's going on.
   */ setGlobalOptions: function setGlobalOptions(options) {
        if (options.debug !== undefined) {
            invariant(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
        }
        _NativeFrameRateLogger.default == null ? void 0 : _NativeFrameRateLogger.default.setGlobalOptions({
            debug: !!options.debug
        });
    },
    /**
   * Must call `setContext` before any events can be properly tracked, which is done automatically
   * in `AppRegistry`, but navigation is also a common place to hook in.
   */ setContext: function setContext(context) {
        _NativeFrameRateLogger.default == null ? void 0 : _NativeFrameRateLogger.default.setContext(context);
    },
    /**
   * Called in `ScrollResponder` so any component that uses that module will handle this
   * automatically.
   */ beginScroll: function() {
        _NativeFrameRateLogger.default == null ? void 0 : _NativeFrameRateLogger.default.beginScroll();
    },
    /**
   * Called in `ScrollResponder` so any component that uses that module will handle this
   * automatically.
   */ endScroll: function() {
        _NativeFrameRateLogger.default == null ? void 0 : _NativeFrameRateLogger.default.endScroll();
    }
};
module.exports = FrameRateLogger;


}),
49243: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('PermissionsAndroid');


}),
49842: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _async_to_generator = __webpack_require__(37297);
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _ts_generator = __webpack_require__(63563);
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51663));
var _NativePermissionsAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(82316));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var Platform = __webpack_require__(29861);
var PERMISSION_REQUEST_RESULT = Object.freeze({
    GRANTED: 'granted',
    DENIED: 'denied',
    NEVER_ASK_AGAIN: 'never_ask_again'
});
var PERMISSIONS = Object.freeze({
    READ_CALENDAR: 'android.permission.READ_CALENDAR',
    WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
    CAMERA: 'android.permission.CAMERA',
    READ_CONTACTS: 'android.permission.READ_CONTACTS',
    WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
    GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
    ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
    ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
    ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',
    RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
    READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
    CALL_PHONE: 'android.permission.CALL_PHONE',
    READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
    WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
    ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
    READ_VOICEMAIL: 'com.android.voicemail.permission.READ_VOICEMAIL',
    WRITE_VOICEMAIL: 'com.android.voicemail.permission.WRITE_VOICEMAIL',
    USE_SIP: 'android.permission.USE_SIP',
    PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
    BODY_SENSORS: 'android.permission.BODY_SENSORS',
    BODY_SENSORS_BACKGROUND: 'android.permission.BODY_SENSORS_BACKGROUND',
    SEND_SMS: 'android.permission.SEND_SMS',
    RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
    READ_SMS: 'android.permission.READ_SMS',
    RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
    RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
    READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
    READ_MEDIA_IMAGES: 'android.permission.READ_MEDIA_IMAGES',
    READ_MEDIA_VIDEO: 'android.permission.READ_MEDIA_VIDEO',
    READ_MEDIA_AUDIO: 'android.permission.READ_MEDIA_AUDIO',
    READ_MEDIA_VISUAL_USER_SELECTED: 'android.permission.READ_MEDIA_VISUAL_USER_SELECTED',
    WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',
    BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',
    BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',
    BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',
    ACCESS_MEDIA_LOCATION: 'android.permission.ACCESS_MEDIA_LOCATION',
    ACCEPT_HANDOVER: 'android.permission.ACCEPT_HANDOVER',
    ACTIVITY_RECOGNITION: 'android.permission.ACTIVITY_RECOGNITION',
    ANSWER_PHONE_CALLS: 'android.permission.ANSWER_PHONE_CALLS',
    READ_PHONE_NUMBERS: 'android.permission.READ_PHONE_NUMBERS',
    UWB_RANGING: 'android.permission.UWB_RANGING',
    POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',
    NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES'
});
/**
 * `PermissionsAndroid` provides access to Android M's new permissions model.
 *
 * See https://reactnative.dev/docs/permissionsandroid
 */ var PermissionsAndroid = /*#__PURE__*/ function() {
    "use strict";
    function PermissionsAndroid() {
        this.PERMISSIONS = PERMISSIONS;
        this.RESULTS = PERMISSION_REQUEST_RESULT;
    }
    var _proto = PermissionsAndroid.prototype;
    /**
   * DEPRECATED - use check
   *
   * Returns a promise resolving to a boolean value as to whether the specified
   * permissions has been granted
   *
   * @deprecated
   */ _proto.checkPermission = function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        if (Platform.OS !== 'android') {
            console.warn('"PermissionsAndroid" module works only for Android platform.');
            return Promise.resolve(false);
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
    };
    /**
   * Returns a promise resolving to a boolean value as to whether the specified
   * permissions has been granted
   *
   * See https://reactnative.dev/docs/permissionsandroid#check
   */ _proto.check = function check(permission) {
        if (Platform.OS !== 'android') {
            console.warn('"PermissionsAndroid" module works only for Android platform.');
            return Promise.resolve(false);
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
    };
    /**
   * DEPRECATED - use request
   *
   * Prompts the user to enable a permission and returns a promise resolving to a
   * boolean value indicating whether the user allowed or denied the request
   *
   * If the optional rationale argument is included (which is an object with a
   * `title` and `message`), this function checks with the OS whether it is
   * necessary to show a dialog explaining why the permission is needed
   * (https://developer.android.com/training/permissions/requesting#explain)
   * and then shows the system permission dialog
   *
   * @deprecated
   */ _proto.requestPermission = function requestPermission(permission, rationale) {
        return _async_to_generator._(function() {
            var response;
            return _ts_generator._(this, function(_state) {
                switch(_state.label){
                    case 0:
                        console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                        if (Platform.OS !== 'android') {
                            console.warn('"PermissionsAndroid" module works only for Android platform.');
                            return [
                                2,
                                Promise.resolve(false)
                            ];
                        }
                        return [
                            4,
                            this.request(permission, rationale)
                        ];
                    case 1:
                        response = _state.sent();
                        return [
                            2,
                            response === this.RESULTS.GRANTED
                        ];
                }
            });
        }).call(this);
    };
    /**
   * Prompts the user to enable a permission and returns a promise resolving to a
   * string value indicating whether the user allowed or denied the request
   *
   * See https://reactnative.dev/docs/permissionsandroid#request
   */ _proto.request = function request(permission, rationale) {
        return _async_to_generator._(function() {
            var shouldShowRationale;
            return _ts_generator._(this, function(_state) {
                switch(_state.label){
                    case 0:
                        if (Platform.OS !== 'android') {
                            console.warn('"PermissionsAndroid" module works only for Android platform.');
                            return [
                                2,
                                Promise.resolve(this.RESULTS.DENIED)
                            ];
                        }
                        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
                        if (!rationale) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission)
                        ];
                    case 1:
                        shouldShowRationale = _state.sent();
                        if (shouldShowRationale && !!_NativeDialogManagerAndroid.default) {
                            return [
                                2,
                                new Promise(function(resolve, reject) {
                                    var options = _extends._({}, rationale);
                                    _NativeDialogManagerAndroid.default.showAlert(/* $FlowFixMe[incompatible-exact] (>=0.111.0 site=react_native_fb)
             * This comment suppresses an error found when Flow v0.111 was
             * deployed. To see the error, delete this comment and run Flow.
             */ options, function() {
                                        return reject(new Error('Error showing rationale'));
                                    }, function() {
                                        return resolve(_NativePermissionsAndroid.default.requestPermission(permission));
                                    });
                                })
                            ];
                        }
                        _state.label = 2;
                    case 2:
                        return [
                            2,
                            _NativePermissionsAndroid.default.requestPermission(permission)
                        ];
                }
            });
        }).call(this);
    };
    /**
   * Prompts the user to enable multiple permissions in the same dialog and
   * returns an object with the permissions as keys and strings as values
   * indicating whether the user allowed or denied the request
   *
   * See https://reactnative.dev/docs/permissionsandroid#requestmultiple
   */ _proto.requestMultiple = function requestMultiple(permissions) {
        if (Platform.OS !== 'android') {
            console.warn('"PermissionsAndroid" module works only for Android platform.');
            return Promise.resolve({});
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);
    };
    return PermissionsAndroid;
}();
var PermissionsAndroidInstance = new PermissionsAndroid();
module.exports = PermissionsAndroidInstance;


}),
50181: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24426));
var _Easing = /*#__PURE__*/ _interop_require_default._(__webpack_require__(72353));
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85672));
var _PressabilityDebug = __webpack_require__(9966);
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79250));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * A wrapper for making views respond properly to touches.
 * On press down, the opacity of the wrapped view is decreased, dimming it.
 *
 * Opacity is controlled by wrapping the children in an Animated.View, which is
 * added to the view hierarchy.  Be aware that this can affect layout.
 *
 * Example:
 *
 * ```
 * renderButton: function() {
 *   return (
 *     <TouchableOpacity onPress={this._onPressButton}>
 *       <Image
 *         style={styles.button}
 *         source={require('./myButton.png')}
 *       />
 *     </TouchableOpacity>
 *   );
 * },
 * ```
 * ### Example
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react'
 * import {
 *   AppRegistry,
 *   StyleSheet,
 *   TouchableOpacity,
 *   Text,
 *   View,
 * } from 'react-native'
 *
 * class App extends Component {
 *   state = { count: 0 }
 *
 *   onPress = () => {
 *     this.setState(state => ({
 *       count: state.count + 1
 *     }));
 *   };
 *
 *  render() {
 *    return (
 *      <View style={styles.container}>
 *        <TouchableOpacity
 *          style={styles.button}
 *          onPress={this.onPress}>
 *          <Text> Touch Here </Text>
 *        </TouchableOpacity>
 *        <View style={[styles.countContainer]}>
 *          <Text style={[styles.countText]}>
 *             { this.state.count !== 0 ? this.state.count: null}
 *           </Text>
 *         </View>
 *       </View>
 *     )
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     justifyContent: 'center',
 *     paddingHorizontal: 10
 *   },
 *   button: {
 *     alignItems: 'center',
 *     backgroundColor: '#DDDDDD',
 *     padding: 10
 *   },
 *   countContainer: {
 *     alignItems: 'center',
 *     padding: 10
 *   },
 *   countText: {
 *     color: '#FF00FF'
 *   }
 * })
 *
 * AppRegistry.registerComponent('App', () => App)
 * ```
 *
 */ var TouchableOpacity = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(TouchableOpacity, _React_Component);
    function TouchableOpacity() {
        var _this;
        _this = _React_Component.apply(this, arguments) || this, _this.state = {
            anim: new _Animated.default.Value(_this._getChildStyleOpacityWithDefault()),
            pressability: new _Pressability.default(_this._createPressabilityConfig())
        };
        return _this;
    }
    var _proto = TouchableOpacity.prototype;
    _proto._createPressabilityConfig = function _createPressabilityConfig() {
        var _this = this;
        var _this_props_accessibilityState;
        var _this_props_disabled, _ref;
        return {
            cancelable: !this.props.rejectResponderTermination,
            disabled: (_ref = (_this_props_disabled = this.props.disabled) != null ? _this_props_disabled : this.props['aria-disabled']) != null ? _ref : (_this_props_accessibilityState = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState.disabled,
            hitSlop: this.props.hitSlop,
            delayLongPress: this.props.delayLongPress,
            delayPressIn: this.props.delayPressIn,
            delayPressOut: this.props.delayPressOut,
            minPressDuration: 0,
            pressRectOffset: this.props.pressRetentionOffset,
            onBlur: function(event) {
                if (_Platform.default.isTV) {
                    _this._opacityInactive(250);
                }
                if (_this.props.onBlur != null) {
                    _this.props.onBlur(event);
                }
            },
            onFocus: function(event) {
                if (_Platform.default.isTV) {
                    _this._opacityActive(150);
                }
                if (_this.props.onFocus != null) {
                    _this.props.onFocus(event);
                }
            },
            onLongPress: this.props.onLongPress,
            onPress: this.props.onPress,
            onPressIn: function(event) {
                _this._opacityActive(event.dispatchConfig.registrationName === 'onResponderGrant' ? 0 : 150);
                if (_this.props.onPressIn != null) {
                    _this.props.onPressIn(event);
                }
            },
            onPressOut: function(event) {
                _this._opacityInactive(250);
                if (_this.props.onPressOut != null) {
                    _this.props.onPressOut(event);
                }
            }
        };
    };
    /**
   * Animate the touchable to a new opacity.
   */ _proto._setOpacityTo = function _setOpacityTo(toValue, duration) {
        _Animated.default.timing(this.state.anim, {
            toValue: toValue,
            duration: duration,
            easing: _Easing.default.inOut(_Easing.default.quad),
            useNativeDriver: true
        }).start();
    };
    _proto._opacityActive = function _opacityActive(duration) {
        var _this_props_activeOpacity;
        this._setOpacityTo((_this_props_activeOpacity = this.props.activeOpacity) != null ? _this_props_activeOpacity : 0.2, duration);
    };
    _proto._opacityInactive = function _opacityInactive(duration) {
        this._setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    };
    _proto._getChildStyleOpacityWithDefault = function _getChildStyleOpacityWithDefault() {
        var _flattenStyle1;
        // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[prop-missing]
        var opacity = (_flattenStyle1 = (0, _flattenStyle.default)(this.props.style)) == null ? void 0 : _flattenStyle1.opacity;
        return typeof opacity === 'number' ? opacity : 1;
    };
    _proto.render = function render() {
        var _this_props_accessibilityState, _this_props_accessibilityState1, _this_props_accessibilityState2, _this_props_accessibilityState3, _this_props_accessibilityState4, _this_props_accessibilityValue, _this_props_accessibilityValue1, _this_props_accessibilityValue2, _this_props_accessibilityValue3;
        // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
        // adopting `Pressability`, so preserve that behavior.
        var _this_state_pressability_getEventHandlers = this.state.pressability.getEventHandlers(), onBlur = _this_state_pressability_getEventHandlers.onBlur, onFocus = _this_state_pressability_getEventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties_loose._(_this_state_pressability_getEventHandlers, [
            "onBlur",
            "onFocus"
        ]);
        var _this_props_ariabusy, _this_props_ariachecked, _this_props_ariadisabled, _this_props_ariaexpanded, _this_props_ariaselected;
        var _accessibilityState = {
            busy: (_this_props_ariabusy = this.props['aria-busy']) != null ? _this_props_ariabusy : (_this_props_accessibilityState = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState.busy,
            checked: (_this_props_ariachecked = this.props['aria-checked']) != null ? _this_props_ariachecked : (_this_props_accessibilityState1 = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState1.checked,
            disabled: (_this_props_ariadisabled = this.props['aria-disabled']) != null ? _this_props_ariadisabled : (_this_props_accessibilityState2 = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState2.disabled,
            expanded: (_this_props_ariaexpanded = this.props['aria-expanded']) != null ? _this_props_ariaexpanded : (_this_props_accessibilityState3 = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState3.expanded,
            selected: (_this_props_ariaselected = this.props['aria-selected']) != null ? _this_props_ariaselected : (_this_props_accessibilityState4 = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState4.selected
        };
        _accessibilityState = this.props.disabled != null ? _extends._({}, _accessibilityState, {
            disabled: this.props.disabled
        }) : _accessibilityState;
        var _this_props_ariavaluemax, _this_props_ariavaluemin, _this_props_ariavaluenow, _this_props_ariavaluetext;
        var accessibilityValue = {
            max: (_this_props_ariavaluemax = this.props['aria-valuemax']) != null ? _this_props_ariavaluemax : (_this_props_accessibilityValue = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue.max,
            min: (_this_props_ariavaluemin = this.props['aria-valuemin']) != null ? _this_props_ariavaluemin : (_this_props_accessibilityValue1 = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue1.min,
            now: (_this_props_ariavaluenow = this.props['aria-valuenow']) != null ? _this_props_ariavaluenow : (_this_props_accessibilityValue2 = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue2.now,
            text: (_this_props_ariavaluetext = this.props['aria-valuetext']) != null ? _this_props_ariavaluetext : (_this_props_accessibilityValue3 = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue3.text
        };
        var _this_props_arialive;
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : (_this_props_arialive = this.props['aria-live']) != null ? _this_props_arialive : this.props.accessibilityLiveRegion;
        var _this_props_arialabel;
        var accessibilityLabel = (_this_props_arialabel = this.props['aria-label']) != null ? _this_props_arialabel : this.props.accessibilityLabel;
        var _this_props_ariamodal, _this_props_ariahidden, _this_props_id;
        return /*#__PURE__*/ _react.createElement(_Animated.default.View, _extends._({
            accessible: this.props.accessible !== false,
            accessibilityLabel: accessibilityLabel,
            accessibilityHint: this.props.accessibilityHint,
            accessibilityLanguage: this.props.accessibilityLanguage,
            accessibilityRole: this.props.accessibilityRole,
            accessibilityState: _accessibilityState,
            accessibilityActions: this.props.accessibilityActions,
            onAccessibilityAction: this.props.onAccessibilityAction,
            accessibilityValue: accessibilityValue,
            importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
            accessibilityViewIsModal: (_this_props_ariamodal = this.props['aria-modal']) != null ? _this_props_ariamodal : this.props.accessibilityViewIsModal,
            accessibilityLiveRegion: accessibilityLiveRegion,
            accessibilityElementsHidden: (_this_props_ariahidden = this.props['aria-hidden']) != null ? _this_props_ariahidden : this.props.accessibilityElementsHidden,
            style: [
                this.props.style,
                {
                    opacity: this.state.anim
                }
            ],
            nativeID: (_this_props_id = this.props.id) != null ? _this_props_id : this.props.nativeID,
            testID: this.props.testID,
            onLayout: this.props.onLayout,
            nextFocusDown: this.props.nextFocusDown,
            nextFocusForward: this.props.nextFocusForward,
            nextFocusLeft: this.props.nextFocusLeft,
            nextFocusRight: this.props.nextFocusRight,
            nextFocusUp: this.props.nextFocusUp,
            hasTVPreferredFocus: this.props.hasTVPreferredFocus,
            hitSlop: this.props.hitSlop,
            focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
            ref: this.props.hostRef
        }, eventHandlersWithoutBlurAndFocus), this.props.children,  false ? /*#__PURE__*/ 0 : null);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        var // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[prop-missing]
        _flattenStyle1, // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[prop-missing]
        _flattenStyle2;
        this.state.pressability.configure(this._createPressabilityConfig());
        if (this.props.disabled !== prevProps.disabled || ((_flattenStyle1 = (0, _flattenStyle.default)(prevProps.style)) == null ? void 0 : _flattenStyle1.opacity) !== ((_flattenStyle2 = (0, _flattenStyle.default)(this.props.style)) == null ? void 0 : _flattenStyle2.opacity)) {
            this._opacityInactive(250);
        }
    };
    _proto.componentDidMount = function componentDidMount() {
        this.state.pressability.configure(this._createPressabilityConfig());
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.state.pressability.reset();
        this.state.anim.resetAnimation();
    };
    return TouchableOpacity;
}(_react.Component);
var Touchable = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    return /*#__PURE__*/ _react.createElement(TouchableOpacity, _extends._({}, props, {
        hostRef: ref
    }));
});
Touchable.displayName = 'TouchableOpacity';
module.exports = Touchable;


}),
51223: (function (__unused_webpack_module, exports) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "DynamicColorIOS", ({
    enumerable: true,
    get: function() {
        return DynamicColorIOS;
    }
}));
var DynamicColorIOS = function(tuple) {
    throw new Error('DynamicColorIOS is not available on this platform.');
};


}),
52442: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get addChangeListener () {
        return addChangeListener;
    },
    get getColorScheme () {
        return getColorScheme;
    },
    get setColorScheme () {
        return setColorScheme;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31043));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74765));
var _DebugEnvironment = __webpack_require__(68097);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var lazyState;
/**
 * Ensures that all state and listeners are lazily initialized correctly.
 */ function getState() {
    if (lazyState != null) {
        return lazyState;
    }
    var eventEmitter = new _EventEmitter.default();
    // NOTE: Avoid initializing `NativeAppearance` until it is actually used.
    var NativeAppearance = (__webpack_require__(26732)/* ["default"] */["default"]);
    if (NativeAppearance == null) {
        // Assign `null` to avoid re-initializing on subsequent invocations.
        lazyState = {
            NativeAppearance: null,
            appearance: null,
            eventEmitter: eventEmitter
        };
    } else {
        var state = {
            NativeAppearance: NativeAppearance,
            appearance: null,
            eventEmitter: eventEmitter
        };
        new _NativeEventEmitter.default(NativeAppearance).addListener('appearanceChanged', function(newAppearance) {
            state.appearance = {
                colorScheme: toColorScheme(newAppearance.colorScheme)
            };
            eventEmitter.emit('change', state.appearance);
        });
        lazyState = state;
    }
    return lazyState;
}
function getColorScheme() {
    if (false) {}
    var colorScheme = null;
    var state = getState();
    var NativeAppearance = state.NativeAppearance;
    if (NativeAppearance != null) {
        if (state.appearance == null) {
            // Lazily initialize `state.appearance`. This should only
            // happen once because we never reassign a null value to it.
            state.appearance = {
                colorScheme: toColorScheme(NativeAppearance.getColorScheme())
            };
        }
        colorScheme = state.appearance.colorScheme;
    }
    return colorScheme;
}
function setColorScheme(colorScheme) {
    var state = getState();
    var NativeAppearance = state.NativeAppearance;
    if (NativeAppearance != null) {
        NativeAppearance.setColorScheme(colorScheme != null ? colorScheme : 'unspecified');
        state.appearance = {
            colorScheme: colorScheme
        };
    }
}
function addChangeListener(listener) {
    var eventEmitter = getState().eventEmitter;
    return eventEmitter.addListener('change', listener);
}
/**
 * TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union
 */ function toColorScheme(colorScheme) {
    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark', 'light' or null?");
    return colorScheme;
}


}),
52454: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 * @jsdoc
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeVibration = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94363));
var Platform = __webpack_require__(29861);
/**
 * Vibration API
 *
 * See https://reactnative.dev/docs/vibration
 */ var _vibrating = false;
var _id = 0; // _id is necessary to prevent race condition.
var _default_vibration_length = 400;
function vibrateByPattern(pattern, repeat) {
    if (repeat === void 0) repeat = false;
    if (_vibrating) {
        return;
    }
    _vibrating = true;
    if (pattern[0] === 0) {
        _NativeVibration.default.vibrate(_default_vibration_length);
        // $FlowFixMe[reassign-const]
        pattern = pattern.slice(1);
    }
    if (pattern.length === 0) {
        _vibrating = false;
        return;
    }
    setTimeout(function() {
        return vibrateScheduler(++_id, pattern, repeat, 1);
    }, pattern[0]);
}
function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
        return;
    }
    _NativeVibration.default.vibrate(_default_vibration_length);
    if (nextIndex >= pattern.length) {
        if (repeat) {
            // $FlowFixMe[reassign-const]
            nextIndex = 0;
        } else {
            _vibrating = false;
            return;
        }
    }
    setTimeout(function() {
        return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
}
var Vibration = {
    /**
   * Trigger a vibration with specified `pattern`.
   *
   * See https://reactnative.dev/docs/vibration#vibrate
   */ vibrate: function vibrate(pattern, repeat) {
        if (pattern === void 0) pattern = _default_vibration_length;
        if (repeat === void 0) repeat = false;
        if (Platform.OS === 'android') {
            if (typeof pattern === 'number') {
                _NativeVibration.default.vibrate(pattern);
            } else if (Array.isArray(pattern)) {
                _NativeVibration.default.vibrateByPattern(pattern, repeat ? 0 : -1);
            } else {
                throw new Error('Vibration pattern should be a number or array');
            }
        } else {
            if (_vibrating) {
                return;
            }
            if (typeof pattern === 'number') {
                _NativeVibration.default.vibrate(pattern);
            } else if (Array.isArray(pattern)) {
                vibrateByPattern(pattern, repeat);
            } else {
                throw new Error('Vibration pattern should be a number or array');
            }
        }
    },
    /**
   * Stop vibration
   *
   * See https://reactnative.dev/docs/vibration#cancel
   */ cancel: function cancel() {
        if (Platform.OS === 'ios') {
            _vibrating = false;
        } else {
            _NativeVibration.default.cancel();
        }
    }
};
module.exports = Vibration;


}),
53258: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('DevSettings');


}),
54865: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedSubtraction;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79333));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95338));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var AnimatedSubtraction = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedSubtraction, AnimatedWithChildren);
    function AnimatedSubtraction(a, b) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this;
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    var _proto = AnimatedSubtraction.prototype;
    _proto.__makeNative = function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getValue = function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
    };
    _proto.interpolate = function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
    };
    _proto.__attach = function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
    };
    _proto.__detach = function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        return {
            type: 'subtraction',
            input: [
                this._a.__getNativeTag(),
                this._b.__getNativeTag()
            ]
        };
    };
    return AnimatedSubtraction;
}(_AnimatedWithChildren.default);


}),
55019: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var Context = /*#__PURE__*/ _react.createContext(null);
if (false) {}
var _default = Context;


}),
55195: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *       strict-local
 * @generated SignedSource<<62e766b69d440dab0a2d249f0cea38e0>>
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _ReactNativePrivateInterface = __webpack_require__(19982);
__webpack_require__(82532);
var register = _ReactNativePrivateInterface.ReactNativeViewConfigRegistry.register;
/**
 * Creates a renderable ReactNative host component.
 * Use this method for view configs that are loaded from UIManager.
 * Use createReactNativeComponentClass() for view configs defined within JavaScript.
 *
 * @param {string} config iOS View configuration.
 * @private
 */ var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
    return register(name, callback);
};
module.exports = createReactNativeComponentClass;


}),
56852: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(68493));
var _ViewConfigIgnore = __webpack_require__(89529);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var __INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
        topMomentumScrollBegin: {
            registrationName: 'onMomentumScrollBegin'
        },
        topMomentumScrollEnd: {
            registrationName: 'onMomentumScrollEnd'
        },
        topScroll: {
            registrationName: 'onScroll'
        },
        topScrollBeginDrag: {
            registrationName: 'onScrollBeginDrag'
        },
        topScrollEndDrag: {
            registrationName: 'onScrollEndDrag'
        }
    },
    validAttributes: {
        contentOffset: {
            diff: __webpack_require__(47937)
        },
        decelerationRate: true,
        enableSyncOnScroll: true,
        disableIntervalMomentum: true,
        maintainVisibleContentPosition: true,
        pagingEnabled: true,
        scrollEnabled: true,
        showsVerticalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToOffsets: true,
        snapToStart: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        sendMomentumEvents: true,
        borderRadius: true,
        nestedScrollEnabled: true,
        scrollEventThrottle: true,
        borderStyle: true,
        borderRightColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderBottomColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        persistentScrollbar: true,
        horizontal: true,
        endFillColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        fadingEdgeLength: true,
        overScrollMode: true,
        borderTopLeftRadius: true,
        scrollPerfTag: true,
        borderTopColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        removeClippedSubviews: true,
        borderTopRightRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        pointerEvents: true,
        isInvertedVirtualizedList: true
    }
} : {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
        topMomentumScrollBegin: {
            registrationName: 'onMomentumScrollBegin'
        },
        topMomentumScrollEnd: {
            registrationName: 'onMomentumScrollEnd'
        },
        topScroll: {
            registrationName: 'onScroll'
        },
        topScrollBeginDrag: {
            registrationName: 'onScrollBeginDrag'
        },
        topScrollEndDrag: {
            registrationName: 'onScrollEndDrag'
        },
        topScrollToTop: {
            registrationName: 'onScrollToTop'
        }
    },
    validAttributes: _extends._({
        alwaysBounceHorizontal: true,
        alwaysBounceVertical: true,
        automaticallyAdjustContentInsets: true,
        automaticallyAdjustKeyboardInsets: true,
        automaticallyAdjustsScrollIndicatorInsets: true,
        bounces: true,
        bouncesZoom: true,
        canCancelContentTouches: true,
        centerContent: true,
        contentInset: {
            diff: __webpack_require__(16147)
        },
        contentOffset: {
            diff: __webpack_require__(47937)
        },
        contentInsetAdjustmentBehavior: true,
        decelerationRate: true,
        endDraggingSensitivityMultiplier: true,
        enableSyncOnScroll: true,
        directionalLockEnabled: true,
        disableIntervalMomentum: true,
        indicatorStyle: true,
        inverted: true,
        keyboardDismissMode: true,
        maintainVisibleContentPosition: true,
        maximumZoomScale: true,
        minimumZoomScale: true,
        pagingEnabled: true,
        pinchGestureEnabled: true,
        scrollEnabled: true,
        scrollEventThrottle: true,
        scrollIndicatorInsets: {
            diff: __webpack_require__(16147)
        },
        scrollToOverflowEnabled: true,
        scrollsToTop: true,
        showsHorizontalScrollIndicator: true,
        showsVerticalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToOffsets: true,
        snapToStart: true,
        verticalScrollIndicatorInsets: {
            diff: __webpack_require__(16147)
        },
        zoomScale: true
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onScrollBeginDrag: true,
        onMomentumScrollEnd: true,
        onScrollEndDrag: true,
        onMomentumScrollBegin: true,
        onScrollToTop: true,
        onScroll: true
    }))
};
var ScrollViewNativeComponent = _NativeComponentRegistry.get('RCTScrollView', function() {
    return __INTERNAL_VIEW_CONFIG;
});
var _default = ScrollViewNativeComponent;


}),
56934: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Animation;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _to_consumable_array = __webpack_require__(8034);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(26044));
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34158));
var startNativeAnimationNextId = 1;
var Animation = /*#__PURE__*/ function() {
    function Animation() {}
    var _proto = Animation.prototype;
    _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {};
    _proto.stop = function stop() {
        if (this._nativeId) {
            _NativeAnimatedHelper.default.API.stopAnimation(this._nativeId);
        }
    };
    _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
        // Subclasses that have corresponding animation implementation done in native
        // should override this method
        throw new Error('This animation type cannot be offloaded to native');
    };
    // Helper function for subclasses to make sure onEnd is only called once.
    _proto.__debouncedOnEnd = function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
    };
    _proto.__findAnimatedPropsNodes = function __findAnimatedPropsNodes(node) {
        var result = [];
        if (node instanceof _AnimatedProps.default) {
            result.push(node);
            return result;
        }
        for(var _i = 0, _node___getChildren = node.__getChildren(); _i < _node___getChildren.length; _i++){
            var child = _node___getChildren[_i];
            var _result;
            (_result = result).push.apply(_result, _to_consumable_array._(this.__findAnimatedPropsNodes(child)));
        }
        return result;
    };
    _proto.__startNativeAnimation = function __startNativeAnimation(animatedValue) {
        var _this = this;
        var startNativeAnimationWaitId = "" + startNativeAnimationNextId + ":startAnimation";
        startNativeAnimationNextId += 1;
        _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
        try {
            var config = this.__getNativeAnimationConfig();
            animatedValue.__makeNative(config.platformConfig);
            this._nativeId = _NativeAnimatedHelper.default.generateNewAnimationId();
            _NativeAnimatedHelper.default.API.startAnimatingNode(this._nativeId, animatedValue.__getNativeTag(), config, function(result) {
                _this.__debouncedOnEnd(result);
                // When using natively driven animations, once the animation completes,
                // we need to ensure that the JS side nodes are synced with the updated
                // values.
                var value = result.value;
                if (value != null) {
                    animatedValue.__onAnimatedValueUpdateReceived(value);
                    if (_ReactNativeFeatureFlags.shouldSkipStateUpdatesForLoopingAnimations() && _this.__isLooping) {
                        return;
                    }
                    // Once the JS side node is synced with the updated values, trigger an
                    // update on the AnimatedProps nodes to call any registered callbacks.
                    _this.__findAnimatedPropsNodes(animatedValue).forEach(function(node) {
                        return node.update();
                    });
                }
            });
        } catch (e) {
            throw e;
        } finally{
            _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
        }
    };
    return Animation;
}();


}),
57402: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _create_class = __webpack_require__(51302);
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _dismissKeyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98425));
var _StatusBar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(42638));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _AndroidDrawerLayoutNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(19854));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89169));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var DRAWER_STATES = [
    'Idle',
    'Dragging',
    'Settling'
];
/**
 * React component that wraps the platform `DrawerLayout` (Android only). The
 * Drawer (typically used for navigation) is rendered with `renderNavigationView`
 * and direct children are the main view (where your content goes). The navigation
 * view is initially not visible on the screen, but can be pulled in from the
 * side of the window specified by the `drawerPosition` prop and its width can
 * be set by the `drawerWidth` prop.
 *
 * Example:
 *
 * ```
 * render: function() {
 *   var navigationView = (
 *     <View style={{flex: 1, backgroundColor: '#fff'}}>
 *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>
 *     </View>
 *   );
 *   return (
 *     <DrawerLayoutAndroid
 *       drawerWidth={300}
 *       drawerPosition="left"
 *       renderNavigationView={() => navigationView}>
 *       <View style={{flex: 1, alignItems: 'center'}}>
 *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>
 *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>
 *       </View>
 *     </DrawerLayoutAndroid>
 *   );
 * },
 * ```
 */ var DrawerLayoutAndroid = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(DrawerLayoutAndroid, _React_Component);
    function DrawerLayoutAndroid() {
        var _this;
        _this = _React_Component.apply(this, arguments) || this, // $FlowFixMe[missing-local-annot]
        _this._nativeRef = /*#__PURE__*/ _react.createRef(), _this.state = {
            drawerOpened: false
        }, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ _this._onDrawerSlide = function(event) {
            if (_this.props.onDrawerSlide) {
                // $FlowFixMe[unused-promise]
                _this.props.onDrawerSlide(event);
            }
            if (_this.props.keyboardDismissMode === 'on-drag') {
                (0, _dismissKeyboard.default)();
            }
        }, _this._onDrawerOpen = function() {
            _this.setState({
                drawerOpened: true
            });
            if (_this.props.onDrawerOpen) {
                _this.props.onDrawerOpen();
            }
        }, _this._onDrawerClose = function() {
            _this.setState({
                drawerOpened: false
            });
            if (_this.props.onDrawerClose) {
                _this.props.onDrawerClose();
            }
        }, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ _this._onDrawerStateChanged = function(event) {
            if (_this.props.onDrawerStateChanged) {
                _this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
            }
        };
        return _this;
    }
    var _proto = DrawerLayoutAndroid.prototype;
    _proto.render = function render() {
        var _this_props = this.props, _this_props_drawerBackgroundColor = _this_props.drawerBackgroundColor, drawerBackgroundColor = _this_props_drawerBackgroundColor === void 0 ? 'white' : _this_props_drawerBackgroundColor, onDrawerStateChanged = _this_props.onDrawerStateChanged, renderNavigationView = _this_props.renderNavigationView, onDrawerOpen = _this_props.onDrawerOpen, onDrawerClose = _this_props.onDrawerClose, props = _object_without_properties_loose._(_this_props, [
            "drawerBackgroundColor",
            "onDrawerStateChanged",
            "renderNavigationView",
            "onDrawerOpen",
            "onDrawerClose"
        ]);
        var drawStatusBar = this.props.statusBarBackgroundColor != null;
        var drawerViewWrapper = /*#__PURE__*/ _react.createElement(_View.default, {
            style: [
                styles.drawerSubview,
                {
                    width: this.props.drawerWidth,
                    backgroundColor: drawerBackgroundColor
                }
            ],
            pointerEvents: this.state.drawerOpened ? 'auto' : 'none',
            collapsable: false
        }, renderNavigationView(), drawStatusBar && /*#__PURE__*/ _react.createElement(_View.default, {
            style: styles.drawerStatusBar
        }));
        var childrenWrapper = /*#__PURE__*/ _react.createElement(_View.default, {
            style: styles.mainSubview,
            collapsable: false
        }, drawStatusBar && /*#__PURE__*/ _react.createElement(_StatusBar.default, {
            translucent: true,
            backgroundColor: this.props.statusBarBackgroundColor
        }), drawStatusBar && /*#__PURE__*/ _react.createElement(_View.default, {
            style: [
                styles.statusBar,
                {
                    backgroundColor: this.props.statusBarBackgroundColor
                }
            ]
        }), this.props.children);
        return /*#__PURE__*/ _react.createElement(_AndroidDrawerLayoutNativeComponent.default, _extends._({}, props, {
            ref: this._nativeRef,
            drawerBackgroundColor: drawerBackgroundColor,
            drawerWidth: this.props.drawerWidth,
            drawerPosition: this.props.drawerPosition,
            drawerLockMode: this.props.drawerLockMode,
            style: [
                styles.base,
                this.props.style
            ],
            onDrawerSlide: this._onDrawerSlide,
            onDrawerOpen: this._onDrawerOpen,
            onDrawerClose: this._onDrawerClose,
            onDrawerStateChanged: this._onDrawerStateChanged
        }), childrenWrapper, drawerViewWrapper);
    };
    /**
   * Opens the drawer.
   */ _proto.openDrawer = function openDrawer() {
        _AndroidDrawerLayoutNativeComponent.Commands.openDrawer((0, _nullthrows.default)(this._nativeRef.current));
    };
    /**
   * Closes the drawer.
   */ _proto.closeDrawer = function closeDrawer() {
        _AndroidDrawerLayoutNativeComponent.Commands.closeDrawer((0, _nullthrows.default)(this._nativeRef.current));
    };
    /**
   * Closing and opening example
   * Note: To access the drawer you have to give it a ref
   *
   * Class component:
   *
   * render () {
   *   this.openDrawer = () => {
   *     this.refs.DRAWER.openDrawer()
   *   }
   *   this.closeDrawer = () => {
   *     this.refs.DRAWER.closeDrawer()
   *   }
   *   return (
   *     <DrawerLayoutAndroid ref={'DRAWER'}>
   *      {children}
   *     </DrawerLayoutAndroid>
   *   )
   * }
   *
   * Function component:
   *
   * const drawerRef = useRef()
   * const openDrawer = () => {
   *   drawerRef.current.openDrawer()
   * }
   * const closeDrawer = () => {
   *   drawerRef.current.closeDrawer()
   * }
   * return (
   *   <DrawerLayoutAndroid ref={drawerRef}>
   *     {children}
   *   </DrawerLayoutAndroid>
   * )
   */ /**
   * Native methods
   */ _proto.blur = function blur() {
        (0, _nullthrows.default)(this._nativeRef.current).blur();
    };
    _proto.focus = function focus() {
        (0, _nullthrows.default)(this._nativeRef.current).focus();
    };
    _proto.measure = function measure(callback) {
        (0, _nullthrows.default)(this._nativeRef.current).measure(callback);
    };
    _proto.measureInWindow = function measureInWindow(callback) {
        (0, _nullthrows.default)(this._nativeRef.current).measureInWindow(callback);
    };
    _proto.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        (0, _nullthrows.default)(this._nativeRef.current).measureLayout(relativeToNativeNode, onSuccess, onFail);
    };
    _proto.setNativeProps = function setNativeProps(nativeProps) {
        (0, _nullthrows.default)(this._nativeRef.current).setNativeProps(nativeProps);
    };
    _create_class._(DrawerLayoutAndroid, null, [
        {
            key: "positions",
            get: function get() {
                console.warn('Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value "left" or "right"');
                return {
                    Left: 'left',
                    Right: 'right'
                };
            }
        }
    ]);
    return DrawerLayoutAndroid;
}(_react.Component);
var styles = _StyleSheet.default.create({
    base: {
        flex: 1,
        elevation: 16
    },
    mainSubview: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    },
    drawerSubview: {
        position: 'absolute',
        top: 0,
        bottom: 0
    },
    statusBar: {
        height: _StatusBar.default.currentHeight
    },
    drawerStatusBar: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        height: _StatusBar.default.currentHeight,
        backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
});
module.exports = DrawerLayoutAndroid;


}),
57440: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useSyncOnScroll;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _sliced_to_array = __webpack_require__(21193);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
function useSyncOnScroll(inputRef) {
    var componentRef = (0, _react.useRef)(null);
    var _useState = _sliced_to_array._((0, _react.useState)(), 2), enableSyncOnScroll = _useState[0], setEnableSyncOnScroll = _useState[1];
    (0, _react.useImperativeHandle)(inputRef, function() {
        return {
            componentRef: componentRef,
            unstable_setEnableSyncOnScroll: function(enabled) {
                setEnableSyncOnScroll(enabled);
            }
        };
    }, []);
    return [
        componentRef,
        enableSyncOnScroll
    ];
}


}),
57597: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _async_to_generator = __webpack_require__(37297);
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _ts_generator = __webpack_require__(63563);
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79250));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85511));
var _ImageAnalyticsTagContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55019));
var _ImageInjection = __webpack_require__(45086);
var _ImageSourceUtils = __webpack_require__(99663);
var _ImageUtils = __webpack_require__(41930);
var _ImageViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19820));
var _NativeImageLoaderAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98117));
var _resolveAssetSource = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61558));
var _TextInlineImageNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21231));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var _requestId = 1;
function generateRequestId() {
    return _requestId++;
}
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 *
 * See https://reactnative.dev/docs/image#getsize
 */ function getSize(url, success, failure) {
    var promise = _NativeImageLoaderAndroid.default.getSize(url);
    if (typeof success !== 'function') {
        return promise;
    }
    promise.then(function(sizes) {
        return success(sizes.width, sizes.height);
    })["catch"](failure || function() {
        console.warn('Failed to get size for image: ' + url);
    });
}
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 * with the ability to provide the headers for the request
 *
 * See https://reactnative.dev/docs/image#getsizewithheaders
 */ function getSizeWithHeaders(url, headers, success, failure) {
    var promise = _NativeImageLoaderAndroid.default.getSizeWithHeaders(url, headers);
    if (typeof success !== 'function') {
        return promise;
    }
    promise.then(function(sizes) {
        return success(sizes.width, sizes.height);
    })["catch"](failure || function() {
        console.warn('Failed to get size for image: ' + url);
    });
}
function prefetchWithMetadata(url, queryRootName, rootTag, callback) {
    // TODO: T79192300 Log queryRootName and rootTag
    return prefetch(url, callback);
}
function prefetch(url, callback) {
    var requestId = generateRequestId();
    callback && callback(requestId);
    return _NativeImageLoaderAndroid.default.prefetchImage(url, requestId);
}
function abortPrefetch(requestId) {
    _NativeImageLoaderAndroid.default.abortRequest(requestId);
}
/**
 * Perform cache interrogation.
 *
 * See https://reactnative.dev/docs/image#querycache
 */ function queryCache(urls) {
    return _async_to_generator._(function() {
        return _ts_generator._(this, function(_state) {
            return [
                2,
                _NativeImageLoaderAndroid.default.queryCache(urls)
            ];
        });
    })();
}
/**
 * A React component for displaying different types of images,
 * including network images, static resources, temporary local images, and
 * images from local disk, such as the camera roll.
 *
 * See https://reactnative.dev/docs/image
 */ var BaseImage = /*#__PURE__*/ _react.forwardRef(function(props, forwardedRef) {
    var _source_, _props_accessibilityState, _props_accessibilityState1, _props_accessibilityState2, _props_accessibilityState3, _props_accessibilityState4;
    var source = (0, _ImageSourceUtils.getImageSourcesFromImageProps)(props) || {
        uri: undefined,
        width: undefined,
        height: undefined
    };
    var defaultSource = (0, _resolveAssetSource.default)(props.defaultSource);
    var loadingIndicatorSource = (0, _resolveAssetSource.default)(props.loadingIndicatorSource);
    if (props.children) {
        throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }
    if (props.defaultSource != null && props.loadingIndicatorSource != null) {
        throw new Error('The <Image> component cannot have defaultSource and loadingIndicatorSource at the same time. Please use either defaultSource or loadingIndicatorSource.');
    }
    var style;
    var sources;
    if (Array.isArray(source)) {
        style = [
            styles.base,
            props.style
        ];
        sources = source;
    } else {
        var uri = source.uri;
        if (uri === '') {
            console.warn('source.uri should not be an empty string');
        }
        var _source_width;
        var width = (_source_width = source.width) != null ? _source_width : props.width;
        var _source_height;
        var height = (_source_height = source.height) != null ? _source_height : props.height;
        style = [
            {
                width: width,
                height: height
            },
            styles.base,
            props.style
        ];
        sources = [
            source
        ];
    }
    var height1 = props.height, width1 = props.width, restProps = _object_without_properties_loose._(props, [
        "height",
        "width"
    ]);
    var onLoadStart = props.onLoadStart, onLoad = props.onLoad, onLoadEnd = props.onLoadEnd, onError = props.onError;
    var _props_arialabel, _ref, _props_arialabelledby, _props_ariabusy, _props_ariachecked, _props_ariadisabled, _props_ariaexpanded, _props_ariaselected;
    var nativeProps = _extends._({}, restProps, {
        style: style,
        shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
        // Both iOS and C++ sides expect to have "source" prop, whereas on Android it's "src"
        // (for historical reasons). So in the latter case we populate both "src" and "source",
        // in order to have a better alignment between platforms in the future.
        src: sources,
        source: sources,
        /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
       * when making Flow check .android.js files. */ headers: (source == null ? void 0 : (_source_ = source[0]) == null ? void 0 : _source_.headers) || (source == null ? void 0 : source.headers),
        defaultSrc: defaultSource ? defaultSource.uri : null,
        loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null,
        accessibilityLabel: (_ref = (_props_arialabel = props['aria-label']) != null ? _props_arialabel : props.accessibilityLabel) != null ? _ref : props.alt,
        accessibilityLabelledBy: (_props_arialabelledby = props == null ? void 0 : props['aria-labelledby']) != null ? _props_arialabelledby : props == null ? void 0 : props.accessibilityLabelledBy,
        accessible: props.alt !== undefined ? true : props.accessible,
        accessibilityState: {
            busy: (_props_ariabusy = props['aria-busy']) != null ? _props_ariabusy : (_props_accessibilityState = props.accessibilityState) == null ? void 0 : _props_accessibilityState.busy,
            checked: (_props_ariachecked = props['aria-checked']) != null ? _props_ariachecked : (_props_accessibilityState1 = props.accessibilityState) == null ? void 0 : _props_accessibilityState1.checked,
            disabled: (_props_ariadisabled = props['aria-disabled']) != null ? _props_ariadisabled : (_props_accessibilityState2 = props.accessibilityState) == null ? void 0 : _props_accessibilityState2.disabled,
            expanded: (_props_ariaexpanded = props['aria-expanded']) != null ? _props_ariaexpanded : (_props_accessibilityState3 = props.accessibilityState) == null ? void 0 : _props_accessibilityState3.expanded,
            selected: (_props_ariaselected = props['aria-selected']) != null ? _props_ariaselected : (_props_accessibilityState4 = props.accessibilityState) == null ? void 0 : _props_accessibilityState4.selected
        }
    });
    var flattenedStyle = (0, _flattenStyle.default)(style);
    var objectFit = (0, _ImageUtils.convertObjectFitToResizeMode)(flattenedStyle == null ? void 0 : flattenedStyle.objectFit);
    var resizeMode = objectFit || props.resizeMode || (flattenedStyle == null ? void 0 : flattenedStyle.resizeMode) || 'cover';
    var actualRef = (0, _ImageInjection.useWrapRefWithImageAttachedCallbacks)(forwardedRef);
    return /*#__PURE__*/ _react.createElement(_ImageAnalyticsTagContext.default.Consumer, null, function(analyticTag) {
        var nativePropsWithAnalytics = analyticTag !== null ? _extends._({}, nativeProps, {
            internal_analyticTag: analyticTag
        }) : nativeProps;
        return /*#__PURE__*/ _react.createElement(_TextAncestor.default.Consumer, null, function(hasTextAncestor) {
            if (hasTextAncestor) {
                return /*#__PURE__*/ _react.createElement(_TextInlineImageNativeComponent.default, {
                    // $FlowFixMe[incompatible-type]
                    style: style,
                    resizeMode: resizeMode,
                    headers: nativeProps.headers,
                    src: sources,
                    ref: actualRef
                });
            }
            return /*#__PURE__*/ _react.createElement(_ImageViewNativeComponent.default, _extends._({}, nativePropsWithAnalytics, {
                resizeMode: resizeMode,
                ref: actualRef
            }));
        });
    });
});
var imageComponentDecorator = (0, _ImageInjection.unstable_getImageComponentDecorator)();
if (imageComponentDecorator != null) {
    BaseImage = imageComponentDecorator(BaseImage);
}
// $FlowExpectedError[incompatible-type] Eventually we need to move these functions from statics of the component to exports in the module.
var Image = BaseImage;
Image.displayName = 'Image';
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 *
 * See https://reactnative.dev/docs/image#getsize
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.getSize = getSize;
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 * with the ability to provide the headers for the request
 *
 * See https://reactnative.dev/docs/image#getsizewithheaders
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.getSizeWithHeaders = getSizeWithHeaders;
/**
 * Prefetches a remote image for later use by downloading it to the disk
 * cache
 *
 * See https://reactnative.dev/docs/image#prefetch
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.prefetch = prefetch;
/**
 * Prefetches a remote image for later use by downloading it to the disk
 * cache, and adds metadata for queryRootName and rootTag.
 *
 * See https://reactnative.dev/docs/image#prefetch
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.prefetchWithMetadata = prefetchWithMetadata;
/**
 * Abort prefetch request.
 *
 * See https://reactnative.dev/docs/image#abortprefetch
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.abortPrefetch = abortPrefetch;
/**
 * Perform cache interrogation.
 *
 * See https://reactnative.dev/docs/image#querycache
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.queryCache = queryCache;
/**
 * Resolves an asset reference into an object.
 *
 * See https://reactnative.dev/docs/image#resolveassetsource
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.resolveAssetSource = _resolveAssetSource.default;
var styles = _StyleSheet.default.create({
    base: {
        overflow: 'hidden'
    }
});
module.exports = Image;


}),
57782: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedTransform;
    }
}));
var _class_private_field_loose_base = __webpack_require__(49807);
var _class_private_field_loose_key = __webpack_require__(25788);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _type_of = __webpack_require__(29936);
var _NativeAnimatedValidation = __webpack_require__(41230);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var // NOTE: For potentially historical reasons, some operations only operate on
// the first level of AnimatedNode instances. This optimizes that bevavior.
_shallowNodes = /*#__PURE__*/ _class_private_field_loose_key._("_shallowNodes");
var AnimatedTransform = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedTransform, AnimatedWithChildren);
    function AnimatedTransform(transforms) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this, Object.defineProperty(_this, _shallowNodes, {
            writable: true,
            value: void 0
        });
        _this._transforms = transforms;
        var shallowNodes = [];
        // NOTE: This check should not be necessary, but the types are not enforced
        // as of this writing. This check should be hoisted to instantiation sites.
        if (Array.isArray(transforms)) {
            for(var ii = 0, length = transforms.length; ii < length; ii++){
                var transform = transforms[ii];
                // There should be exactly one property in `transform`.
                for(var key in transform){
                    var value = transform[key];
                    if (value instanceof _AnimatedNode.default) {
                        shallowNodes.push(value);
                    }
                }
            }
        }
        _class_private_field_loose_base._(_this, _shallowNodes)[_shallowNodes] = shallowNodes;
        return _this;
    }
    var _proto = AnimatedTransform.prototype;
    _proto.__makeNative = function __makeNative(platformConfig) {
        var nodes = _class_private_field_loose_base._(this, _shallowNodes)[_shallowNodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__makeNative(platformConfig);
        }
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getValue = function __getValue() {
        return mapTransforms(this._transforms, function(animatedNode) {
            return animatedNode.__getValue();
        });
    };
    _proto.__getAnimatedValue = function __getAnimatedValue() {
        return mapTransforms(this._transforms, function(animatedNode) {
            return animatedNode.__getAnimatedValue();
        });
    };
    _proto.__attach = function __attach() {
        var nodes = _class_private_field_loose_base._(this, _shallowNodes)[_shallowNodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__addChild(this);
        }
    };
    _proto.__detach = function __detach() {
        var nodes = _class_private_field_loose_base._(this, _shallowNodes)[_shallowNodes];
        for(var ii = 0, length = nodes.length; ii < length; ii++){
            var node = nodes[ii];
            node.__removeChild(this);
        }
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        var transformsConfig = [];
        var transforms = this._transforms;
        for(var ii = 0, length = transforms.length; ii < length; ii++){
            var transform = transforms[ii];
            // There should be exactly one property in `transform`.
            for(var key in transform){
                var value = transform[key];
                if (value instanceof _AnimatedNode.default) {
                    transformsConfig.push({
                        type: 'animated',
                        property: key,
                        nodeTag: value.__getNativeTag()
                    });
                } else {
                    transformsConfig.push({
                        type: 'static',
                        property: key,
                        /* $FlowFixMe[incompatible-call] - `value` can be an array or an
               object. This is not currently handled by `transformDataType`.
               Migrating to `TransformObject` might solve this. */ value: _NativeAnimatedHelper.default.transformDataType(value)
                    });
                }
            }
        }
        if (false) {}
        return {
            type: 'transform',
            transforms: transformsConfig
        };
    };
    return AnimatedTransform;
}(_AnimatedWithChildren.default);
function mapTransforms(transforms, mapFunction) {
    return transforms.map(function(transform) {
        var result = {};
        // There should be exactly one property in `transform`.
        for(var key in transform){
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
                result[key] = mapFunction(value);
            } else if (Array.isArray(value)) {
                result[key] = value.map(function(element) {
                    return element instanceof _AnimatedNode.default ? mapFunction(element) : element;
                });
            } else if ((typeof value === "undefined" ? "undefined" : _type_of._(value)) === 'object') {
                var object = {};
                for(var propertyName in value){
                    var propertyValue = value[propertyName];
                    object[propertyName] = propertyValue instanceof _AnimatedNode.default ? mapFunction(propertyValue) : propertyValue;
                }
                result[key] = object;
            } else {
                result[key] = value;
            }
        }
        return result;
    });
}


}),
57932: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeFrameRateLogger = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(72591), exports));
var _default = _NativeFrameRateLogger.default;


}),
58474: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _inherits = __webpack_require__(85428);
var LogBox = (__webpack_require__(73185)/* ["default"] */["default"]);
var React = __webpack_require__(41845);
var YellowBox;
if (false) {} else {
    YellowBox = /*#__PURE__*/ function(_React_Component) {
        _inherits._(YellowBox, _React_Component);
        function YellowBox() {
            return _React_Component.apply(this, arguments) || this;
        }
        var _proto = YellowBox.prototype;
        _proto.render = function render() {
            return null;
        };
        YellowBox.ignoreWarnings = function ignoreWarnings(patterns) {
        // Do nothing.
        };
        YellowBox.install = function install() {
        // Do nothing.
        };
        YellowBox.uninstall = function uninstall() {
        // Do nothing.
        };
        return YellowBox;
    }(React.Component);
}
// $FlowFixMe[method-unbinding]
module.exports = YellowBox;


}),
58520: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
'use client';
// APIs
// Components
// $FlowFixMe[invalid-exported-annotation]
// Plugins
var warnOnce = __webpack_require__(53013);
var invariant = __webpack_require__(27761);
module.exports = {
    get registerCallableModule () {
        return (__webpack_require__(34173)/* ["default"] */["default"]);
    },
    // Components
    get AccessibilityInfo () {
        return (__webpack_require__(27221)/* ["default"] */["default"]);
    },
    get ActivityIndicator () {
        return (__webpack_require__(74709)/* ["default"] */["default"]);
    },
    get Button () {
        return (__webpack_require__(3468)/* ["default"] */["default"]);
    },
    // $FlowFixMe[value-as-type]
    get DrawerLayoutAndroid () {
        return __webpack_require__(57402);
    },
    get FlatList () {
        return __webpack_require__(14295);
    },
    get Image () {
        return __webpack_require__(57597);
    },
    get ImageBackground () {
        return __webpack_require__(86912);
    },
    get InputAccessoryView () {
        return (__webpack_require__(92288)/* ["default"] */["default"]);
    },
    get KeyboardAvoidingView () {
        return (__webpack_require__(18088)/* ["default"] */["default"]);
    },
    get Modal () {
        return __webpack_require__(96689);
    },
    get Pressable () {
        return (__webpack_require__(4789)/* ["default"] */["default"]);
    },
    // $FlowFixMe[value-as-type]
    get ProgressBarAndroid () {
        warnOnce('progress-bar-android-moved', 'ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. " + 'See https://github.com/react-native-progress-view/progress-bar-android');
        return __webpack_require__(35984);
    },
    get RefreshControl () {
        return __webpack_require__(98620);
    },
    get SafeAreaView () {
        return (__webpack_require__(71069)/* ["default"] */["default"]);
    },
    get ScrollView () {
        return __webpack_require__(11418);
    },
    get SectionList () {
        return (__webpack_require__(3317)/* ["default"] */["default"]);
    },
    get StatusBar () {
        return __webpack_require__(42638);
    },
    get Switch () {
        return (__webpack_require__(22361)/* ["default"] */["default"]);
    },
    get Text () {
        return __webpack_require__(18504);
    },
    get TextInput () {
        return __webpack_require__(82523);
    },
    get Touchable () {
        return (__webpack_require__(31004)/* ["default"] */["default"]);
    },
    get TouchableHighlight () {
        return __webpack_require__(80695);
    },
    get TouchableNativeFeedback () {
        return __webpack_require__(48073);
    },
    get TouchableOpacity () {
        return __webpack_require__(50181);
    },
    get TouchableWithoutFeedback () {
        return __webpack_require__(66619);
    },
    get View () {
        return __webpack_require__(8198);
    },
    get VirtualizedList () {
        return __webpack_require__(1625);
    },
    get VirtualizedSectionList () {
        return __webpack_require__(83565);
    },
    // APIs
    get ActionSheetIOS () {
        return __webpack_require__(71323);
    },
    get Alert () {
        return __webpack_require__(50792);
    },
    // Include any types exported in the Animated module together with its default export, so
    // you can references types such as Animated.Numeric
    get Animated () {
        // $FlowExpectedError[prop-missing]: we only return the default export, all other exports are types
        return (__webpack_require__(24426)/* ["default"] */["default"]);
    },
    get Appearance () {
        return __webpack_require__(52442);
    },
    get AppRegistry () {
        return __webpack_require__(98542);
    },
    get AppState () {
        return __webpack_require__(7584);
    },
    get BackHandler () {
        return __webpack_require__(34753);
    },
    get Clipboard () {
        warnOnce('clipboard-moved', 'Clipboard has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. " + 'See https://github.com/react-native-clipboard/clipboard');
        return __webpack_require__(17664);
    },
    get DeviceInfo () {
        return __webpack_require__(80784);
    },
    get DevSettings () {
        return __webpack_require__(32661);
    },
    get Dimensions () {
        return (__webpack_require__(7139)/* ["default"] */["default"]);
    },
    get Easing () {
        return (__webpack_require__(72353)/* ["default"] */["default"]);
    },
    get findNodeHandle () {
        return (__webpack_require__(14288)/* .findNodeHandle */.findNodeHandle);
    },
    get I18nManager () {
        return __webpack_require__(28141);
    },
    get InteractionManager () {
        return __webpack_require__(46846);
    },
    get Keyboard () {
        return __webpack_require__(29723);
    },
    get LayoutAnimation () {
        return __webpack_require__(45519);
    },
    get Linking () {
        return __webpack_require__(2396);
    },
    get LogBox () {
        return (__webpack_require__(73185)/* ["default"] */["default"]);
    },
    get NativeDialogManagerAndroid () {
        return (__webpack_require__(51663)/* ["default"] */["default"]);
    },
    get NativeEventEmitter () {
        return (__webpack_require__(31043)/* ["default"] */["default"]);
    },
    get Networking () {
        return (__webpack_require__(32754)/* ["default"] */["default"]);
    },
    get PanResponder () {
        return (__webpack_require__(81470)/* ["default"] */["default"]);
    },
    get PermissionsAndroid () {
        return __webpack_require__(49842);
    },
    get PixelRatio () {
        return (__webpack_require__(42737)/* ["default"] */["default"]);
    },
    get PushNotificationIOS () {
        warnOnce('pushNotificationIOS-moved', 'PushNotificationIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " + 'See https://github.com/react-native-push-notification/ios');
        return __webpack_require__(24092);
    },
    get Settings () {
        return __webpack_require__(80614);
    },
    get Share () {
        return __webpack_require__(44737);
    },
    get StyleSheet () {
        return __webpack_require__(91145);
    },
    get Systrace () {
        return __webpack_require__(87354);
    },
    // $FlowFixMe[value-as-type]
    get ToastAndroid () {
        return __webpack_require__(83365);
    },
    get TurboModuleRegistry () {
        return __webpack_require__(66030);
    },
    get UIManager () {
        return __webpack_require__(35180);
    },
    get unstable_batchedUpdates () {
        return (__webpack_require__(14288)/* .unstable_batchedUpdates */.unstable_batchedUpdates);
    },
    get useAnimatedValue () {
        return (__webpack_require__(41543)/* ["default"] */["default"]);
    },
    get useColorScheme () {
        return (__webpack_require__(20426)/* ["default"] */["default"]);
    },
    get useWindowDimensions () {
        return (__webpack_require__(74594)/* ["default"] */["default"]);
    },
    get UTFSequence () {
        return (__webpack_require__(30225)/* ["default"] */["default"]);
    },
    get Vibration () {
        return __webpack_require__(52454);
    },
    get YellowBox () {
        return __webpack_require__(58474);
    },
    // Plugins
    get DeviceEventEmitter () {
        return (__webpack_require__(70973)/* ["default"] */["default"]);
    },
    get DynamicColorIOS () {
        return (__webpack_require__(51223)/* .DynamicColorIOS */.DynamicColorIOS);
    },
    get NativeAppEventEmitter () {
        return __webpack_require__(10059);
    },
    get NativeModules () {
        return __webpack_require__(40863);
    },
    get Platform () {
        return __webpack_require__(29861);
    },
    get PlatformColor () {
        return (__webpack_require__(99321)/* .PlatformColor */.PlatformColor);
    },
    get processColor () {
        return (__webpack_require__(83900)/* ["default"] */["default"]);
    },
    get requireNativeComponent () {
        return (__webpack_require__(65664)/* ["default"] */["default"]);
    },
    get RootTagContext () {
        return (__webpack_require__(28360)/* .RootTagContext */.RootTagContext);
    },
    get unstable_enableLogBox () {
        return function() {
            return console.warn('LogBox is enabled by default so there is no need to call unstable_enableLogBox() anymore. This is a no op and will be removed in the next version.');
        };
    }
};
if (false) {}


}),
58555: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('ToastAndroid');


}),
59301: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return SpringAnimation;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _wrap_native_super = __webpack_require__(67381);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3783));
var _SpringConfig = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(79404));
var _Animation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56934));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var SpringAnimation = /*#__PURE__*/ function(Animation) {
    _inherits._(SpringAnimation, Animation);
    function SpringAnimation(config) {
        var _this;
        _this = Animation.call(this) || this;
        var _config_overshootClamping;
        _this._overshootClamping = (_config_overshootClamping = config.overshootClamping) != null ? _config_overshootClamping : false;
        var _config_restDisplacementThreshold;
        _this._restDisplacementThreshold = (_config_restDisplacementThreshold = config.restDisplacementThreshold) != null ? _config_restDisplacementThreshold : 0.001;
        var _config_restSpeedThreshold;
        _this._restSpeedThreshold = (_config_restSpeedThreshold = config.restSpeedThreshold) != null ? _config_restSpeedThreshold : 0.001;
        var _config_velocity;
        _this._initialVelocity = (_config_velocity = config.velocity) != null ? _config_velocity : 0;
        var _config_velocity1;
        _this._lastVelocity = (_config_velocity1 = config.velocity) != null ? _config_velocity1 : 0;
        _this._toValue = config.toValue;
        var _config_delay;
        _this._delay = (_config_delay = config.delay) != null ? _config_delay : 0;
        _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
        _this._platformConfig = config.platformConfig;
        var _config_isInteraction;
        _this.__isInteraction = (_config_isInteraction = config.isInteraction) != null ? _config_isInteraction : !_this._useNativeDriver;
        var _config_iterations;
        _this.__iterations = (_config_iterations = config.iterations) != null ? _config_iterations : 1;
        if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
            (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
            var _config_stiffness;
            _this._stiffness = (_config_stiffness = config.stiffness) != null ? _config_stiffness : 100;
            var _config_damping;
            _this._damping = (_config_damping = config.damping) != null ? _config_damping : 10;
            var _config_mass;
            _this._mass = (_config_mass = config.mass) != null ? _config_mass : 1;
        } else if (config.bounciness !== undefined || config.speed !== undefined) {
            // Convert the origami bounciness/speed values to stiffness/damping
            // We assume mass is 1.
            (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
            var _config_bounciness, _config_speed;
            var springConfig = _SpringConfig.fromBouncinessAndSpeed((_config_bounciness = config.bounciness) != null ? _config_bounciness : 8, (_config_speed = config.speed) != null ? _config_speed : 12);
            _this._stiffness = springConfig.stiffness;
            _this._damping = springConfig.damping;
            _this._mass = 1;
        } else {
            var _config_tension, _config_friction;
            // Convert the origami tension/friction values to stiffness/damping
            // We assume mass is 1.
            var springConfig1 = _SpringConfig.fromOrigamiTensionAndFriction((_config_tension = config.tension) != null ? _config_tension : 40, (_config_friction = config.friction) != null ? _config_friction : 7);
            _this._stiffness = springConfig1.stiffness;
            _this._damping = springConfig1.damping;
            _this._mass = 1;
        }
        (0, _invariant.default)(_this._stiffness > 0, 'Stiffness value must be greater than 0');
        (0, _invariant.default)(_this._damping > 0, 'Damping value must be greater than 0');
        (0, _invariant.default)(_this._mass > 0, 'Mass value must be greater than 0');
        return _this;
    }
    var _proto = SpringAnimation.prototype;
    _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
        var _this__initialVelocity;
        return {
            type: 'spring',
            overshootClamping: this._overshootClamping,
            restDisplacementThreshold: this._restDisplacementThreshold,
            restSpeedThreshold: this._restSpeedThreshold,
            stiffness: this._stiffness,
            damping: this._damping,
            mass: this._mass,
            initialVelocity: (_this__initialVelocity = this._initialVelocity) != null ? _this__initialVelocity : this._lastVelocity,
            toValue: this._toValue,
            iterations: this.__iterations,
            platformConfig: this._platformConfig
        };
    };
    _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this = this;
        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;
        if (previousAnimation instanceof SpringAnimation) {
            var internalState = previousAnimation.getInternalState();
            this._lastPosition = internalState.lastPosition;
            this._lastVelocity = internalState.lastVelocity;
            // Set the initial velocity to the last velocity
            this._initialVelocity = this._lastVelocity;
            this._lastTime = internalState.lastTime;
        }
        var start = function() {
            if (!_this._useNativeDriver && animatedValue.__isNative === true) {
                throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
            }
            if (_this._useNativeDriver) {
                _this.__startNativeAnimation(animatedValue);
            } else {
                _this.onUpdate();
            }
        };
        //  If this._delay is more than 0, we start after the timeout.
        if (this._delay) {
            this._timeout = setTimeout(start, this._delay);
        } else {
            start();
        }
    };
    _proto.getInternalState = function getInternalState() {
        return {
            lastPosition: this._lastPosition,
            lastVelocity: this._lastVelocity,
            lastTime: this._lastTime
        };
    };
    /**
   * This spring model is based off of a damped harmonic oscillator
   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).
   *
   * We use the closed form of the second order differential equation:
   *
   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0
   *
   * where
   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),
   *    ζ = c / 2√mk (damping ratio),
   *    c = damping constant
   *    k = stiffness
   *    m = mass
   *
   * The derivation of the closed form is described in detail here:
   * http://planetmath.org/sites/default/files/texpdf/39745.pdf
   *
   * This algorithm happens to match the algorithm used by CASpringAnimation,
   * a QuartzCore (iOS) API that creates spring animations.
   */ _proto.onUpdate = function onUpdate() {
        // If for some reason we lost a lot of frames (e.g. process large payload or
        // stopped in the debugger), we only advance by 4 frames worth of
        // computation and will continue on the next frame. It's better to have it
        // running at faster speed than jumping to the end.
        var MAX_STEPS = 64;
        var now = Date.now();
        if (now > this._lastTime + MAX_STEPS) {
            now = this._lastTime + MAX_STEPS;
        }
        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio
        var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay
        var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;
        if (zeta < 1) {
            // Under damped
            var envelope = Math.exp(-zeta * omega0 * t);
            position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
            // This looks crazy -- it's actually just the derivative of the
            // oscillation function
            velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
            // Critically damped
            var envelope1 = Math.exp(-omega0 * t);
            position = this._toValue - envelope1 * (x0 + (v0 + omega0 * x0) * t);
            velocity = envelope1 * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }
        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;
        this._onUpdate(position);
        if (!this.__active) {
            // a listener might have stopped us in _onUpdate
            return;
        }
        // Conditions for stopping the spring animation
        var isOvershooting = false;
        if (this._overshootClamping && this._stiffness !== 0) {
            if (this._startPosition < this._toValue) {
                isOvershooting = position > this._toValue;
            } else {
                isOvershooting = position < this._toValue;
            }
        }
        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
        var isDisplacement = true;
        if (this._stiffness !== 0) {
            isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }
        if (isOvershooting || isVelocity && isDisplacement) {
            if (this._stiffness !== 0) {
                // Ensure that we end up with a round value
                this._lastPosition = this._toValue;
                this._lastVelocity = 0;
                this._onUpdate(this._toValue);
            }
            this.__debouncedOnEnd({
                finished: true
            });
            return;
        }
        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
    };
    _proto.stop = function stop() {
        Animation.prototype.stop.call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        __webpack_require__.g.cancelAnimationFrame(this._animationFrame);
        this.__debouncedOnEnd({
            finished: false
        });
    };
    return SpringAnimation;
}(_wrap_native_super._(_Animation.default));


}),
59700: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _sliced_to_array = __webpack_require__(21193);
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24426));
var _ReactFabricPublicInstanceUtils = __webpack_require__(43887);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13493));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var ScrollViewStickyHeaderWithForwardedRef = /*#__PURE__*/ _react.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {
    var inverted = props.inverted, scrollViewHeight = props.scrollViewHeight, hiddenOnScroll = props.hiddenOnScroll, scrollAnimatedValue = props.scrollAnimatedValue, _nextHeaderLayoutY = props.nextHeaderLayoutY;
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), measured = _useState[0], setMeasured = _useState[1];
    var _useState1 = _sliced_to_array._((0, _react.useState)(0), 2), layoutY = _useState1[0], setLayoutY = _useState1[1];
    var _useState2 = _sliced_to_array._((0, _react.useState)(0), 2), layoutHeight = _useState2[0], setLayoutHeight = _useState2[1];
    var _useState3 = _sliced_to_array._((0, _react.useState)(null), 2), translateY = _useState3[0], setTranslateY = _useState3[1];
    var _useState4 = _sliced_to_array._((0, _react.useState)(_nextHeaderLayoutY), 2), nextHeaderLayoutY = _useState4[0], setNextHeaderLayoutY = _useState4[1];
    var _useState5 = _sliced_to_array._((0, _react.useState)(false), 2), isFabric = _useState5[0], setIsFabric = _useState5[1];
    var callbackRef = (0, _react.useCallback)(function(ref) {
        if (ref == null) {
            return;
        }
        ref.setNextHeaderY = setNextHeaderLayoutY;
        setIsFabric((0, _ReactFabricPublicInstanceUtils.isPublicInstance)(ref));
    }, []);
    var ref = // $FlowFixMe[incompatible-type] - Ref is mutated by `callbackRef`.
    (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var offset = (0, _react.useMemo)(function() {
        return hiddenOnScroll === true ? _Animated.default.diffClamp(scrollAnimatedValue.interpolate({
            extrapolateLeft: 'clamp',
            inputRange: [
                layoutY,
                layoutY + 1
            ],
            outputRange: [
                0,
                1
            ]
        }).interpolate({
            inputRange: [
                0,
                1
            ],
            outputRange: [
                0,
                -1
            ]
        }), -layoutHeight, 0) : null;
    }, [
        scrollAnimatedValue,
        layoutHeight,
        layoutY,
        hiddenOnScroll
    ]);
    var _useState6 = _sliced_to_array._((0, _react.useState)(function() {
        var inputRange = [
            -1,
            0
        ];
        var outputRange = [
            0,
            0
        ];
        var initialTranslateY = scrollAnimatedValue.interpolate({
            inputRange: inputRange,
            outputRange: outputRange
        });
        if (offset != null) {
            return _Animated.default.add(initialTranslateY, offset);
        }
        return initialTranslateY;
    }), 2), animatedTranslateY = _useState6[0], setAnimatedTranslateY = _useState6[1];
    var haveReceivedInitialZeroTranslateY = (0, _react.useRef)(true);
    var translateYDebounceTimer = (0, _react.useRef)(null);
    (0, _react.useEffect)(function() {
        if (translateY !== 0 && translateY != null) {
            haveReceivedInitialZeroTranslateY.current = false;
        }
    }, [
        translateY
    ]);
    // This is called whenever the (Interpolated) Animated Value
    // updates, which is several times per frame during scrolling.
    // To ensure that the Fabric ShadowTree has the most recent
    // translate style of this node, we debounce the value and then
    // pass it through to the underlying node during render.
    // This is:
    // 1. Only an issue in Fabric.
    // 2. Worse in Android than iOS. In Android, but not iOS, you
    //    can touch and move your finger slightly and still trigger
    //    a "tap" event. In iOS, moving will cancel the tap in
    //    both Fabric and non-Fabric. On Android when you move
    //    your finger, the hit-detection moves from the Android
    //    platform to JS, so we need the ShadowTree to have knowledge
    //    of the current position.
    var animatedValueListener = (0, _react.useCallback)(function(param) {
        var value = param.value;
        var debounceTimeout = _Platform.default.OS === 'android' ? 15 : 64;
        // When the AnimatedInterpolation is recreated, it always initializes
        // to a value of zero and emits a value change of 0 to its listeners.
        if (value === 0 && !haveReceivedInitialZeroTranslateY.current) {
            haveReceivedInitialZeroTranslateY.current = true;
            return;
        }
        if (translateYDebounceTimer.current != null) {
            clearTimeout(translateYDebounceTimer.current);
        }
        translateYDebounceTimer.current = setTimeout(function() {
            return setTranslateY(value);
        }, debounceTimeout);
    }, []);
    (0, _react.useEffect)(function() {
        var inputRange = [
            -1,
            0
        ];
        var outputRange = [
            0,
            0
        ];
        if (measured) {
            if (inverted === true) {
                // The interpolation looks like:
                // - Negative scroll: no translation
                // - `stickStartPoint` is the point at which the header will start sticking.
                //   It is calculated using the ScrollView viewport height so it is a the bottom.
                // - Headers that are in the initial viewport will never stick, `stickStartPoint`
                //   will be negative.
                // - From 0 to `stickStartPoint` no translation. This will cause the header
                //   to scroll normally until it reaches the top of the scroll view.
                // - From `stickStartPoint` to when the next header y hits the bottom edge of the header: translate
                //   equally to scroll. This will cause the header to stay at the top of the scroll view.
                // - Past the collision with the next header y: no more translation. This will cause the
                //   header to continue scrolling up and make room for the next sticky header.
                //   In the case that there is no next header just translate equally to
                //   scroll indefinitely.
                if (scrollViewHeight != null) {
                    var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;
                    if (stickStartPoint > 0) {
                        inputRange.push(stickStartPoint);
                        outputRange.push(0);
                        inputRange.push(stickStartPoint + 1);
                        outputRange.push(1);
                        // If the next sticky header has not loaded yet (probably windowing) or is the last
                        // we can just keep it sticked forever.
                        var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;
                        if (collisionPoint > stickStartPoint) {
                            inputRange.push(collisionPoint, collisionPoint + 1);
                            outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                        }
                    }
                }
            } else {
                // The interpolation looks like:
                // - Negative scroll: no translation
                // - From 0 to the y of the header: no translation. This will cause the header
                //   to scroll normally until it reaches the top of the scroll view.
                // - From header y to when the next header y hits the bottom edge of the header: translate
                //   equally to scroll. This will cause the header to stay at the top of the scroll view.
                // - Past the collision with the next header y: no more translation. This will cause the
                //   header to continue scrolling up and make room for the next sticky header.
                //   In the case that there is no next header just translate equally to
                //   scroll indefinitely.
                inputRange.push(layoutY);
                outputRange.push(0);
                // If the next sticky header has not loaded yet (probably windowing) or is the last
                // we can just keep it sticked forever.
                var collisionPoint1 = (nextHeaderLayoutY || 0) - layoutHeight;
                if (collisionPoint1 >= layoutY) {
                    inputRange.push(collisionPoint1, collisionPoint1 + 1);
                    outputRange.push(collisionPoint1 - layoutY, collisionPoint1 - layoutY);
                } else {
                    inputRange.push(layoutY + 1);
                    outputRange.push(1);
                }
            }
        }
        var newAnimatedTranslateY = scrollAnimatedValue.interpolate({
            inputRange: inputRange,
            outputRange: outputRange
        });
        if (offset != null) {
            newAnimatedTranslateY = _Animated.default.add(newAnimatedTranslateY, offset);
        }
        // add the event listener
        var animatedListenerId;
        if (isFabric) {
            animatedListenerId = newAnimatedTranslateY.addListener(animatedValueListener);
        }
        setAnimatedTranslateY(newAnimatedTranslateY);
        // clean up the event listener and timer
        return function() {
            if (animatedListenerId) {
                newAnimatedTranslateY.removeListener(animatedListenerId);
            }
            if (translateYDebounceTimer.current != null) {
                clearTimeout(translateYDebounceTimer.current);
            }
        };
    }, [
        nextHeaderLayoutY,
        measured,
        layoutHeight,
        layoutY,
        scrollViewHeight,
        scrollAnimatedValue,
        inverted,
        offset,
        animatedValueListener,
        isFabric
    ]);
    var _onLayout = function(event) {
        setLayoutY(event.nativeEvent.layout.y);
        setLayoutHeight(event.nativeEvent.layout.height);
        setMeasured(true);
        props.onLayout(event);
        var child = _react.Children.only(props.children);
        if (child.props.onLayout) {
            child.props.onLayout(event);
        }
    };
    var child = _react.Children.only(props.children);
    var passthroughAnimatedPropExplicitValues = isFabric && translateY != null ? {
        style: {
            transform: [
                {
                    translateY: translateY
                }
            ]
        }
    } : null;
    return(/* $FlowFixMe[prop-missing] passthroughAnimatedPropExplicitValues isn't properly
       included in the Animated.View flow type. */ /*#__PURE__*/ _react.createElement(_Animated.default.View, {
        collapsable: false,
        nativeID: props.nativeID,
        onLayout: _onLayout,
        ref: ref,
        style: [
            child.props.style,
            styles.header,
            {
                transform: [
                    {
                        translateY: animatedTranslateY
                    }
                ]
            }
        ],
        passthroughAnimatedPropExplicitValues: passthroughAnimatedPropExplicitValues
    }, /*#__PURE__*/ _react.cloneElement(child, {
        style: styles.fill,
        onLayout: undefined
    })));
});
var styles = _StyleSheet.default.create({
    header: {
        zIndex: 10,
        position: 'relative'
    },
    fill: {
        flex: 1
    }
});
var _default = ScrollViewStickyHeaderWithForwardedRef;


}),
61215: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('ModalManager');


}),
61549: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return TimingAnimation;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _wrap_native_super = __webpack_require__(67381);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3783));
var _Animation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56934));
var _easeInOut;
function easeInOut() {
    if (!_easeInOut) {
        var Easing = (__webpack_require__(72353)/* ["default"] */["default"]);
        _easeInOut = Easing.inOut(Easing.ease);
    }
    return _easeInOut;
}
var TimingAnimation = /*#__PURE__*/ function(Animation) {
    _inherits._(TimingAnimation, Animation);
    function TimingAnimation(config) {
        var _this;
        _this = Animation.call(this) || this;
        _this._toValue = config.toValue;
        var _config_easing;
        _this._easing = (_config_easing = config.easing) != null ? _config_easing : easeInOut();
        var _config_duration;
        _this._duration = (_config_duration = config.duration) != null ? _config_duration : 500;
        var _config_delay;
        _this._delay = (_config_delay = config.delay) != null ? _config_delay : 0;
        var _config_iterations;
        _this.__iterations = (_config_iterations = config.iterations) != null ? _config_iterations : 1;
        _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
        _this._platformConfig = config.platformConfig;
        var _config_isInteraction;
        _this.__isInteraction = (_config_isInteraction = config.isInteraction) != null ? _config_isInteraction : !_this._useNativeDriver;
        _this.__isLooping = config.isLooping;
        return _this;
    }
    var _proto = TimingAnimation.prototype;
    _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
        var frameDuration = 1000.0 / 60.0;
        var frames = [];
        var numFrames = Math.round(this._duration / frameDuration);
        for(var frame = 0; frame < numFrames; frame++){
            frames.push(this._easing(frame / numFrames));
        }
        frames.push(this._easing(1));
        return {
            type: 'frames',
            frames: frames,
            toValue: this._toValue,
            iterations: this.__iterations,
            platformConfig: this._platformConfig
        };
    };
    _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this = this;
        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        var start = function() {
            if (!_this._useNativeDriver && animatedValue.__isNative === true) {
                throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
            }
            // Animations that sometimes have 0 duration and sometimes do not
            // still need to use the native driver when duration is 0 so as to
            // not cause intermixed JS and native animations.
            if (_this._duration === 0 && !_this._useNativeDriver) {
                _this._onUpdate(_this._toValue);
                _this.__debouncedOnEnd({
                    finished: true
                });
            } else {
                _this._startTime = Date.now();
                if (_this._useNativeDriver) {
                    _this.__startNativeAnimation(animatedValue);
                } else {
                    _this._animationFrame = requestAnimationFrame(// $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    _this.onUpdate.bind(_this));
                }
            }
        };
        if (this._delay) {
            this._timeout = setTimeout(start, this._delay);
        } else {
            start();
        }
    };
    _proto.onUpdate = function onUpdate() {
        var now = Date.now();
        if (now >= this._startTime + this._duration) {
            if (this._duration === 0) {
                this._onUpdate(this._toValue);
            } else {
                this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
            }
            this.__debouncedOnEnd({
                finished: true
            });
            return;
        }
        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
        if (this.__active) {
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
    };
    _proto.stop = function stop() {
        Animation.prototype.stop.call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        __webpack_require__.g.cancelAnimationFrame(this._animationFrame);
        this.__debouncedOnEnd({
            finished: false
        });
    };
    return TimingAnimation;
}(_wrap_native_super._(_Animation.default));


}),
62137: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AnimatedEvent () {
        return AnimatedEvent;
    },
    get attachNativeEvent () {
        return attachNativeEvent;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _to_consumable_array = __webpack_require__(8034);
var _type_of = __webpack_require__(29936);
var _RendererProxy = __webpack_require__(14288);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95338));
var _AnimatedValueXY = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76716));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
function attachNativeEvent(viewRef, eventName, argMapping, platformConfig) {
    // Find animated values in `argMapping` and create an array representing their
    // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].
    var eventMappings = [];
    var traverse = function(value, path) {
        if (value instanceof _AnimatedValue.default) {
            value.__makeNative(platformConfig);
            eventMappings.push({
                nativeEventPath: path,
                animatedValueTag: value.__getNativeTag()
            });
        } else if (value instanceof _AnimatedValueXY.default) {
            traverse(value.x, path.concat('x'));
            traverse(value.y, path.concat('y'));
        } else if ((typeof value === "undefined" ? "undefined" : _type_of._(value)) === 'object') {
            for(var key in value){
                traverse(value[key], path.concat(key));
            }
        }
    };
    (0, _invariant.default)(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    // Assume that the event containing `nativeEvent` is always the first argument.
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = (0, _RendererProxy.findNodeHandle)(viewRef);
    if (viewTag != null) {
        eventMappings.forEach(function(mapping) {
            _NativeAnimatedHelper.default.API.addAnimatedEventToView(viewTag, eventName, mapping);
        });
    }
    return {
        detach: function() {
            if (viewTag != null) {
                eventMappings.forEach(function(mapping) {
                    _NativeAnimatedHelper.default.API.removeAnimatedEventFromView(viewTag, eventName, // $FlowFixMe[incompatible-call]
                    mapping.animatedValueTag);
                });
            }
        }
    };
}
function validateMapping(argMapping, args) {
    var validate = function(recMapping, recEvt, key) {
        if (recMapping instanceof _AnimatedValue.default) {
            (0, _invariant.default)(typeof recEvt === 'number', 'Bad mapping of event key ' + key + ', should be number but got ' + (typeof recEvt === "undefined" ? "undefined" : _type_of._(recEvt)));
            return;
        }
        if (recMapping instanceof _AnimatedValueXY.default) {
            (0, _invariant.default)(typeof recEvt.x === 'number' && typeof recEvt.y === 'number', 'Bad mapping of event key ' + key + ', should be XY but got ' + recEvt);
            return;
        }
        if (typeof recEvt === 'number') {
            (0, _invariant.default)(recMapping instanceof _AnimatedValue.default, 'Bad mapping of type ' + (typeof recMapping === "undefined" ? "undefined" : _type_of._(recMapping)) + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
        }
        (0, _invariant.default)((typeof recMapping === "undefined" ? "undefined" : _type_of._(recMapping)) === 'object', 'Bad mapping of type ' + (typeof recMapping === "undefined" ? "undefined" : _type_of._(recMapping)) + ' for key ' + key);
        (0, _invariant.default)((typeof recEvt === "undefined" ? "undefined" : _type_of._(recEvt)) === 'object', 'Bad event of type ' + (typeof recEvt === "undefined" ? "undefined" : _type_of._(recEvt)) + ' for key ' + key);
        for(var mappingKey in recMapping){
            validate(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
        }
    };
    (0, _invariant.default)(args.length >= argMapping.length, 'Event has less arguments than mapping');
    argMapping.forEach(function(mapping, idx) {
        validate(mapping, args[idx], 'arg' + idx);
    });
}
var AnimatedEvent = /*#__PURE__*/ function() {
    function AnimatedEvent(argMapping, config) {
        var _this = this;
        this._listeners = [];
        this._callListeners = function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            _this._listeners.forEach(function(listener) {
                return listener.apply(void 0, _to_consumable_array._(args));
            });
        };
        this._argMapping = argMapping;
        if (config == null) {
            console.warn('Animated.event now requires a second argument for options');
            config = {
                useNativeDriver: false
            };
        }
        if (config.listener) {
            this.__addListener(config.listener);
        }
        this._attachedEvent = null;
        this.__isNative = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
        this.__platformConfig = config.platformConfig;
    }
    var _proto = AnimatedEvent.prototype;
    _proto.__addListener = function __addListener(callback) {
        this._listeners.push(callback);
    };
    _proto.__removeListener = function __removeListener(callback) {
        this._listeners = this._listeners.filter(function(listener) {
            return listener !== callback;
        });
    };
    _proto.__attach = function __attach(viewRef, eventName) {
        (0, _invariant.default)(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping, this.__platformConfig);
    };
    _proto.__detach = function __detach(viewTag, eventName) {
        (0, _invariant.default)(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
    };
    _proto.__getHandler = function __getHandler() {
        var _this = this;
        if (this.__isNative) {
            if (false) { var _this1, validatedMapping } else {
                return this._callListeners;
            }
        }
        var validatedMapping1 = false;
        return function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            if (false) {}
            var traverse = function(recMapping, recEvt) {
                if (recMapping instanceof _AnimatedValue.default) {
                    if (typeof recEvt === 'number') {
                        recMapping.setValue(recEvt);
                    }
                } else if (recMapping instanceof _AnimatedValueXY.default) {
                    if ((typeof recEvt === "undefined" ? "undefined" : _type_of._(recEvt)) === 'object') {
                        traverse(recMapping.x, recEvt.x);
                        traverse(recMapping.y, recEvt.y);
                    }
                } else if ((typeof recMapping === "undefined" ? "undefined" : _type_of._(recMapping)) === 'object') {
                    for(var mappingKey in recMapping){
                        /* $FlowFixMe[prop-missing] (>=0.120.0) This comment suppresses an
             * error found when Flow v0.120 was deployed. To see the error,
             * delete this comment and run Flow. */ traverse(recMapping[mappingKey], recEvt[mappingKey]);
                    }
                }
            };
            _this._argMapping.forEach(function(mapping, idx) {
                traverse(mapping, args[idx]);
            });
            _this._callListeners.apply(_this, _to_consumable_array._(args));
        };
    };
    return AnimatedEvent;
}();


}),
6307: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var NativeComponentRegistry = __webpack_require__(72499);
var nativeComponentName = 'AndroidProgressBar';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidProgressBar',
    validAttributes: {
        styleAttr: true,
        typeAttr: true,
        indeterminate: true,
        progress: true,
        animating: true,
        color: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        testID: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
63171: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeShareModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(20267), exports));
var _default = _NativeShareModule.default;


}),
64076: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get NativeText () {
        return NativeText;
    },
    get NativeVirtualText () {
        return NativeVirtualText;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _ViewConfig = __webpack_require__(69031);
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35180));
var _createReactNativeComponentClass = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55195));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var textViewConfig = {
    validAttributes: {
        isHighlighted: true,
        isPressable: true,
        numberOfLines: true,
        ellipsizeMode: true,
        allowFontScaling: true,
        dynamicTypeRamp: true,
        maxFontSizeMultiplier: true,
        disabled: true,
        selectable: true,
        selectionColor: true,
        adjustsFontSizeToFit: true,
        minimumFontScale: true,
        textBreakStrategy: true,
        onTextLayout: true,
        onInlineViewLayout: true,
        dataDetectorType: true,
        android_hyphenationFrequency: true,
        lineBreakStrategyIOS: true
    },
    directEventTypes: {
        topTextLayout: {
            registrationName: 'onTextLayout'
        },
        topInlineViewLayout: {
            registrationName: 'onInlineViewLayout'
        }
    },
    uiViewClassName: 'RCTText'
};
var virtualTextViewConfig = {
    validAttributes: {
        isHighlighted: true,
        isPressable: true,
        maxFontSizeMultiplier: true
    },
    uiViewClassName: 'RCTVirtualText'
};
var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function() {
    return (0, _ViewConfig.createViewConfig)(textViewConfig);
});
var NativeVirtualText = !__webpack_require__.g.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function() {
    return (0, _ViewConfig.createViewConfig)(virtualTextViewConfig);
});


}),
65129: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedWithChildren;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var _NativeAnimatedHelper_API = _NativeAnimatedHelper.default.API, connectAnimatedNodes = _NativeAnimatedHelper_API.connectAnimatedNodes, disconnectAnimatedNodes = _NativeAnimatedHelper_API.disconnectAnimatedNodes;
var AnimatedWithChildren = /*#__PURE__*/ function(AnimatedNode) {
    _inherits._(AnimatedWithChildren, AnimatedNode);
    function AnimatedWithChildren() {
        var _this;
        _this = AnimatedNode.apply(this, arguments) || this, _this._children = [];
        return _this;
    }
    var _proto = AnimatedWithChildren.prototype;
    _proto.__makeNative = function __makeNative(platformConfig) {
        if (!this.__isNative) {
            this.__isNative = true;
            var children = this._children;
            var length = children.length;
            if (length > 0) {
                var nativeTag = this.__getNativeTag();
                for(var ii = 0; ii < length; ii++){
                    var child = children[ii];
                    child.__makeNative(platformConfig);
                    connectAnimatedNodes(nativeTag, child.__getNativeTag());
                }
            }
        }
        AnimatedNode.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__addChild = function __addChild(child) {
        if (this._children.length === 0) {
            this.__attach();
        }
        this._children.push(child);
        if (this.__isNative) {
            // Only accept "native" animated nodes as children
            child.__makeNative(this.__getPlatformConfig());
            connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
    };
    _proto.__removeChild = function __removeChild(child) {
        var index = this._children.indexOf(child);
        if (index === -1) {
            console.warn("Trying to remove a child that doesn't exist");
            return;
        }
        if (this.__isNative && child.__isNative) {
            disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
        this._children.splice(index, 1);
        if (this._children.length === 0) {
            this.__detach();
        }
    };
    _proto.__getChildren = function __getChildren() {
        return this._children;
    };
    _proto.__callListeners = function __callListeners(value) {
        AnimatedNode.prototype.__callListeners.call(this, value);
        if (!this.__isNative) {
            var children = this._children;
            for(var ii = 0, length = children.length; ii < length; ii++){
                var child = children[ii];
                // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                if (child.__getValue) {
                    child.__callListeners(child.__getValue());
                }
            }
        }
    };
    return AnimatedWithChildren;
}(_AnimatedNode.default);


}),
65664: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var createReactNativeComponentClass = __webpack_require__(55195);
var getNativeComponentAttributes = __webpack_require__(29735);
var requireNativeComponent = function(uiViewClassName) {
    return createReactNativeComponentClass(uiViewClassName, function() {
        return getNativeComponentAttributes(uiViewClassName);
    });
};
var _default = requireNativeComponent;


}),
66466: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _to_consumable_array = __webpack_require__(8034);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(26044));
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31043));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70973));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _NativeAnimatedModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(78876));
var _NativeAnimatedTurboModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(39981));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89169));
var NativeAnimatedModule = _NativeAnimatedModule.default != null ? _NativeAnimatedModule.default : _NativeAnimatedTurboModule.default;
var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;
var nativeEventEmitter;
var waitingForQueuedOperations = new Set();
var queueOperations = false;
var queue = [];
var singleOpQueue = [];
var isSingleOpBatching = _Platform.default.OS === 'android' && (NativeAnimatedModule == null ? void 0 : NativeAnimatedModule.queueAndExecuteBatchedOperations) != null && _ReactNativeFeatureFlags.animatedShouldUseSingleOp();
var flushQueueTimeout = null;
var eventListenerGetValueCallbacks = {};
var eventListenerAnimationFinishedCallbacks = {};
var globalEventEmitterGetValueListener = null;
var globalEventEmitterAnimationFinishedListener = null;
function createNativeOperations() {
    var methodNames = [
        'createAnimatedNode',
        'updateAnimatedNodeConfig',
        'getValue',
        'startListeningToAnimatedNodeValue',
        'stopListeningToAnimatedNodeValue',
        'connectAnimatedNodes',
        'disconnectAnimatedNodes',
        'startAnimatingNode',
        'stopAnimation',
        'setAnimatedNodeValue',
        'setAnimatedNodeOffset',
        'flattenAnimatedNodeOffset',
        'extractAnimatedNodeOffset',
        'connectAnimatedNodeToView',
        'disconnectAnimatedNodeFromView',
        'restoreDefaultValues',
        'dropAnimatedNode',
        'addAnimatedEventToView',
        'removeAnimatedEventFromView',
        'addListener',
        'removeListener'
    ];
    var nativeOperations = {};
    if (isSingleOpBatching) {
        var _loop = function(ii, length) {
            var methodName = methodNames[ii];
            var operationID = ii + 1;
            nativeOperations[methodName] = function() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                var _singleOpQueue;
                (_singleOpQueue = singleOpQueue).push.apply(_singleOpQueue, [
                    operationID
                ].concat(_to_consumable_array._(args)));
            };
        };
        for(var ii = 0, length = methodNames.length; ii < length; ii++)_loop(ii, length);
    } else {
        var _loop1 = function(ii1, length1) {
            var methodName = methodNames[ii1];
            nativeOperations[methodName] = function() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                var method = (0, _nullthrows.default)(NativeAnimatedModule)[methodName];
                if (queueOperations || queue.length !== 0) {
                    queue.push(function() {
                        return method.apply(void 0, _to_consumable_array._(args));
                    });
                } else {
                    method.apply(void 0, _to_consumable_array._(args));
                }
            };
        };
        for(var ii1 = 0, length1 = methodNames.length; ii1 < length1; ii1++)_loop1(ii1, length1);
    }
    return nativeOperations;
}
var NativeOperations = createNativeOperations();
var API = {
    getValue: isSingleOpBatching ? function(tag, saveValueCallback) {
        if (saveValueCallback) {
            eventListenerGetValueCallbacks[tag] = saveValueCallback;
        }
        NativeOperations.getValue(tag);
    } : function(tag, saveValueCallback) {
        NativeOperations.getValue(tag, saveValueCallback);
    },
    setWaitingForIdentifier: function(id) {
        waitingForQueuedOperations.add(id);
        queueOperations = true;
        if (_ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush() && flushQueueTimeout) {
            clearTimeout(flushQueueTimeout);
        }
    },
    unsetWaitingForIdentifier: function(id) {
        waitingForQueuedOperations["delete"](id);
        if (waitingForQueuedOperations.size === 0) {
            queueOperations = false;
            API.disableQueue();
        }
    },
    disableQueue: function() {
        (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
        if (_ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush()) {
            var prevTimeout = flushQueueTimeout;
            clearImmediate(prevTimeout);
            flushQueueTimeout = setImmediate(API.flushQueue);
        } else {
            API.flushQueue();
        }
    },
    flushQueue: isSingleOpBatching ? function() {
        var _NativeAnimatedModule_queueAndExecuteBatchedOperations;
        (0, _invariant.default)(NativeAnimatedModule || "production" === 'test', 'Native animated module is not available');
        flushQueueTimeout = null;
        if (singleOpQueue.length === 0) {
            return;
        }
        ensureGlobalEventEmitterListeners();
        NativeAnimatedModule == null ? void 0 : (_NativeAnimatedModule_queueAndExecuteBatchedOperations = NativeAnimatedModule.queueAndExecuteBatchedOperations) == null ? void 0 : _NativeAnimatedModule_queueAndExecuteBatchedOperations.call(NativeAnimatedModule, singleOpQueue);
        singleOpQueue.length = 0;
    } : function() {
        (0, _invariant.default)(NativeAnimatedModule || "production" === 'test', 'Native animated module is not available');
        flushQueueTimeout = null;
        if (queue.length === 0) {
            return;
        }
        if (_Platform.default.OS === 'android') {
            var _NativeAnimatedModule_startOperationBatch;
            NativeAnimatedModule == null ? void 0 : (_NativeAnimatedModule_startOperationBatch = NativeAnimatedModule.startOperationBatch) == null ? void 0 : _NativeAnimatedModule_startOperationBatch.call(NativeAnimatedModule);
        }
        for(var q = 0, l = queue.length; q < l; q++){
            queue[q]();
        }
        queue.length = 0;
        if (_Platform.default.OS === 'android') {
            var _NativeAnimatedModule_finishOperationBatch;
            NativeAnimatedModule == null ? void 0 : (_NativeAnimatedModule_finishOperationBatch = NativeAnimatedModule.finishOperationBatch) == null ? void 0 : _NativeAnimatedModule_finishOperationBatch.call(NativeAnimatedModule);
        }
    },
    createAnimatedNode: function(tag, config) {
        NativeOperations.createAnimatedNode(tag, config);
    },
    updateAnimatedNodeConfig: function(tag, config) {
        NativeOperations.updateAnimatedNodeConfig == null ? void 0 : NativeOperations.updateAnimatedNodeConfig.call(NativeOperations, tag, config);
    },
    startListeningToAnimatedNodeValue: function(tag) {
        NativeOperations.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function(tag) {
        NativeOperations.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function(parentTag, childTag) {
        NativeOperations.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function(parentTag, childTag) {
        NativeOperations.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: isSingleOpBatching ? function(animationId, nodeTag, config, endCallback) {
        if (endCallback) {
            eventListenerAnimationFinishedCallbacks[animationId] = endCallback;
        }
        NativeOperations.startAnimatingNode(animationId, nodeTag, config);
    } : function(animationId, nodeTag, config, endCallback) {
        NativeOperations.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function(animationId) {
        NativeOperations.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function(nodeTag, value) {
        NativeOperations.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function(nodeTag, offset) {
        NativeOperations.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function(nodeTag) {
        NativeOperations.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function(nodeTag) {
        NativeOperations.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function(nodeTag, viewTag) {
        NativeOperations.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function(nodeTag, viewTag) {
        NativeOperations.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    restoreDefaultValues: function(nodeTag) {
        NativeOperations.restoreDefaultValues == null ? void 0 : NativeOperations.restoreDefaultValues.call(NativeOperations, nodeTag);
    },
    dropAnimatedNode: function(tag) {
        NativeOperations.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function(viewTag, eventName, eventMapping) {
        NativeOperations.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function(viewTag, eventName, animatedNodeTag) {
        NativeOperations.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
};
function ensureGlobalEventEmitterListeners() {
    if (globalEventEmitterGetValueListener && globalEventEmitterAnimationFinishedListener) {
        return;
    }
    globalEventEmitterGetValueListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleGetValue', function(params) {
        var tag = params.tag;
        var callback = eventListenerGetValueCallbacks[tag];
        if (!callback) {
            return;
        }
        callback(params.value);
        delete eventListenerGetValueCallbacks[tag];
    });
    globalEventEmitterAnimationFinishedListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleAnimationFinished', function(params) {
        var animations = Array.isArray(params) ? params : [
            params
        ];
        for(var _i = 0; _i < animations.length; _i++){
            var animation = animations[_i];
            var animationId = animation.animationId;
            var callback = eventListenerAnimationFinishedCallbacks[animationId];
            if (callback) {
                callback(animation);
                delete eventListenerAnimationFinishedCallbacks[animationId];
            }
        }
    });
}
function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
}
function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
}
function assertNativeAnimatedModule() {
    (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
}
var _warnedMissingNativeAnimated = false;
function shouldUseNativeDriver(config) {
    if (config.useNativeDriver == null) {
        console.warn('Animated: `useNativeDriver` was not specified. This is a required ' + 'option and must be explicitly set to `true` or `false`');
    }
    if (config.useNativeDriver === true && !NativeAnimatedModule) {
        if (true) {
            if (!_warnedMissingNativeAnimated) {
                console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md');
                _warnedMissingNativeAnimated = true;
            }
        }
        return false;
    }
    return config.useNativeDriver || false;
}
function transformDataType(value) {
    if (typeof value !== 'string') {
        return value;
    }
    if (value.endsWith('deg')) {
        var degrees = parseFloat(value) || 0;
        return degrees * Math.PI / 180.0;
    } else if (value.endsWith('rad')) {
        return parseFloat(value) || 0;
    } else {
        return value;
    }
}
var _default = {
    API: API,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,
    transformDataType: transformDataType,
    get nativeEventEmitter () {
        if (!nativeEventEmitter) {
            nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : NativeAnimatedModule);
        }
        return nativeEventEmitter;
    }
};


}),
66505: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _FlatList = /*#__PURE__*/ _interop_require_default._(__webpack_require__(14295));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93671));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var _default = (0, _createAnimatedComponent.default)(_FlatList.default);


}),
66619: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _to_consumable_array = __webpack_require__(8034);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _PressabilityDebug = __webpack_require__(9966);
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76990));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var PASSTHROUGH_PROPS = [
    'accessibilityActions',
    'accessibilityElementsHidden',
    'accessibilityHint',
    'accessibilityLanguage',
    'accessibilityIgnoresInvertColors',
    'accessibilityLabel',
    'accessibilityLiveRegion',
    'accessibilityRole',
    'accessibilityValue',
    'aria-valuemax',
    'aria-valuemin',
    'aria-valuenow',
    'aria-valuetext',
    'accessibilityViewIsModal',
    'aria-modal',
    'hitSlop',
    'importantForAccessibility',
    'nativeID',
    'onAccessibilityAction',
    'onBlur',
    'onFocus',
    'onLayout',
    'testID'
];
module.exports = function TouchableWithoutFeedback(props) {
    var /*#__PURE__*/ _React;
    var _props_accessibilityState, _props_accessibilityState1, _props_accessibilityState2, _props_accessibilityState3, _props_accessibilityState4;
    var disabled = props.disabled, rejectResponderTermination = props.rejectResponderTermination, ariaDisabled = props['aria-disabled'], accessibilityState = props.accessibilityState, hitSlop = props.hitSlop, delayLongPress = props.delayLongPress, delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, pressRetentionOffset = props.pressRetentionOffset, touchSoundDisabled = props.touchSoundDisabled, _onBlur = props.onBlur, _onFocus = props.onFocus, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut;
    var pressabilityConfig = (0, _react.useMemo)(function() {
        return {
            cancelable: !rejectResponderTermination,
            disabled: disabled !== null ? disabled : ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
            hitSlop: hitSlop,
            delayLongPress: delayLongPress,
            delayPressIn: delayPressIn,
            delayPressOut: delayPressOut,
            minPressDuration: 0,
            pressRectOffset: pressRetentionOffset,
            android_disableSound: touchSoundDisabled,
            onBlur: _onBlur,
            onFocus: _onFocus,
            onLongPress: onLongPress,
            onPress: onPress,
            onPressIn: onPressIn,
            onPressOut: onPressOut
        };
    }, [
        rejectResponderTermination,
        disabled,
        ariaDisabled,
        accessibilityState == null ? void 0 : accessibilityState.disabled,
        hitSlop,
        delayLongPress,
        delayPressIn,
        delayPressOut,
        pressRetentionOffset,
        touchSoundDisabled,
        _onBlur,
        _onFocus,
        onLongPress,
        onPress,
        onPressIn,
        onPressOut
    ]);
    var eventHandlers = (0, _usePressability.default)(pressabilityConfig);
    var element = _react.Children.only(props.children);
    var children = [
        element.props.children
    ];
    var ariaLive = props['aria-live'];
    if (false) {}
    var _props_ariabusy, _props_ariachecked, _props_ariadisabled, _props_ariaexpanded, _props_ariaselected;
    var _accessibilityState = {
        busy: (_props_ariabusy = props['aria-busy']) != null ? _props_ariabusy : (_props_accessibilityState = props.accessibilityState) == null ? void 0 : _props_accessibilityState.busy,
        checked: (_props_ariachecked = props['aria-checked']) != null ? _props_ariachecked : (_props_accessibilityState1 = props.accessibilityState) == null ? void 0 : _props_accessibilityState1.checked,
        disabled: (_props_ariadisabled = props['aria-disabled']) != null ? _props_ariadisabled : (_props_accessibilityState2 = props.accessibilityState) == null ? void 0 : _props_accessibilityState2.disabled,
        expanded: (_props_ariaexpanded = props['aria-expanded']) != null ? _props_ariaexpanded : (_props_accessibilityState3 = props.accessibilityState) == null ? void 0 : _props_accessibilityState3.expanded,
        selected: (_props_ariaselected = props['aria-selected']) != null ? _props_ariaselected : (_props_accessibilityState4 = props.accessibilityState) == null ? void 0 : _props_accessibilityState4.selected
    };
    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
    // adopting `Pressability`, so preserve that behavior.
    var _ref = eventHandlers || {}, onBlur = _ref.onBlur, onFocus = _ref.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties_loose._(_ref, [
        "onBlur",
        "onFocus"
    ]);
    var _props_ariahidden, _props_id;
    var elementProps = _extends._({}, eventHandlersWithoutBlurAndFocus, {
        accessible: props.accessible !== false,
        accessibilityState: props.disabled != null ? _extends._({}, _accessibilityState, {
            disabled: props.disabled
        }) : _accessibilityState,
        focusable: props.focusable !== false && props.onPress !== undefined && !props.disabled,
        accessibilityElementsHidden: (_props_ariahidden = props['aria-hidden']) != null ? _props_ariahidden : props.accessibilityElementsHidden,
        importantForAccessibility: props['aria-hidden'] === true ? 'no-hide-descendants' : props.importantForAccessibility,
        accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive != null ? ariaLive : props.accessibilityLiveRegion,
        nativeID: (_props_id = props.id) != null ? _props_id : props.nativeID
    });
    for(var _i = 0; _i < PASSTHROUGH_PROPS.length; _i++){
        var prop = PASSTHROUGH_PROPS[_i];
        if (props[prop] !== undefined) {
            elementProps[prop] = props[prop];
        }
    }
    // $FlowFixMe[incompatible-call]
    return (_React = _react).cloneElement.apply(_React, [
        element,
        elementProps
    ].concat(_to_consumable_array._(children)));
};


}),
67411: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativePushNotificationManagerIOS = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(3848), exports));
var _default = _NativePushNotificationManagerIOS.default;


}),
68097: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "isAsyncDebugging", ({
    enumerable: true,
    get: function() {
        return isAsyncDebugging;
    }
}));
var isAsyncDebugging = false;
if (false) {}


}),
68899: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var NativeComponentRegistry = __webpack_require__(72499);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(83089)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(22841)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'AndroidSwitch';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidSwitch',
    bubblingEventTypes: {
        topChange: {
            phasedRegistrationNames: {
                captured: 'onChangeCapture',
                bubbled: 'onChange'
            }
        }
    },
    validAttributes: _extends._({
        disabled: true,
        enabled: true,
        thumbColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        trackColorForFalse: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        trackColorForTrue: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        value: true,
        on: true,
        thumbTintColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        trackTintColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        }
    }, ConditionallyIgnoredEventHandlers({
        onChange: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});
var Commands = {
    setNativeValue: function(ref, value) {
        dispatchCommand(ref, "setNativeValue", [
            value
        ]);
    }
};


}),
69323: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('SoundManager');


}),
69521: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
 /**
 * https://developer.mozilla.org/en-US/docs/Web/API/UIEvent
 */  /**
 * https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent
 */  /**
 * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent
 */ 

}),
70146: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedAddition;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79333));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95338));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var AnimatedAddition = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedAddition, AnimatedWithChildren);
    function AnimatedAddition(a, b) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this;
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    var _proto = AnimatedAddition.prototype;
    _proto.__makeNative = function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getValue = function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
    };
    _proto.interpolate = function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
    };
    _proto.__attach = function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
    };
    _proto.__detach = function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        return {
            type: 'addition',
            input: [
                this._a.__getNativeTag(),
                this._b.__getNativeTag()
            ]
        };
    };
    return AnimatedAddition;
}(_AnimatedWithChildren.default);


}),
71069: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * Renders nested content and automatically applies paddings reflect the portion
 * of the view that is not covered by navigation bars, tab bars, toolbars, and
 * other ancestor views.
 *
 * Moreover, and most importantly, Safe Area's paddings reflect physical
 * limitation of the screen, such as rounded corners or camera notches (aka
 * sensor housing area on iPhone X).
 */ var exported = _Platform.default.select({
    ios: (__webpack_require__(31497)/* ["default"] */["default"]),
    "default": _View.default
});
var _default = exported;


}),
71323: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _object_without_properties_loose = __webpack_require__(35684);
var _type_of = __webpack_require__(29936);
var _NativeActionSheetManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24843));
var processColor = (__webpack_require__(83900)/* ["default"] */["default"]);
var invariant = __webpack_require__(27761);
/**
 * Display action sheets and share sheets on iOS.
 *
 * See https://reactnative.dev/docs/actionsheetios
 */ var ActionSheetIOS = {
    /**
   * Display an iOS action sheet.
   *
   * The `options` object must contain one or more of:
   *
   * - `options` (array of strings) - a list of button titles (required)
   * - `cancelButtonIndex` (int) - index of cancel button in `options`
   * - `destructiveButtonIndex` (int or array of ints) - index or indices of destructive buttons in `options`
   * - `title` (string) - a title to show above the action sheet
   * - `message` (string) - a message to show below the title
   * - `disabledButtonIndices` (array of numbers) - a list of button indices which should be disabled
   *
   * The 'callback' function takes one parameter, the zero-based index
   * of the selected item.
   *
   * See https://reactnative.dev/docs/actionsheetios#showactionsheetwithoptions
   */ showActionSheetWithOptions: function(options, callback) {
        invariant((typeof options === "undefined" ? "undefined" : _type_of._(options)) === 'object' && options !== null, 'Options must be a valid object');
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
        var tintColor = options.tintColor, cancelButtonTintColor = options.cancelButtonTintColor, destructiveButtonIndex = options.destructiveButtonIndex, remainingOptions = _object_without_properties_loose._(options, [
            "tintColor",
            "cancelButtonTintColor",
            "destructiveButtonIndex"
        ]);
        var destructiveButtonIndices = null;
        if (Array.isArray(destructiveButtonIndex)) {
            destructiveButtonIndices = destructiveButtonIndex;
        } else if (typeof destructiveButtonIndex === 'number') {
            destructiveButtonIndices = [
                destructiveButtonIndex
            ];
        }
        var processedTintColor = processColor(tintColor);
        var processedCancelButtonTintColor = processColor(cancelButtonTintColor);
        invariant(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');
        invariant(processedCancelButtonTintColor == null || typeof processedCancelButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor');
        _NativeActionSheetManager.default.showActionSheetWithOptions(_extends._({}, remainingOptions, {
            // $FlowFixMe[incompatible-call]
            tintColor: processedTintColor,
            // $FlowFixMe[incompatible-call]
            cancelButtonTintColor: processedCancelButtonTintColor,
            destructiveButtonIndices: destructiveButtonIndices
        }), callback);
    },
    /**
   * Display the iOS share sheet. The `options` object should contain
   * one or both of `message` and `url` and can additionally have
   * a `subject` or `excludedActivityTypes`:
   *
   * - `url` (string) - a URL to share
   * - `message` (string) - a message to share
   * - `subject` (string) - a subject for the message
   * - `excludedActivityTypes` (array) - the activities to exclude from
   *   the ActionSheet
   * - `tintColor` (color) - tint color of the buttons
   *
   * The 'failureCallback' function takes one parameter, an error object.
   * The only property defined on this object is an optional `stack` property
   * of type `string`.
   *
   * The 'successCallback' function takes two parameters:
   *
   * - a boolean value signifying success or failure
   * - a string that, in the case of success, indicates the method of sharing
   *
   * See https://reactnative.dev/docs/actionsheetios#showshareactionsheetwithoptions
   */ showShareActionSheetWithOptions: function(options, failureCallback, successCallback) {
        invariant((typeof options === "undefined" ? "undefined" : _type_of._(options)) === 'object' && options !== null, 'Options must be a valid object');
        invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
        invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
        invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
        _NativeActionSheetManager.default.showShareActionSheetWithOptions(_extends._({}, options, {
            tintColor: processColor(options.tintColor)
        }), failureCallback, successCallback);
    },
    /**
   * Dismisses the most upper iOS action sheet presented, if no action sheet is
   * present a warning is displayed.
   */ dismissActionSheet: function() {
        invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
        if (typeof _NativeActionSheetManager.default.dismissActionSheet === 'function') {
            _NativeActionSheetManager.default.dismissActionSheet();
        }
    }
};
module.exports = ActionSheetIOS;


}),
71673: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _to_consumable_array = __webpack_require__(8034);
var _AnimatedEvent = __webpack_require__(62137);
var _AnimatedImplementation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74124));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93671));
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3783));
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79333));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95338));
var _AnimatedValueXY = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76716));
/**
 * Animations are a source of flakiness in snapshot testing. This mock replaces
 * animation functions from AnimatedImplementation with empty animations for
 * predictability in tests. When possible the animation will run immediately
 * to the final state.
 */ // Prevent any callback invocation from recursively triggering another
// callback, which may trigger another animation
var inAnimationCallback = false;
function mockAnimationStart(start) {
    return function(callback) {
        var guardedCallback = callback == null ? callback : function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            if (inAnimationCallback) {
                console.warn('Ignoring recursive animation callback when running mock animations');
                return;
            }
            inAnimationCallback = true;
            try {
                callback.apply(void 0, _to_consumable_array._(args));
            } finally{
                inAnimationCallback = false;
            }
        };
        start(guardedCallback);
    };
}
var emptyAnimation = {
    start: function() {},
    stop: function() {},
    reset: function() {},
    _startNativeLoop: function() {},
    _isUsingNativeDriver: function() {
        return false;
    }
};
var mockCompositeAnimation = function(animations) {
    return _extends._({}, emptyAnimation, {
        start: mockAnimationStart(function(callback) {
            animations.forEach(function(animation) {
                return animation.start();
            });
            callback == null ? void 0 : callback({
                finished: true
            });
        })
    });
};
var spring = function spring(value, config) {
    var anyValue = value;
    return _extends._({}, emptyAnimation, {
        start: mockAnimationStart(function(callback) {
            anyValue.setValue(config.toValue);
            callback == null ? void 0 : callback({
                finished: true
            });
        })
    });
};
var timing = function timing(value, config) {
    var anyValue = value;
    return _extends._({}, emptyAnimation, {
        start: mockAnimationStart(function(callback) {
            anyValue.setValue(config.toValue);
            callback == null ? void 0 : callback({
                finished: true
            });
        })
    });
};
var decay = function decay(value, config) {
    return emptyAnimation;
};
var sequence = function sequence(animations) {
    return mockCompositeAnimation(animations);
};
var parallel = function parallel(animations, config) {
    return mockCompositeAnimation(animations);
};
var delay = function delay(time) {
    return emptyAnimation;
};
var stagger = function stagger(time, animations) {
    return mockCompositeAnimation(animations);
};
var loop = function loop(animation, // $FlowFixMe[prop-missing]
param) {
    var _ref = param === void 0 ? {} : param, _ref_iterations = _ref.iterations, iterations = _ref_iterations === void 0 ? -1 : _ref_iterations;
    return emptyAnimation;
};
var _default = {
    Value: _AnimatedValue.default,
    ValueXY: _AnimatedValueXY.default,
    Color: _AnimatedColor.default,
    Interpolation: _AnimatedInterpolation.default,
    Node: _AnimatedNode.default,
    decay: decay,
    timing: timing,
    spring: spring,
    add: _AnimatedImplementation.default.add,
    subtract: _AnimatedImplementation.default.subtract,
    divide: _AnimatedImplementation.default.divide,
    multiply: _AnimatedImplementation.default.multiply,
    modulo: _AnimatedImplementation.default.modulo,
    diffClamp: _AnimatedImplementation.default.diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: _AnimatedImplementation.default.event,
    createAnimatedComponent: _createAnimatedComponent.default,
    attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    forkEvent: _AnimatedImplementation.default.forkEvent,
    unforkEvent: _AnimatedImplementation.default.unforkEvent,
    Event: _AnimatedEvent.AnimatedEvent
};


}),
72241: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _shouldUseTurboAnimatedModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80731));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var NativeModule = !(0, _shouldUseTurboAnimatedModule.default)() ? _TurboModuleRegistry.get('NativeAnimatedModule') : null;
var _default = NativeModule;


}),
72353: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var ease;
/**
 * The `Easing` module implements common easing functions. This module is used
 * by [Animate.timing()](docs/animate.html#timing) to convey physically
 * believable motion in animations.
 *
 * You can find a visualization of some common easing functions at
 * http://easings.net/
 *
 * ### Predefined animations
 *
 * The `Easing` module provides several predefined animations through the
 * following methods:
 *
 * - [`back`](docs/easing.html#back) provides a simple animation where the
 *   object goes slightly back before moving forward
 * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation
 * - [`ease`](docs/easing.html#ease) provides a simple inertial animation
 * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction
 *
 * ### Standard functions
 *
 * Three standard easing functions are provided:
 *
 * - [`linear`](docs/easing.html#linear)
 * - [`quad`](docs/easing.html#quad)
 * - [`cubic`](docs/easing.html#cubic)
 *
 * The [`poly`](docs/easing.html#poly) function can be used to implement
 * quartic, quintic, and other higher power functions.
 *
 * ### Additional functions
 *
 * Additional mathematical functions are provided by the following methods:
 *
 * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve
 * - [`circle`](docs/easing.html#circle) provides a circular function
 * - [`sin`](docs/easing.html#sin) provides a sinusoidal function
 * - [`exp`](docs/easing.html#exp) provides an exponential function
 *
 * The following helpers are used to modify other easing functions.
 *
 * - [`in`](docs/easing.html#in) runs an easing function forwards
 * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical
 * - [`out`](docs/easing.html#out) runs an easing function backwards
 */ var Easing = {
    /**
   * A stepping function, returns 1 for any positive value of `n`.
   */ step0: function(n) {
        return n > 0 ? 1 : 0;
    },
    /**
   * A stepping function, returns 1 if `n` is greater than or equal to 1.
   */ step1: function(n) {
        return n >= 1 ? 1 : 0;
    },
    /**
   * A linear function, `f(t) = t`. Position correlates to elapsed time one to
   * one.
   *
   * http://cubic-bezier.com/#0,0,1,1
   */ linear: function(t) {
        return t;
    },
    /**
   * A simple inertial interaction, similar to an object slowly accelerating to
   * speed.
   *
   * http://cubic-bezier.com/#.42,0,1,1
   */ ease: function(t) {
        if (!ease) {
            ease = Easing.bezier(0.42, 0, 1, 1);
        }
        return ease(t);
    },
    /**
   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed
   * time.
   *
   * http://easings.net/#easeInQuad
   */ quad: function(t) {
        return t * t;
    },
    /**
   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed
   * time.
   *
   * http://easings.net/#easeInCubic
   */ cubic: function(t) {
        return t * t * t;
    },
    /**
   * A power function. Position is equal to the Nth power of elapsed time.
   *
   * n = 4: http://easings.net/#easeInQuart
   * n = 5: http://easings.net/#easeInQuint
   */ poly: function(n) {
        return function(t) {
            return Math.pow(t, n);
        };
    },
    /**
   * A sinusoidal function.
   *
   * http://easings.net/#easeInSine
   */ sin: function(t) {
        return 1 - Math.cos(t * Math.PI / 2);
    },
    /**
   * A circular function.
   *
   * http://easings.net/#easeInCirc
   */ circle: function(t) {
        return 1 - Math.sqrt(1 - t * t);
    },
    /**
   * An exponential function.
   *
   * http://easings.net/#easeInExpo
   */ exp: function(t) {
        return Math.pow(2, 10 * (t - 1));
    },
    /**
   * A simple elastic interaction, similar to a spring oscillating back and
   * forth.
   *
   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness
   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N
   * times.
   *
   * http://easings.net/#easeInElastic
   */ elastic: function(bounciness) {
        if (bounciness === void 0) bounciness = 1;
        var p = bounciness * Math.PI;
        return function(t) {
            return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
    },
    /**
   * Use with `Animated.parallel()` to create a simple effect where the object
   * animates back slightly as the animation starts.
   *
   * https://easings.net/#easeInBack
   */ back: function(s) {
        if (s === void 0) s = 1.70158;
        return function(t) {
            return t * t * ((s + 1) * t - s);
        };
    },
    /**
   * Provides a simple bouncing effect.
   *
   * http://easings.net/#easeInBounce
   */ bounce: function(t) {
        if (t < 1 / 2.75) {
            return 7.5625 * t * t;
        }
        if (t < 2 / 2.75) {
            var t2 = t - 1.5 / 2.75;
            return 7.5625 * t2 * t2 + 0.75;
        }
        if (t < 2.5 / 2.75) {
            var t21 = t - 2.25 / 2.75;
            return 7.5625 * t21 * t21 + 0.9375;
        }
        var t22 = t - 2.625 / 2.75;
        return 7.5625 * t22 * t22 + 0.984375;
    },
    /**
   * Provides a cubic bezier curve, equivalent to CSS Transitions'
   * `transition-timing-function`.
   *
   * A useful tool to visualize cubic bezier curves can be found at
   * http://cubic-bezier.com/
   */ bezier: function(x1, y1, x2, y2) {
        var _bezier = (__webpack_require__(3698)/* ["default"] */["default"]);
        return _bezier(x1, y1, x2, y2);
    },
    /**
   * Runs an easing function forwards.
   */ "in": function(easing) {
        return easing;
    },
    /**
   * Runs an easing function backwards.
   */ out: function(easing) {
        return function(t) {
            return 1 - easing(1 - t);
        };
    },
    /**
   * Makes any easing function symmetrical. The easing function will run
   * forwards for half of the duration, then backwards for the rest of the
   * duration.
   */ inOut: function(easing) {
        return function(t) {
            if (t < 0.5) {
                return easing(t * 2) / 2;
            }
            return 1 - easing((1 - t) * 2) / 2;
        };
    }
};
var _default = Easing;


}),
72591: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('FrameRateLogger');


}),
73185: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _to_consumable_array = __webpack_require__(8034);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _RCTLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28462));
var _parseLogBoxLog = __webpack_require__(80644);
var LogBox;
/**
 * LogBox displays logs in the app.
 */ if (false) { var parseLogBoxLog, isWarningModuleWarning, consoleWarnImpl, parseInterpolation, originalConsoleWarn, LogBoxData, isRCTLogAdviceWarning, _require, registerWarning, isLogBoxInstalled, registerError, consoleErrorImpl, originalConsoleError } else {
    LogBox = {
        install: function() {
        // Do nothing.
        },
        uninstall: function() {
        // Do nothing.
        },
        isInstalled: function() {
            return false;
        },
        ignoreLogs: function(patterns) {
        // Do nothing.
        },
        ignoreAllLogs: function(value) {
        // Do nothing.
        },
        clearAllLogs: function() {
        // Do nothing.
        },
        addLog: function(log) {
        // Do nothing.
        },
        addException: function(error) {
        // Do nothing.
        }
    };
}
var _default = LogBox;


}),
73201: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
        return _Platform.default.select({
            ios: 0.998,
            android: 0.985
        });
    } else if (decelerationRate === 'fast') {
        return _Platform.default.select({
            ios: 0.99,
            android: 0.9
        });
    }
    return decelerationRate;
}
module.exports = processDecelerationRate;


}),
73465: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var NativeComponentRegistry = __webpack_require__(72499);
var nativeComponentName = 'AndroidHorizontalScrollContentView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollContentView',
    validAttributes: {
        removeClippedSubviews: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
74124: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _to_consumable_array = __webpack_require__(8034);
var _AnimatedEvent = __webpack_require__(62137);
var _DecayAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13852));
var _SpringAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59301));
var _TimingAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61549));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93671));
var _AnimatedAddition = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70146));
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3783));
var _AnimatedDiffClamp = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17255));
var _AnimatedDivision = /*#__PURE__*/ _interop_require_default._(__webpack_require__(9082));
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79333));
var _AnimatedModulo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8818));
var _AnimatedMultiplication = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19903));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var _AnimatedSubtraction = /*#__PURE__*/ _interop_require_default._(__webpack_require__(54865));
var _AnimatedTracking = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12682));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95338));
var _AnimatedValueXY = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76716));
var add = function add(a, b) {
    return new _AnimatedAddition.default(a, b);
};
var subtract = function subtract(a, b) {
    return new _AnimatedSubtraction.default(a, b);
};
var divide = function divide(a, b) {
    return new _AnimatedDivision.default(a, b);
};
var multiply = function multiply(a, b) {
    return new _AnimatedMultiplication.default(a, b);
};
var modulo = function modulo(a, modulus) {
    return new _AnimatedModulo.default(a, modulus);
};
var diffClamp = function diffClamp(a, min, max) {
    return new _AnimatedDiffClamp.default(a, min, max);
};
var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
        return function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            var _config;
            config.onComplete && (_config = config).onComplete.apply(_config, _to_consumable_array._(args));
            callback && callback.apply(void 0, _to_consumable_array._(args));
        };
    } else {
        return callback || config.onComplete;
    }
};
var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof _AnimatedValueXY.default) {
        var configX = _extends._({}, config);
        var configY = _extends._({}, config);
        for(var key in config){
            var _config_key = config[key], x = _config_key.x, y = _config_key.y;
            if (x !== undefined && y !== undefined) {
                configX[key] = x;
                configY[key] = y;
            }
        }
        var aX = anim(value.x, configX);
        var aY = anim(value.y, configY);
        // We use `stopTogether: false` here because otherwise tracking will break
        // because the second animation will get stopped before it can update.
        return parallel([
            aX,
            aY
        ], {
            stopTogether: false
        });
    } else if (value instanceof _AnimatedColor.default) {
        var configR = _extends._({}, config);
        var configG = _extends._({}, config);
        var configB = _extends._({}, config);
        var configA = _extends._({}, config);
        for(var key1 in config){
            var _config_key1 = config[key1], r = _config_key1.r, g = _config_key1.g, b = _config_key1.b, a = _config_key1.a;
            if (r !== undefined && g !== undefined && b !== undefined && a !== undefined) {
                configR[key1] = r;
                configG[key1] = g;
                configB[key1] = b;
                configA[key1] = a;
            }
        }
        var aR = anim(value.r, configR);
        var aG = anim(value.g, configG);
        var aB = anim(value.b, configB);
        var aA = anim(value.a, configA);
        // We use `stopTogether: false` here because otherwise tracking will break
        // because the second animation will get stopped before it can update.
        return parallel([
            aR,
            aG,
            aB,
            aA
        ], {
            stopTogether: false
        });
    }
    return null;
};
var spring = function spring1(value, config) {
    var start = function start(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        if (configuration.toValue instanceof _AnimatedNode.default) {
            singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _SpringAnimation.default, singleConfig, callback));
        } else {
            singleValue.animate(new _SpringAnimation.default(singleConfig), callback);
        }
    };
    return maybeVectorAnim(value, config, spring) || {
        start: function start1(callback) {
            start(value, config, callback);
        },
        stop: function stop() {
            value.stopAnimation();
        },
        reset: function reset() {
            value.resetAnimation();
        },
        _startNativeLoop: function _startNativeLoop(iterations) {
            var singleConfig = _extends._({}, config, {
                iterations: iterations
            });
            start(value, singleConfig);
        },
        _isUsingNativeDriver: function _isUsingNativeDriver() {
            return config.useNativeDriver || false;
        }
    };
};
var timing = function timing1(value, config) {
    var start = function start(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        if (configuration.toValue instanceof _AnimatedNode.default) {
            singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _TimingAnimation.default, singleConfig, callback));
        } else {
            singleValue.animate(new _TimingAnimation.default(singleConfig), callback);
        }
    };
    return maybeVectorAnim(value, config, timing) || {
        start: function start1(callback, isLooping) {
            start(value, _extends._({}, config, {
                isLooping: isLooping
            }), callback);
        },
        stop: function stop() {
            value.stopAnimation();
        },
        reset: function reset() {
            value.resetAnimation();
        },
        _startNativeLoop: function _startNativeLoop(iterations) {
            var singleConfig = _extends._({}, config, {
                iterations: iterations
            });
            start(value, singleConfig);
        },
        _isUsingNativeDriver: function _isUsingNativeDriver() {
            return config.useNativeDriver || false;
        }
    };
};
var decay = function decay1(value, config) {
    var start = function start(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        singleValue.animate(new _DecayAnimation.default(singleConfig), callback);
    };
    return maybeVectorAnim(value, config, decay) || {
        start: function start1(callback) {
            start(value, config, callback);
        },
        stop: function stop() {
            value.stopAnimation();
        },
        reset: function reset() {
            value.resetAnimation();
        },
        _startNativeLoop: function _startNativeLoop(iterations) {
            var singleConfig = _extends._({}, config, {
                iterations: iterations
            });
            start(value, singleConfig);
        },
        _isUsingNativeDriver: function _isUsingNativeDriver() {
            return config.useNativeDriver || false;
        }
    };
};
var sequence = function sequence(animations) {
    var current = 0;
    return {
        start: function start(callback, isLooping) {
            var onComplete = function onComplete1(result) {
                if (!result.finished) {
                    callback && callback(result);
                    return;
                }
                current++;
                if (current === animations.length) {
                    // if the start is called, even without a reset, it should start from the beginning
                    current = 0;
                    callback && callback(result);
                    return;
                }
                animations[current].start(onComplete, isLooping);
            };
            if (animations.length === 0) {
                callback && callback({
                    finished: true
                });
            } else {
                animations[current].start(onComplete, isLooping);
            }
        },
        stop: function stop() {
            if (current < animations.length) {
                animations[current].stop();
            }
        },
        reset: function reset() {
            animations.forEach(function(animation, idx) {
                if (idx <= current) {
                    animation.reset();
                }
            });
            current = 0;
        },
        _startNativeLoop: function _startNativeLoop() {
            throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
        },
        _isUsingNativeDriver: function _isUsingNativeDriver() {
            return false;
        }
    };
};
var parallel = function parallel(animations, config) {
    var doneCount = 0;
    // Make sure we only call stop() at most once for each animation
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
        start: function start(callback) {
            if (doneCount === animations.length) {
                callback && callback({
                    finished: true
                });
                return;
            }
            animations.forEach(function(animation, idx) {
                var cb = function cb(endResult) {
                    hasEnded[idx] = true;
                    doneCount++;
                    if (doneCount === animations.length) {
                        doneCount = 0;
                        callback && callback(endResult);
                        return;
                    }
                    if (!endResult.finished && stopTogether) {
                        result.stop();
                    }
                };
                if (!animation) {
                    cb({
                        finished: true
                    });
                } else {
                    animation.start(cb);
                }
            });
        },
        stop: function stop() {
            animations.forEach(function(animation, idx) {
                !hasEnded[idx] && animation.stop();
                hasEnded[idx] = true;
            });
        },
        reset: function reset() {
            animations.forEach(function(animation, idx) {
                animation.reset();
                hasEnded[idx] = false;
                doneCount = 0;
            });
        },
        _startNativeLoop: function _startNativeLoop() {
            throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
        },
        _isUsingNativeDriver: function _isUsingNativeDriver() {
            return false;
        }
    };
    return result;
};
var delay = function delay(time) {
    // Would be nice to make a specialized implementation
    return timing(new _AnimatedValue.default(0), {
        toValue: 0,
        delay: time,
        duration: 0,
        useNativeDriver: false
    });
};
var stagger = function stagger(time, animations) {
    return parallel(animations.map(function(animation, i) {
        return sequence([
            delay(time * i),
            animation
        ]);
    }));
};
var loop = function loop(animation, // $FlowFixMe[prop-missing]
param) {
    var _ref = param === void 0 ? {} : param, _ref_iterations = _ref.iterations, iterations = _ref_iterations === void 0 ? -1 : _ref_iterations, _ref_resetBeforeIteration = _ref.resetBeforeIteration, resetBeforeIteration = _ref_resetBeforeIteration === void 0 ? true : _ref_resetBeforeIteration;
    var isFinished = false;
    var iterationsSoFar = 0;
    return {
        start: function start(callback) {
            var restart = function restart1(result) {
                if (result === void 0) result = {
                    finished: true
                };
                if (isFinished || iterationsSoFar === iterations || result.finished === false) {
                    callback && callback(result);
                } else {
                    iterationsSoFar++;
                    resetBeforeIteration && animation.reset();
                    animation.start(restart, iterations === -1);
                }
            };
            if (!animation || iterations === 0) {
                callback && callback({
                    finished: true
                });
            } else {
                if (animation._isUsingNativeDriver()) {
                    animation._startNativeLoop(iterations);
                } else {
                    restart(); // Start looping recursively on the js thread
                }
            }
        },
        stop: function stop() {
            isFinished = true;
            animation.stop();
        },
        reset: function reset() {
            iterationsSoFar = 0;
            isFinished = false;
            animation.reset();
        },
        _startNativeLoop: function _startNativeLoop() {
            throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
        },
        _isUsingNativeDriver: function _isUsingNativeDriver() {
            return animation._isUsingNativeDriver();
        }
    };
};
function forkEvent(event, listener) {
    if (!event) {
        return listener;
    } else if (event instanceof _AnimatedEvent.AnimatedEvent) {
        event.__addListener(listener);
        return event;
    } else {
        return function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            typeof event === 'function' && event.apply(void 0, _to_consumable_array._(args));
            listener.apply(void 0, _to_consumable_array._(args));
        };
    }
}
function unforkEvent(event, listener) {
    if (event && event instanceof _AnimatedEvent.AnimatedEvent) {
        event.__removeListener(listener);
    }
}
var event = function event(argMapping, config) {
    var animatedEvent = new _AnimatedEvent.AnimatedEvent(argMapping, config);
    if (animatedEvent.__isNative) {
        return animatedEvent;
    } else {
        return animatedEvent.__getHandler();
    }
};
var _default = {
    /**
   * Standard value class for driving animations.  Typically initialized with
   * `new Animated.Value(0);`
   *
   * See https://reactnative.dev/docs/animated#value
   */ Value: _AnimatedValue.default,
    /**
   * 2D value class for driving 2D animations, such as pan gestures.
   *
   * See https://reactnative.dev/docs/animatedvaluexy
   */ ValueXY: _AnimatedValueXY.default,
    /**
   * Value class for driving color animations.
   */ Color: _AnimatedColor.default,
    /**
   * Exported to use the Interpolation type in flow.
   *
   * See https://reactnative.dev/docs/animated#interpolation
   */ Interpolation: _AnimatedInterpolation.default,
    /**
   * Exported for ease of type checking. All animated values derive from this
   * class.
   *
   * See https://reactnative.dev/docs/animated#node
   */ Node: _AnimatedNode.default,
    /**
   * Animates a value from an initial velocity to zero based on a decay
   * coefficient.
   *
   * See https://reactnative.dev/docs/animated#decay
   */ decay: decay,
    /**
   * Animates a value along a timed easing curve. The Easing module has tons of
   * predefined curves, or you can use your own function.
   *
   * See https://reactnative.dev/docs/animated#timing
   */ timing: timing,
    /**
   * Animates a value according to an analytical spring model based on
   * damped harmonic oscillation.
   *
   * See https://reactnative.dev/docs/animated#spring
   */ spring: spring,
    /**
   * Creates a new Animated value composed from two Animated values added
   * together.
   *
   * See https://reactnative.dev/docs/animated#add
   */ add: add,
    /**
   * Creates a new Animated value composed by subtracting the second Animated
   * value from the first Animated value.
   *
   * See https://reactnative.dev/docs/animated#subtract
   */ subtract: subtract,
    /**
   * Creates a new Animated value composed by dividing the first Animated value
   * by the second Animated value.
   *
   * See https://reactnative.dev/docs/animated#divide
   */ divide: divide,
    /**
   * Creates a new Animated value composed from two Animated values multiplied
   * together.
   *
   * See https://reactnative.dev/docs/animated#multiply
   */ multiply: multiply,
    /**
   * Creates a new Animated value that is the (non-negative) modulo of the
   * provided Animated value.
   *
   * See https://reactnative.dev/docs/animated#modulo
   */ modulo: modulo,
    /**
   * Create a new Animated value that is limited between 2 values. It uses the
   * difference between the last value so even if the value is far from the
   * bounds it will start changing when the value starts getting closer again.
   *
   * See https://reactnative.dev/docs/animated#diffclamp
   */ diffClamp: diffClamp,
    /**
   * Starts an animation after the given delay.
   *
   * See https://reactnative.dev/docs/animated#delay
   */ delay: delay,
    /**
   * Starts an array of animations in order, waiting for each to complete
   * before starting the next. If the current running animation is stopped, no
   * following animations will be started.
   *
   * See https://reactnative.dev/docs/animated#sequence
   */ sequence: sequence,
    /**
   * Starts an array of animations all at the same time. By default, if one
   * of the animations is stopped, they will all be stopped. You can override
   * this with the `stopTogether` flag.
   *
   * See https://reactnative.dev/docs/animated#parallel
   */ parallel: parallel,
    /**
   * Array of animations may run in parallel (overlap), but are started in
   * sequence with successive delays.  Nice for doing trailing effects.
   *
   * See https://reactnative.dev/docs/animated#stagger
   */ stagger: stagger,
    /**
   * Loops a given animation continuously, so that each time it reaches the
   * end, it resets and begins again from the start.
   *
   * See https://reactnative.dev/docs/animated#loop
   */ loop: loop,
    /**
   * Takes an array of mappings and extracts values from each arg accordingly,
   * then calls `setValue` on the mapped outputs.
   *
   * See https://reactnative.dev/docs/animated#event
   */ event: event,
    /**
   * Make any React component Animatable.  Used to create `Animated.View`, etc.
   *
   * See https://reactnative.dev/docs/animated#createanimatedcomponent
   */ createAnimatedComponent: _createAnimatedComponent.default,
    /**
   * Imperative API to attach an animated value to an event on a view. Prefer
   * using `Animated.event` with `useNativeDrive: true` if possible.
   *
   * See https://reactnative.dev/docs/animated#attachnativeevent
   */ attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    /**
   * Advanced imperative API for snooping on animated events that are passed in
   * through props. Use values directly where possible.
   *
   * See https://reactnative.dev/docs/animated#forkevent
   */ forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    /**
   * Expose Event class, so it can be used as a type for type checkers.
   */ Event: _AnimatedEvent.AnimatedEvent
};


}),
74594: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useWindowDimensions;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _sliced_to_array = __webpack_require__(21193);
var _Dimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7139));
__webpack_require__(34703);
var _react = __webpack_require__(41845);
function useWindowDimensions() {
    var _useState = _sliced_to_array._((0, _react.useState)(function() {
        return _Dimensions.default.get('window');
    }), 2), dimensions = _useState[0], setDimensions = _useState[1];
    (0, _react.useEffect)(function() {
        var handleChange = function handleChange(param) {
            var window = param.window;
            if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {
                setDimensions(window);
            }
        };
        var subscription = _Dimensions.default.addEventListener('change', handleChange);
        // We might have missed an update between calling `get` in render and
        // `addEventListener` in this handler, so we set it here. If there was
        // no change, React will filter out this update as a no-op.
        handleChange({
            window: _Dimensions.default.get('window')
        });
        return function() {
            subscription.remove();
        };
    }, [
        dimensions
    ]);
    return dimensions;
}


}),
74709: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var PlatformActivityIndicator = _Platform.default.OS === 'android' ? __webpack_require__(35984) : (__webpack_require__(86402)/* ["default"] */["default"]);
var GRAY = '#999999';
var ActivityIndicator = function(_param, forwardedRef) {
    var _param_animating = _param.animating, animating = _param_animating === void 0 ? true : _param_animating, _param_color = _param.color, color = _param_color === void 0 ? _Platform.default.OS === 'ios' ? GRAY : null : _param_color, _param_hidesWhenStopped = _param.hidesWhenStopped, hidesWhenStopped = _param_hidesWhenStopped === void 0 ? true : _param_hidesWhenStopped, onLayout = _param.onLayout, _param_size = _param.size, size = _param_size === void 0 ? 'small' : _param_size, style = _param.style, restProps = _object_without_properties_loose._(_param, [
        "animating",
        "color",
        "hidesWhenStopped",
        "onLayout",
        "size",
        "style"
    ]);
    var sizeStyle;
    var sizeProp;
    switch(size){
        case 'small':
            sizeStyle = styles.sizeSmall;
            sizeProp = 'small';
            break;
        case 'large':
            sizeStyle = styles.sizeLarge;
            sizeProp = 'large';
            break;
        default:
            sizeStyle = {
                height: size,
                width: size
            };
            break;
    }
    var nativeProps = _extends._({
        animating: animating,
        color: color,
        hidesWhenStopped: hidesWhenStopped
    }, restProps, {
        ref: forwardedRef,
        style: sizeStyle,
        size: sizeProp
    });
    var androidProps = {
        styleAttr: 'Normal',
        indeterminate: true
    };
    return /*#__PURE__*/ _react.createElement(_View.default, {
        onLayout: onLayout,
        style: _StyleSheet.default.compose(styles.container, style)
    }, _Platform.default.OS === 'android' ? // $FlowFixMe[prop-missing] Flow doesn't know when this is the android component
    /*#__PURE__*/ _react.createElement(PlatformActivityIndicator, _extends._({}, nativeProps, androidProps)) : /* $FlowFixMe[prop-missing] (>=0.106.0 site=react_native_android_fb) This comment
         * suppresses an error found when Flow v0.106 was deployed. To see the
         * error, delete this comment and run Flow. */ /*#__PURE__*/ _react.createElement(PlatformActivityIndicator, nativeProps));
};
/**
  Displays a circular loading indicator.

  ```SnackPlayer name=ActivityIndicator%20Example
  import React from 'react';
  import {ActivityIndicator, StyleSheet, View} from 'react-native';

  const App = () => (
    <View style={[styles.container, styles.horizontal]}>
      <ActivityIndicator />
      <ActivityIndicator size="large" />
      <ActivityIndicator size="small" color="#0000ff" />
      <ActivityIndicator size="large" color="#00ff00" />
    </View>
  );

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
    },
    horizontal: {
      flexDirection: 'row',
      justifyContent: 'space-around',
      padding: 10,
    },
  });

  export default App;
```
*/ var ActivityIndicatorWithRef = /*#__PURE__*/ _react.forwardRef(ActivityIndicator);
ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
var styles = _StyleSheet.default.create({
    container: {
        alignItems: 'center',
        justifyContent: 'center'
    },
    sizeSmall: {
        width: 20,
        height: 20
    },
    sizeLarge: {
        width: 36,
        height: 36
    }
});
var _default = ActivityIndicatorWithRef;


}),
75201: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get VScrollContentViewNativeComponent () {
        return VScrollContentViewNativeComponent;
    },
    get VScrollViewNativeComponent () {
        return VScrollViewNativeComponent;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _sliced_to_array = __webpack_require__(21193);
var _ScrollContentViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18002));
var _ScrollViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56852));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _useSyncOnScroll = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57440));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var VScrollViewNativeComponent = /*#__PURE__*/ (0, _react.forwardRef)(function VScrollViewNativeComponent(props, ref) {
    var _useSyncOnScroll1 = _sliced_to_array._((0, _useSyncOnScroll.default)(ref), 2), componentRef = _useSyncOnScroll1[0], enableSyncOnScroll = _useSyncOnScroll1[1];
    // NOTE: When `useSyncOnScroll` triggers an update, `props` will not have
    // changed. Notably, `props.children` will be the same, allowing React to
    // bail out during reconciliation.
    return /*#__PURE__*/ _react.createElement(_ScrollViewNativeComponent.default, _extends._({}, props, {
        ref: componentRef,
        enableSyncOnScroll: enableSyncOnScroll
    }));
});
var VScrollContentViewNativeComponent = _Platform.default.OS === 'android' ? _View.default : _ScrollContentViewNativeComponent.default;


}),
7584: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31043));
var _logError = /*#__PURE__*/ _interop_require_default._(__webpack_require__(78026));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
__webpack_require__(74765);
var _NativeAppState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92800));
/**
 * `AppState` can tell you if the app is in the foreground or background,
 * and notify you when the state changes.
 *
 * See https://reactnative.dev/docs/appstate
 */ var AppState = /*#__PURE__*/ function() {
    "use strict";
    function AppState() {
        var _this = this;
        this.currentState = null;
        if (_NativeAppState.default == null) {
            this.isAvailable = false;
        } else {
            this.isAvailable = true;
            var emitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
            // If you want to use the native module on other platforms, please remove this condition and test its behavior
            _Platform.default.OS !== 'ios' ? null : _NativeAppState.default);
            this._emitter = emitter;
            this.currentState = _NativeAppState.default.getConstants().initialAppState;
            var eventUpdated = false;
            // TODO: this is a terrible solution - in order to ensure `currentState`
            // prop is up to date, we have to register an observer that updates it
            // whenever the state changes, even if nobody cares. We should just
            // deprecate the `currentState` property and get rid of this.
            emitter.addListener('appStateDidChange', function(appStateData) {
                eventUpdated = true;
                _this.currentState = appStateData.app_state;
            });
            // TODO: see above - this request just populates the value of `currentState`
            // when the module is first initialized. Would be better to get rid of the
            // prop and expose `getCurrentAppState` method directly.
            // $FlowExpectedError[incompatible-call]
            _NativeAppState.default.getCurrentAppState(function(appStateData) {
                // It's possible that the state will have changed here & listeners need to be notified
                if (!eventUpdated && _this.currentState !== appStateData.app_state) {
                    _this.currentState = appStateData.app_state;
                    // $FlowFixMe[incompatible-call]
                    emitter.emit('appStateDidChange', appStateData);
                }
            }, _logError.default);
        }
    }
    var _proto = AppState.prototype;
    /**
   * Add a handler to AppState changes by listening to the `change` event type
   * and providing the handler.
   *
   * See https://reactnative.dev/docs/appstate#addeventlistener
   */ _proto.addEventListener = function addEventListener(type, handler) {
        var emitter = this._emitter;
        if (emitter == null) {
            throw new Error('Cannot use AppState when `isAvailable` is false.');
        }
        switch(type){
            case 'change':
                // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
                var changeHandler = handler;
                return emitter.addListener('appStateDidChange', function(appStateData) {
                    changeHandler(appStateData.app_state);
                });
            case 'memoryWarning':
                // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
                var memoryWarningHandler = handler;
                return emitter.addListener('memoryWarning', memoryWarningHandler);
            case 'blur':
            case 'focus':
                // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
                var focusOrBlurHandler = handler;
                return emitter.addListener('appStateFocusChange', function(hasFocus) {
                    if (type === 'blur' && !hasFocus) {
                        focusOrBlurHandler();
                    }
                    if (type === 'focus' && hasFocus) {
                        focusOrBlurHandler();
                    }
                });
        }
        throw new Error('Trying to subscribe to unknown event: ' + type);
    };
    return AppState;
}();
module.exports = new AppState();


}),
76257: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeModalManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(61215), exports));
var _default = _NativeModalManager.default;


}),
76716: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedValueXY;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95338));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _uniqueId = 1;
var AnimatedValueXY = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedValueXY, AnimatedWithChildren);
    function AnimatedValueXY(valueIn, config) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this;
        var value = valueIn || {
            x: 0,
            y: 0
        }; // @flowfixme: shouldn't need `: any`
        if (typeof value.x === 'number' && typeof value.y === 'number') {
            _this.x = new _AnimatedValue.default(value.x);
            _this.y = new _AnimatedValue.default(value.y);
        } else {
            (0, _invariant.default)(value.x instanceof _AnimatedValue.default && value.y instanceof _AnimatedValue.default, 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');
            _this.x = value.x;
            _this.y = value.y;
        }
        _this._listeners = {};
        if (config && config.useNativeDriver) {
            _this.__makeNative();
        }
        return _this;
    }
    var _proto = AnimatedValueXY.prototype;
    /**
   * Directly set the value. This will stop any animations running on the value
   * and update all the bound properties.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#setvalue
   */ _proto.setValue = function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
    };
    /**
   * Sets an offset that is applied on top of whatever value is set, whether
   * via `setValue`, an animation, or `Animated.event`. Useful for compensating
   * things like the start of a pan gesture.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#setoffset
   */ _proto.setOffset = function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
    };
    /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#flattenoffset
   */ _proto.flattenOffset = function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
    };
    /**
   * Sets the offset value to the base value, and resets the base value to
   * zero. The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#extractoffset
   */ _proto.extractOffset = function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
    };
    _proto.__getValue = function __getValue() {
        return {
            x: this.x.__getValue(),
            y: this.y.__getValue()
        };
    };
    /**
   * Stops any animation and resets the value to its original.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#resetanimation
   */ _proto.resetAnimation = function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
    };
    /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#stopanimation
   */ _proto.stopAnimation = function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
    };
    /**
   * Adds an asynchronous listener to the value so you can observe updates from
   * animations.  This is useful because there is no way to synchronously read
   * the value because it might be driven natively.
   *
   * Returns a string that serves as an identifier for the listener.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#addlistener
   */ _proto.addListener = function addListener(callback) {
        var _this = this;
        var id = String(_uniqueId++);
        var jointCallback = function(param) {
            var number = param.value;
            callback(_this.__getValue());
        };
        this._listeners[id] = {
            x: this.x.addListener(jointCallback),
            y: this.y.addListener(jointCallback)
        };
        return id;
    };
    /**
   * Unregister a listener. The `id` param shall match the identifier
   * previously returned by `addListener()`.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#removelistener
   */ _proto.removeListener = function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
    };
    /**
   * Remove all registered listeners.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#removealllisteners
   */ _proto.removeAllListeners = function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
    };
    /**
   * Converts `{x, y}` into `{left, top}` for use in style.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#getlayout
   */ _proto.getLayout = function getLayout() {
        return {
            left: this.x,
            top: this.y
        };
    };
    /**
   * Converts `{x, y}` into a useable translation transform.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#gettranslatetransform
   */ _proto.getTranslateTransform = function getTranslateTransform() {
        return [
            {
                translateX: this.x
            },
            {
                translateY: this.y
            }
        ];
    };
    _proto.__attach = function __attach() {
        this.x.__addChild(this);
        this.y.__addChild(this);
        AnimatedWithChildren.prototype.__attach.call(this);
    };
    _proto.__detach = function __detach() {
        this.x.__removeChild(this);
        this.y.__removeChild(this);
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__makeNative = function __makeNative(platformConfig) {
        this.x.__makeNative(platformConfig);
        this.y.__makeNative(platformConfig);
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    return AnimatedValueXY;
}(_AnimatedWithChildren.default);


}),
76990: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return usePressability;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85672));
var _react = __webpack_require__(41845);
function usePressability(config) {
    var pressabilityRef = (0, _react.useRef)(null);
    if (config != null && pressabilityRef.current == null) {
        pressabilityRef.current = new _Pressability.default(config);
    }
    var pressability = pressabilityRef.current;
    // On the initial mount, this is a no-op. On updates, `pressability` will be
    // re-configured to use the new configuration.
    (0, _react.useEffect)(function() {
        if (config != null && pressability != null) {
            pressability.configure(config);
        }
    }, [
        config,
        pressability
    ]);
    // On unmount, reset pending state and timers inside `pressability`. This is
    // a separate effect because we do not want to reset when `config` changes.
    (0, _react.useEffect)(function() {
        if (pressability != null) {
            return function() {
                pressability.reset();
            };
        }
    }, [
        pressability
    ]);
    return pressability == null ? null : pressability.getEventHandlers();
}


}),
7730: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return splitLayoutProps;
    }
}));
function splitLayoutProps(props) {
    var outer = null;
    var inner = null;
    if (props != null) {
        // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.
        outer = {};
        // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.
        inner = {};
        for(var _i = 0, _Object_keys = Object.keys(props); _i < _Object_keys.length; _i++){
            var prop = _Object_keys[_i];
            switch(prop){
                case 'margin':
                case 'marginHorizontal':
                case 'marginVertical':
                case 'marginBottom':
                case 'marginTop':
                case 'marginLeft':
                case 'marginRight':
                case 'flex':
                case 'flexGrow':
                case 'flexShrink':
                case 'flexBasis':
                case 'alignSelf':
                case 'height':
                case 'minHeight':
                case 'maxHeight':
                case 'width':
                case 'minWidth':
                case 'maxWidth':
                case 'position':
                case 'left':
                case 'right':
                case 'bottom':
                case 'top':
                case 'transform':
                case 'transformOrigin':
                case 'rowGap':
                case 'columnGap':
                case 'gap':
                    // $FlowFixMe[cannot-write]
                    // $FlowFixMe[incompatible-use]
                    // $FlowFixMe[prop-missing]
                    outer[prop] = props[prop];
                    break;
                default:
                    // $FlowFixMe[cannot-write]
                    // $FlowFixMe[incompatible-use]
                    // $FlowFixMe[prop-missing]
                    inner[prop] = props[prop];
                    break;
            }
        }
    }
    return {
        outer: outer,
        inner: inner
    };
}


}),
7743: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _shouldUseTurboAnimatedModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80731));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var NativeModule = (0, _shouldUseTurboAnimatedModule.default)() ? _TurboModuleRegistry.get('NativeAnimatedTurboModule') : null;
var _default = NativeModule;


}),
78026: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/**
 * Small utility that can be used as an error handler. You cannot just pass
 * `console.error` as a failure callback - it's not properly bound.  If passes an
 * `Error` object, it will print the message and stack.
 */ var logError = function logError() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    if (args.length === 1 && args[0] instanceof Error) {
        var err = args[0];
        console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
        console.error.apply(console, args);
    }
};
module.exports = logError;


}),
78366: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeClipboard = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(47005), exports));
var _default = _NativeClipboard.default;


}),
78876: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeAnimatedModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(72241), exports));
var _default = _NativeAnimatedModule.default;


}),
79039: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.getEnforcing('Vibration');


}),
79155: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get HORIZONTAL () {
        return HORIZONTAL;
    },
    get VERTICAL () {
        return VERTICAL;
    },
    get default () {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(38504);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var ScrollViewContext = /*#__PURE__*/ _react.createContext(null);
if (false) {}
var _default = ScrollViewContext;
var HORIZONTAL = Object.freeze({
    horizontal: true
});
var VERTICAL = Object.freeze({
    horizontal: false
});


}),
79333: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ /* eslint no-bitwise: 0 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedInterpolation;
    }
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _type_of = __webpack_require__(29936);
var _NativeAnimatedValidation = __webpack_require__(41230);
var _normalizeColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89103));
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83900));
var _Easing = /*#__PURE__*/ _interop_require_default._(__webpack_require__(72353));
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
/**
 * Very handy helper to map input ranges to output ranges with an easing
 * function and custom behavior outside of the ranges.
 */ function createNumericInterpolation(config) {
    var outputRange = config.outputRange;
    var inputRange = config.inputRange;
    var easing = config.easing || _Easing.default.linear;
    var extrapolateLeft = 'extend';
    if (config.extrapolateLeft !== undefined) {
        extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
        extrapolateLeft = config.extrapolate;
    }
    var extrapolateRight = 'extend';
    if (config.extrapolateRight !== undefined) {
        extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
        extrapolateRight = config.extrapolate;
    }
    return function(input) {
        (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');
        var range = findRange(input, inputRange);
        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
}
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;
    // Extrapolate
    if (result < inputMin) {
        if (extrapolateLeft === 'identity') {
            return result;
        } else if (extrapolateLeft === 'clamp') {
            result = inputMin;
        } else if (extrapolateLeft === 'extend') {
        // noop
        }
    }
    if (result > inputMax) {
        if (extrapolateRight === 'identity') {
            return result;
        } else if (extrapolateRight === 'clamp') {
            result = inputMax;
        } else if (extrapolateRight === 'extend') {
        // noop
        }
    }
    if (outputMin === outputMax) {
        return outputMin;
    }
    if (inputMin === inputMax) {
        if (input <= inputMin) {
            return outputMin;
        }
        return outputMax;
    }
    // Input Range
    if (inputMin === -Infinity) {
        result = -result;
    } else if (inputMax === Infinity) {
        result = result - inputMin;
    } else {
        result = (result - inputMin) / (inputMax - inputMin);
    }
    // Easing
    result = easing(result);
    // Output Range
    if (outputMin === -Infinity) {
        result = -result;
    } else if (outputMax === Infinity) {
        result = result + outputMin;
    } else {
        result = result * (outputMax - outputMin) + outputMin;
    }
    return result;
}
var numericComponentRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;
// Maps string inputs an RGBA color or an array of numeric components
function mapStringToNumericComponents(input) {
    var normalizedColor = (0, _normalizeColor.default)(input);
    (0, _invariant.default)(normalizedColor == null || (typeof normalizedColor === "undefined" ? "undefined" : _type_of._(normalizedColor)) !== 'object', 'PlatformColors are not supported');
    if (typeof normalizedColor === 'number') {
        normalizedColor = normalizedColor || 0;
        var r = (normalizedColor & 0xff000000) >>> 24;
        var g = (normalizedColor & 0x00ff0000) >>> 16;
        var b = (normalizedColor & 0x0000ff00) >>> 8;
        var a = (normalizedColor & 0x000000ff) / 255;
        return {
            isColor: true,
            components: [
                r,
                g,
                b,
                a
            ]
        };
    } else {
        var components = [];
        var lastMatchEnd = 0;
        var match;
        while((match = numericComponentRegex.exec(input)) != null){
            if (match.index > lastMatchEnd) {
                components.push(input.substring(lastMatchEnd, match.index));
            }
            components.push(parseFloat(match[0]));
            lastMatchEnd = match.index + match[0].length;
        }
        (0, _invariant.default)(components.length > 0, 'outputRange must contain color or value with numeric component');
        if (lastMatchEnd < input.length) {
            components.push(input.substring(lastMatchEnd, input.length));
        }
        return {
            isColor: false,
            components: components
        };
    }
}
/**
 * Supports string shapes by extracting numbers so new values can be computed,
 * and recombines those values into new strings of the same shape.  Supports
 * things like:
 *
 *   rgba(123, 42, 99, 0.36) // colors
 *   -45deg                  // values with units
 */ function createStringInterpolation(config) {
    (0, _invariant.default)(config.outputRange.length >= 2, 'Bad output range');
    var outputRange = config.outputRange.map(mapStringToNumericComponents);
    var isColor = outputRange[0].isColor;
    if (false) { var firstOutput }
    var numericComponents = outputRange.map(function(output) {
        return isColor ? output.components : output.components.filter(function(c) {
            return typeof c === 'number';
        });
    });
    var interpolations = numericComponents[0].map(function(_, i) {
        return createNumericInterpolation(_extends._({}, config, {
            outputRange: numericComponents.map(function(components) {
                return components[i];
            })
        }));
    });
    if (!isColor) {
        return function(input) {
            var values = interpolations.map(function(interpolation) {
                return interpolation(input);
            });
            var i = 0;
            return outputRange[0].components.map(function(c) {
                return typeof c === 'number' ? values[i++] : c;
            }).join('');
        };
    } else {
        return function(input) {
            var result = interpolations.map(function(interpolation, i) {
                var value = interpolation(input);
                // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to
                // round the opacity (4th column).
                return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;
            });
            return "rgba(" + result[0] + ", " + result[1] + ", " + result[2] + ", " + result[3] + ")";
        };
    }
}
function findRange(input, inputRange) {
    var i;
    for(i = 1; i < inputRange.length - 1; ++i){
        if (inputRange[i] >= input) {
            break;
        }
    }
    return i - 1;
}
function checkValidRanges(inputRange, outputRange) {
    checkInfiniteRange('outputRange', outputRange);
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
}
function checkValidInputRange(arr) {
    (0, _invariant.default)(arr.length >= 2, 'inputRange must have at least 2 elements');
    var message = 'inputRange must be monotonically non-decreasing ' + String(arr);
    for(var i = 1; i < arr.length; ++i){
        (0, _invariant.default)(arr[i] >= arr[i - 1], message);
    }
}
function checkInfiniteRange(name, arr) {
    (0, _invariant.default)(arr.length >= 2, name + ' must have at least 2 elements');
    (0, _invariant.default)(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression
     * below this comment, one or both of the operands may be something that
     * doesn't cleanly convert to a string, like undefined, null, and object,
     * etc. If you really mean this implicit string conversion, you can do
     * something like String(myThing) */ // $FlowFixMe[unsafe-addition]
    name + 'cannot be ]-infinity;+infinity[ ' + arr);
}
var AnimatedInterpolation = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedInterpolation, AnimatedWithChildren);
    function AnimatedInterpolation(parent, config) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this;
        _this._parent = parent;
        _this._config = config;
        if (false) {}
        return _this;
    }
    var _proto = AnimatedInterpolation.prototype;
    _proto._getInterpolation = function _getInterpolation() {
        if (!this._interpolation) {
            var config = this._config;
            if (config.outputRange && typeof config.outputRange[0] === 'string') {
                this._interpolation = createStringInterpolation(config);
            } else {
                this._interpolation = createNumericInterpolation(config);
            }
        }
        return this._interpolation;
    };
    _proto.__makeNative = function __makeNative(platformConfig) {
        this._parent.__makeNative(platformConfig);
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getValue = function __getValue() {
        var parentValue = this._parent.__getValue();
        (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._getInterpolation()(parentValue);
    };
    _proto.interpolate = function interpolate(config) {
        return new AnimatedInterpolation(this, config);
    };
    _proto.__attach = function __attach() {
        this._parent.__addChild(this);
    };
    _proto.__detach = function __detach() {
        this._parent.__removeChild(this);
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        if (false) {}
        // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here
        var outputRange = this._config.outputRange;
        var outputType = null;
        if (typeof outputRange[0] === 'string') {
            // $FlowIgnoreMe[incompatible-cast]
            outputRange = outputRange.map(function(value) {
                var processedColor = (0, _processColor.default)(value);
                if (typeof processedColor === 'number') {
                    outputType = 'color';
                    return processedColor;
                } else {
                    return _NativeAnimatedHelper.default.transformDataType(value);
                }
            });
        }
        return {
            inputRange: this._config.inputRange,
            outputRange: outputRange,
            outputType: outputType,
            extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
            extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
            type: 'interpolation'
        };
    };
    return AnimatedInterpolation;
}(_AnimatedWithChildren.default);


}),
79404: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get fromBouncinessAndSpeed () {
        return fromBouncinessAndSpeed;
    },
    get fromOrigamiTensionAndFriction () {
        return fromOrigamiTensionAndFriction;
    }
});
function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
}
function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
}
function fromOrigamiTensionAndFriction(tension, friction) {
    return {
        stiffness: stiffnessFromOrigamiValue(tension),
        damping: dampingFromOrigamiValue(friction)
    };
}
function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
        return (value - startValue) / (endValue - startValue);
    }
    function projectNormal(n, start, end) {
        return start + n * (end - start);
    }
    function linearInterpolation(t, start, end) {
        return t * end + (1 - t) * start;
    }
    function quadraticOutInterpolation(t, start, end) {
        return linearInterpolation(2 * t - t * t, start, end);
    }
    function b3Friction1(x) {
        return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }
    function b3Friction2(x) {
        return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }
    function b3Friction3(x) {
        return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }
    function b3Nobounce(tension) {
        if (tension <= 18) {
            return b3Friction1(tension);
        } else if (tension > 18 && tension <= 44) {
            return b3Friction2(tension);
        } else {
            return b3Friction3(tension);
        }
    }
    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
        stiffness: stiffnessFromOrigamiValue(bouncyTension),
        damping: dampingFromOrigamiValue(bouncyFriction)
    };
}


}),
79532: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _default = {
    unstable_Modal: null
};


}),
80614: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var Settings = {
    get: function(key) {
        console.warn('Settings is not yet supported on this platform.');
        return null;
    },
    set: function(settings) {
        console.warn('Settings is not yet supported on this platform.');
    },
    watchKeys: function(keys, callback) {
        console.warn('Settings is not yet supported on this platform.');
        return -1;
    },
    clearWatch: function(watchId) {
        console.warn('Settings is not yet supported on this platform.');
    }
};
module.exports = Settings;


}),
80644: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get hasComponentStack () {
        return hasComponentStack;
    },
    get parseComponentStack () {
        return parseComponentStack;
    },
    get parseInterpolation () {
        return parseInterpolation;
    },
    get parseLogBoxException () {
        return parseLogBoxException;
    },
    get parseLogBoxLog () {
        return parseLogBoxLog;
    },
    get withoutANSIColorStyles () {
        return withoutANSIColorStyles;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _sliced_to_array = __webpack_require__(21193);
var _to_consumable_array = __webpack_require__(8034);
var _parseErrorStack = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65680));
var _UTFSequence = /*#__PURE__*/ _interop_require_default._(__webpack_require__(30225));
var _stringifySafe = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93435));
var _ansiregex = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19129));
var ANSI_REGEX = (0, _ansiregex.default)().source;
var RE_TRANSFORM_ERROR = /^TransformError /;
var RE_COMPONENT_STACK_LINE = /\n {4}(in|at) /;
var RE_COMPONENT_STACK_LINE_GLOBAL = /\n {4}(in|at) /g;
var RE_COMPONENT_STACK_LINE_OLD = / {4}in/;
var RE_COMPONENT_STACK_LINE_NEW = / {4}at/;
var RE_COMPONENT_STACK_LINE_STACK_FRAME = /@.*\n/;
// "TransformError " (Optional) and either "SyntaxError: " or "ReferenceError: "
// Capturing groups:
// 1: error message
// 2: file path
// 3: line number
// 4: column number
// \n\n
// 5: code frame
var RE_BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \((\d+):(\d+)\)\n\n([\s\S]+)/;
// Capturing groups:
// 1: component name
// "at"
// 2: file path including extension
// 3: line number
var RE_COMPONENT_STACK_WITH_SOURCE = /(.*) \(at (.*\.(?:js|jsx|ts|tsx)):([\d]+)\)/;
// Capturing groups:
// 1: component name
// "at"
// 2: parent component name
var RE_COMPONENT_STACK_NO_SOURCE = /(.*) \(created by .*\)/;
// Capturing groups:
// - non-capturing "TransformError " (optional)
// - non-capturing Error message
// 1: file path
// 2: file name
// 3: error message
// 4: code frame, which includes code snippet indicators or terminal escape sequences for formatting.
var RE_BABEL_CODE_FRAME_ERROR_FORMAT = // eslint-disable-next-line no-control-regex
RegExp("^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)", "u");
// Capturing groups:
// - non-capturing "InternalError Metro has encountered an error:"
// 1: error title
// 2: error message
// 3: file path
// 4: line number
// 5: column number
// 6: code frame, which includes code snippet indicators or terminal escape sequences for formatting.
var RE_METRO_ERROR_FORMAT = RegExp("^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)", "u");
// https://github.com/babel/babel/blob/33dbb85e9e9fe36915273080ecc42aee62ed0ade/packages/babel-code-frame/src/index.ts#L183-L184
var RE_BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp([
    // Beginning of a line (per 'm' flag)
    '^',
    // Optional ANSI escapes for colors
    "(?:" + ANSI_REGEX + ")*",
    // Marker
    '>',
    // Optional ANSI escapes for colors
    "(?:" + ANSI_REGEX + ")*",
    // Left padding for line number
    ' +',
    // Line number
    '[0-9]+',
    // Gutter
    ' \\|'
].join(''), 'm');
function hasComponentStack(args) {
    for(var _i = 0; _i < args.length; _i++){
        var arg = args[_i];
        if (typeof arg === 'string' && isComponentStack(arg)) {
            return true;
        }
    }
    return false;
}
var SUBSTITUTION = _UTFSequence.default.BOM + '%s';
function parseInterpolation(args) {
    var _categoryParts, _contentParts;
    var categoryParts = [];
    var contentParts = [];
    var substitutionOffsets = [];
    var remaining = _to_consumable_array._(args);
    if (typeof remaining[0] === 'string') {
        var formatString = String(remaining.shift());
        var formatStringParts = formatString.split('%s');
        var substitutionCount = formatStringParts.length - 1;
        var substitutions = remaining.splice(0, substitutionCount);
        var categoryString = '';
        var contentString = '';
        var substitutionIndex = 0;
        for(var _i = 0; _i < formatStringParts.length; _i++){
            var formatStringPart = formatStringParts[_i];
            categoryString += formatStringPart;
            contentString += formatStringPart;
            if (substitutionIndex < substitutionCount) {
                if (substitutionIndex < substitutions.length) {
                    // Don't stringify a string type.
                    // It adds quotation mark wrappers around the string,
                    // which causes the LogBox to look odd.
                    var substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : (0, _stringifySafe.default)(substitutions[substitutionIndex]);
                    substitutionOffsets.push({
                        length: substitution.length,
                        offset: contentString.length
                    });
                    categoryString += SUBSTITUTION;
                    contentString += substitution;
                } else {
                    substitutionOffsets.push({
                        length: 2,
                        offset: contentString.length
                    });
                    categoryString += '%s';
                    contentString += '%s';
                }
                substitutionIndex++;
            }
        }
        categoryParts.push(categoryString);
        contentParts.push(contentString);
    }
    var remainingArgs = remaining.map(function(arg) {
        // Don't stringify a string type.
        // It adds quotation mark wrappers around the string,
        // which causes the LogBox to look odd.
        return typeof arg === 'string' ? arg : (0, _stringifySafe.default)(arg);
    });
    (_categoryParts = categoryParts).push.apply(_categoryParts, _to_consumable_array._(remainingArgs));
    (_contentParts = contentParts).push.apply(_contentParts, _to_consumable_array._(remainingArgs));
    return {
        category: categoryParts.join(' '),
        message: {
            content: contentParts.join(' '),
            substitutions: substitutionOffsets
        }
    };
}
function isComponentStack(consoleArgument) {
    var isOldComponentStackFormat = RE_COMPONENT_STACK_LINE_OLD.test(consoleArgument);
    var isNewComponentStackFormat = RE_COMPONENT_STACK_LINE_NEW.test(consoleArgument);
    var isNewJSCComponentStackFormat = RE_COMPONENT_STACK_LINE_STACK_FRAME.test(consoleArgument);
    return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;
}
function parseComponentStack(message) {
    // In newer versions of React, the component stack is formatted as a call stack frame.
    // First try to parse the component stack as a call stack frame, and if that doesn't
    // work then we'll fallback to the old custom component stack format parsing.
    var stack = (0, _parseErrorStack.default)(message);
    if (stack && stack.length > 0) {
        return {
            type: 'stack',
            stack: stack.map(function(frame) {
                return {
                    content: frame.methodName,
                    collapse: frame.collapse || false,
                    fileName: frame.file == null ? 'unknown' : frame.file,
                    location: {
                        column: frame.column == null ? -1 : frame.column,
                        row: frame.lineNumber == null ? -1 : frame.lineNumber
                    }
                };
            })
        };
    }
    var legacyStack = message.split(RE_COMPONENT_STACK_LINE_GLOBAL).map(function(s) {
        if (!s) {
            return null;
        }
        var match = s.match(RE_COMPONENT_STACK_WITH_SOURCE);
        if (match) {
            var _match_slice = _sliced_to_array._(match.slice(1), 3), content = _match_slice[0], fileName = _match_slice[1], row = _match_slice[2];
            return {
                content: content,
                fileName: fileName,
                location: {
                    column: -1,
                    row: parseInt(row, 10)
                }
            };
        }
        // In some cases, the component stack doesn't have a source.
        var matchWithoutSource = s.match(RE_COMPONENT_STACK_NO_SOURCE);
        if (matchWithoutSource) {
            return {
                content: matchWithoutSource[1],
                fileName: '',
                location: null
            };
        }
        return null;
    }).filter(Boolean);
    return {
        type: 'legacy',
        stack: legacyStack
    };
}
function parseLogBoxException(error) {
    var message = error.originalMessage != null ? error.originalMessage : 'Unknown';
    var metroInternalError = message.match(RE_METRO_ERROR_FORMAT);
    if (metroInternalError) {
        var _metroInternalError_slice = _sliced_to_array._(metroInternalError.slice(1), 5), content = _metroInternalError_slice[0], fileName = _metroInternalError_slice[1], row = _metroInternalError_slice[2], column = _metroInternalError_slice[3], codeFrame = _metroInternalError_slice[4];
        return {
            level: 'fatal',
            type: 'Metro Error',
            stack: [],
            isComponentError: false,
            componentStackType: 'legacy',
            componentStack: [],
            codeFrame: {
                fileName: fileName,
                location: {
                    row: parseInt(row, 10),
                    column: parseInt(column, 10)
                },
                content: codeFrame
            },
            message: {
                content: content,
                substitutions: []
            },
            category: fileName + "-" + row + "-" + column,
            extraData: error.extraData
        };
    }
    var babelTransformError = message.match(RE_BABEL_TRANSFORM_ERROR_FORMAT);
    if (babelTransformError) {
        // Transform errors are thrown from inside the Babel transformer.
        var _babelTransformError_slice = _sliced_to_array._(babelTransformError.slice(1), 5), fileName1 = _babelTransformError_slice[0], content1 = _babelTransformError_slice[1], row1 = _babelTransformError_slice[2], column1 = _babelTransformError_slice[3], codeFrame1 = _babelTransformError_slice[4];
        return {
            level: 'syntax',
            stack: [],
            isComponentError: false,
            componentStackType: 'legacy',
            componentStack: [],
            codeFrame: {
                fileName: fileName1,
                location: {
                    row: parseInt(row1, 10),
                    column: parseInt(column1, 10)
                },
                content: codeFrame1
            },
            message: {
                content: content1,
                substitutions: []
            },
            category: fileName1 + "-" + row1 + "-" + column1,
            extraData: error.extraData
        };
    }
    // Perform a cheap match first before trying to parse the full message, which
    // can get expensive for arbitrary input.
    if (RE_BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {
        var babelCodeFrameError = message.match(RE_BABEL_CODE_FRAME_ERROR_FORMAT);
        if (babelCodeFrameError) {
            // Codeframe errors are thrown from any use of buildCodeFrameError.
            var _babelCodeFrameError_slice = _sliced_to_array._(babelCodeFrameError.slice(1), 3), fileName2 = _babelCodeFrameError_slice[0], content2 = _babelCodeFrameError_slice[1], codeFrame2 = _babelCodeFrameError_slice[2];
            return {
                level: 'syntax',
                stack: [],
                isComponentError: false,
                componentStackType: 'legacy',
                componentStack: [],
                codeFrame: {
                    fileName: fileName2,
                    location: null,
                    content: codeFrame2
                },
                message: {
                    content: content2,
                    substitutions: []
                },
                category: "" + fileName2 + "-" + 1 + "-" + 1,
                extraData: error.extraData
            };
        }
    }
    if (message.match(RE_TRANSFORM_ERROR)) {
        return {
            level: 'syntax',
            stack: error.stack,
            isComponentError: error.isComponentError,
            componentStackType: 'legacy',
            componentStack: [],
            message: {
                content: message,
                substitutions: []
            },
            category: message,
            extraData: error.extraData
        };
    }
    var componentStack = error.componentStack;
    if (error.isFatal || error.isComponentError) {
        if (componentStack != null) {
            var _parseComponentStack = parseComponentStack(componentStack), type = _parseComponentStack.type, stack = _parseComponentStack.stack;
            return _extends._({
                level: 'fatal',
                stack: error.stack,
                isComponentError: error.isComponentError,
                componentStackType: type,
                componentStack: stack,
                extraData: error.extraData
            }, parseInterpolation([
                message
            ]));
        } else {
            return _extends._({
                level: 'fatal',
                stack: error.stack,
                isComponentError: error.isComponentError,
                componentStackType: 'legacy',
                componentStack: [],
                extraData: error.extraData
            }, parseInterpolation([
                message
            ]));
        }
    }
    if (componentStack != null) {
        // It is possible that console errors have a componentStack.
        var _parseComponentStack1 = parseComponentStack(componentStack), type1 = _parseComponentStack1.type, stack1 = _parseComponentStack1.stack;
        return _extends._({
            level: 'error',
            stack: error.stack,
            isComponentError: error.isComponentError,
            componentStackType: type1,
            componentStack: stack1,
            extraData: error.extraData
        }, parseInterpolation([
            message
        ]));
    }
    // Most `console.error` calls won't have a componentStack. We parse them like
    // regular logs which have the component stack buried in the message.
    return _extends._({
        level: 'error',
        stack: error.stack,
        isComponentError: error.isComponentError,
        extraData: error.extraData
    }, parseLogBoxLog([
        message
    ]));
}
function withoutANSIColorStyles(message) {
    if (typeof message !== 'string') {
        return message;
    }
    return message.replace(// eslint-disable-next-line no-control-regex
    /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
}
function parseLogBoxLog(args) {
    var message = withoutANSIColorStyles(args[0]);
    var argsWithoutComponentStack = [];
    var componentStack = [];
    var componentStackType = 'legacy';
    // Extract component stack from warnings like "Some warning%s".
    if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {
        var lastArg = args[args.length - 1];
        if (typeof lastArg === 'string' && isComponentStack(lastArg)) {
            argsWithoutComponentStack = args.slice(0, -1);
            argsWithoutComponentStack[0] = message.slice(0, -2);
            var _parseComponentStack = parseComponentStack(lastArg), type = _parseComponentStack.type, stack = _parseComponentStack.stack;
            componentStack = stack;
            componentStackType = type;
        }
    }
    if (componentStack.length === 0 && argsWithoutComponentStack.length === 0) {
        // Try finding the component stack elsewhere.
        for(var _i = 0; _i < args.length; _i++){
            var arg = args[_i];
            if (typeof arg === 'string' && isComponentStack(arg)) {
                // Strip out any messages before the component stack.
                var messageEndIndex = arg.search(RE_COMPONENT_STACK_LINE);
                if (messageEndIndex < 0) {
                    // Handle JSC component stacks.
                    messageEndIndex = arg.search(/\n/);
                }
                if (messageEndIndex > 0) {
                    argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));
                }
                var _parseComponentStack1 = parseComponentStack(arg), type1 = _parseComponentStack1.type, stack1 = _parseComponentStack1.stack;
                componentStack = stack1;
                componentStackType = type1;
            } else {
                argsWithoutComponentStack.push(arg);
            }
        }
    }
    return _extends._({}, parseInterpolation(argsWithoutComponentStack), {
        componentStack: componentStack,
        componentStackType: componentStackType
    });
}


}),
80695: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85672));
var _PressabilityDebug = __webpack_require__(9966);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * A wrapper for making views respond properly to touches.
 * On press down, the opacity of the wrapped view is decreased, which allows
 * the underlay color to show through, darkening or tinting the view.
 *
 * The underlay comes from wrapping the child in a new View, which can affect
 * layout, and sometimes cause unwanted visual artifacts if not used correctly,
 * for example if the backgroundColor of the wrapped view isn't explicitly set
 * to an opaque color.
 *
 * TouchableHighlight must have one child (not zero or more than one).
 * If you wish to have several child components, wrap them in a View.
 *
 * Example:
 *
 * ```
 * renderButton: function() {
 *   return (
 *     <TouchableHighlight onPress={this._onPressButton}>
 *       <Image
 *         style={styles.button}
 *         source={require('./myButton.png')}
 *       />
 *     </TouchableHighlight>
 *   );
 * },
 * ```
 *
 *
 * ### Example
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react'
 * import {
 *   AppRegistry,
 *   StyleSheet,
 *   TouchableHighlight,
 *   Text,
 *   View,
 * } from 'react-native'
 *
 * class App extends Component {
 *   constructor(props) {
 *     super(props)
 *     this.state = { count: 0 }
 *   }
 *
 *   onPress = () => {
 *     this.setState({
 *       count: this.state.count+1
 *     })
 *   }
 *
 *  render() {
 *     return (
 *       <View style={styles.container}>
 *         <TouchableHighlight
 *          style={styles.button}
 *          onPress={this.onPress}
 *         >
 *          <Text> Touch Here </Text>
 *         </TouchableHighlight>
 *         <View style={[styles.countContainer]}>
 *           <Text style={[styles.countText]}>
 *             { this.state.count !== 0 ? this.state.count: null}
 *           </Text>
 *         </View>
 *       </View>
 *     )
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     justifyContent: 'center',
 *     paddingHorizontal: 10
 *   },
 *   button: {
 *     alignItems: 'center',
 *     backgroundColor: '#DDDDDD',
 *     padding: 10
 *   },
 *   countContainer: {
 *     alignItems: 'center',
 *     padding: 10
 *   },
 *   countText: {
 *     color: '#FF00FF'
 *   }
 * })
 *
 * AppRegistry.registerComponent('App', () => App)
 * ```
 *
 */ var TouchableHighlight = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(TouchableHighlight, _React_Component);
    function TouchableHighlight() {
        var _this;
        _this = _React_Component.apply(this, arguments) || this, _this._isMounted = false, _this.state = {
            pressability: new _Pressability.default(_this._createPressabilityConfig()),
            extraStyles: _this.props.testOnly_pressed === true ? _this._createExtraStyles() : null
        };
        return _this;
    }
    var _proto = TouchableHighlight.prototype;
    _proto._createPressabilityConfig = function _createPressabilityConfig() {
        var _this = this;
        var _this_props_accessibilityState;
        return {
            cancelable: !this.props.rejectResponderTermination,
            disabled: this.props.disabled != null ? this.props.disabled : (_this_props_accessibilityState = this.props.accessibilityState) == null ? void 0 : _this_props_accessibilityState.disabled,
            hitSlop: this.props.hitSlop,
            delayLongPress: this.props.delayLongPress,
            delayPressIn: this.props.delayPressIn,
            delayPressOut: this.props.delayPressOut,
            minPressDuration: 0,
            pressRectOffset: this.props.pressRetentionOffset,
            android_disableSound: this.props.touchSoundDisabled,
            onBlur: function(event) {
                if (_Platform.default.isTV) {
                    _this._hideUnderlay();
                }
                if (_this.props.onBlur != null) {
                    _this.props.onBlur(event);
                }
            },
            onFocus: function(event) {
                if (_Platform.default.isTV) {
                    _this._showUnderlay();
                }
                if (_this.props.onFocus != null) {
                    _this.props.onFocus(event);
                }
            },
            onLongPress: this.props.onLongPress,
            onPress: function(event) {
                if (_this._hideTimeout != null) {
                    clearTimeout(_this._hideTimeout);
                }
                if (!_Platform.default.isTV) {
                    _this._showUnderlay();
                    var _this_props_delayPressOut;
                    _this._hideTimeout = setTimeout(function() {
                        _this._hideUnderlay();
                    }, (_this_props_delayPressOut = _this.props.delayPressOut) != null ? _this_props_delayPressOut : 0);
                }
                if (_this.props.onPress != null) {
                    _this.props.onPress(event);
                }
            },
            onPressIn: function(event) {
                if (_this._hideTimeout != null) {
                    clearTimeout(_this._hideTimeout);
                    _this._hideTimeout = null;
                }
                _this._showUnderlay();
                if (_this.props.onPressIn != null) {
                    _this.props.onPressIn(event);
                }
            },
            onPressOut: function(event) {
                if (_this._hideTimeout == null) {
                    _this._hideUnderlay();
                }
                if (_this.props.onPressOut != null) {
                    _this.props.onPressOut(event);
                }
            }
        };
    };
    _proto._createExtraStyles = function _createExtraStyles() {
        var _this_props_activeOpacity;
        return {
            child: {
                opacity: (_this_props_activeOpacity = this.props.activeOpacity) != null ? _this_props_activeOpacity : 0.85
            },
            underlay: {
                backgroundColor: this.props.underlayColor === undefined ? 'black' : this.props.underlayColor
            }
        };
    };
    _proto._showUnderlay = function _showUnderlay() {
        if (!this._isMounted || !this._hasPressHandler()) {
            return;
        }
        this.setState({
            extraStyles: this._createExtraStyles()
        });
        if (this.props.onShowUnderlay != null) {
            this.props.onShowUnderlay();
        }
    };
    _proto._hideUnderlay = function _hideUnderlay() {
        if (this._hideTimeout != null) {
            clearTimeout(this._hideTimeout);
            this._hideTimeout = null;
        }
        if (this.props.testOnly_pressed === true) {
            return;
        }
        if (this._hasPressHandler()) {
            this.setState({
                extraStyles: null
            });
            if (this.props.onHideUnderlay != null) {
                this.props.onHideUnderlay();
            }
        }
    };
    _proto._hasPressHandler = function _hasPressHandler() {
        return this.props.onPress != null || this.props.onPressIn != null || this.props.onPressOut != null || this.props.onLongPress != null;
    };
    _proto.render = function render() {
        var _this_props_accessibilityValue, _this_props_accessibilityValue1, _this_props_accessibilityValue2, _this_props_accessibilityValue3, _this_state_extraStyles, _this_state_extraStyles1;
        var child = _react.Children.only(this.props.children);
        // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
        // adopting `Pressability`, so preserve that behavior.
        var _this_state_pressability_getEventHandlers = this.state.pressability.getEventHandlers(), onBlur = _this_state_pressability_getEventHandlers.onBlur, onFocus = _this_state_pressability_getEventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties_loose._(_this_state_pressability_getEventHandlers, [
            "onBlur",
            "onFocus"
        ]);
        var accessibilityState = this.props.disabled != null ? _extends._({}, this.props.accessibilityState, {
            disabled: this.props.disabled
        }) : this.props.accessibilityState;
        var _this_props_ariavaluemax, _this_props_ariavaluemin, _this_props_ariavaluenow, _this_props_ariavaluetext;
        var accessibilityValue = {
            max: (_this_props_ariavaluemax = this.props['aria-valuemax']) != null ? _this_props_ariavaluemax : (_this_props_accessibilityValue = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue.max,
            min: (_this_props_ariavaluemin = this.props['aria-valuemin']) != null ? _this_props_ariavaluemin : (_this_props_accessibilityValue1 = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue1.min,
            now: (_this_props_ariavaluenow = this.props['aria-valuenow']) != null ? _this_props_ariavaluenow : (_this_props_accessibilityValue2 = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue2.now,
            text: (_this_props_ariavaluetext = this.props['aria-valuetext']) != null ? _this_props_ariavaluetext : (_this_props_accessibilityValue3 = this.props.accessibilityValue) == null ? void 0 : _this_props_accessibilityValue3.text
        };
        var _this_props_arialive;
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : (_this_props_arialive = this.props['aria-live']) != null ? _this_props_arialive : this.props.accessibilityLiveRegion;
        var _this_props_arialabel;
        var accessibilityLabel = (_this_props_arialabel = this.props['aria-label']) != null ? _this_props_arialabel : this.props.accessibilityLabel;
        var _this_props_ariamodal, _this_props_ariahidden, _this_props_id;
        return /*#__PURE__*/ _react.createElement(_View.default, _extends._({
            accessible: this.props.accessible !== false,
            accessibilityLabel: accessibilityLabel,
            accessibilityHint: this.props.accessibilityHint,
            accessibilityLanguage: this.props.accessibilityLanguage,
            accessibilityRole: this.props.accessibilityRole,
            accessibilityState: accessibilityState,
            accessibilityValue: accessibilityValue,
            accessibilityActions: this.props.accessibilityActions,
            onAccessibilityAction: this.props.onAccessibilityAction,
            importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
            accessibilityViewIsModal: (_this_props_ariamodal = this.props['aria-modal']) != null ? _this_props_ariamodal : this.props.accessibilityViewIsModal,
            accessibilityLiveRegion: accessibilityLiveRegion,
            accessibilityElementsHidden: (_this_props_ariahidden = this.props['aria-hidden']) != null ? _this_props_ariahidden : this.props.accessibilityElementsHidden,
            style: _StyleSheet.default.compose(this.props.style, (_this_state_extraStyles = this.state.extraStyles) == null ? void 0 : _this_state_extraStyles.underlay),
            onLayout: this.props.onLayout,
            hitSlop: this.props.hitSlop,
            hasTVPreferredFocus: this.props.hasTVPreferredFocus,
            nextFocusDown: this.props.nextFocusDown,
            nextFocusForward: this.props.nextFocusForward,
            nextFocusLeft: this.props.nextFocusLeft,
            nextFocusRight: this.props.nextFocusRight,
            nextFocusUp: this.props.nextFocusUp,
            focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
            nativeID: (_this_props_id = this.props.id) != null ? _this_props_id : this.props.nativeID,
            testID: this.props.testID,
            ref: this.props.hostRef
        }, eventHandlersWithoutBlurAndFocus), /*#__PURE__*/ _react.cloneElement(child, {
            style: _StyleSheet.default.compose(child.props.style, (_this_state_extraStyles1 = this.state.extraStyles) == null ? void 0 : _this_state_extraStyles1.child)
        }),  false ? /*#__PURE__*/ 0 : null);
    };
    _proto.componentDidMount = function componentDidMount() {
        this._isMounted = true;
        this.state.pressability.configure(this._createPressabilityConfig());
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this._isMounted = false;
        if (this._hideTimeout != null) {
            clearTimeout(this._hideTimeout);
        }
        this.state.pressability.reset();
    };
    return TouchableHighlight;
}(_react.Component);
var Touchable = /*#__PURE__*/ _react.forwardRef(function(props, hostRef) {
    return /*#__PURE__*/ _react.createElement(TouchableHighlight, _extends._({}, props, {
        hostRef: hostRef
    }));
});
Touchable.displayName = 'TouchableHighlight';
module.exports = Touchable;


}),
80731: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
function shouldUseTurboAnimatedModule() {
    return _Platform.default.OS === 'ios' && __webpack_require__.g.RN$Bridgeless === true;
}
var _default = shouldUseTurboAnimatedModule;


}),
80784: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34703));
module.exports = _NativeDeviceInfo.default;


}),
81470: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var InteractionManager = __webpack_require__(46846);
var TouchHistoryMath = __webpack_require__(83150);
var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX = TouchHistoryMath.currentCentroidX;
var currentCentroidY = TouchHistoryMath.currentCentroidY;
/**
 * `PanResponder` reconciles several touches into a single gesture. It makes
 * single-touch gestures resilient to extra touches, and can be used to
 * recognize simple multi-touch gestures.
 *
 * By default, `PanResponder` holds an `InteractionManager` handle to block
 * long-running JS events from interrupting active gestures.
 *
 * It provides a predictable wrapper of the responder handlers provided by the
 * [gesture responder system](docs/gesture-responder-system.html).
 * For each handler, it provides a new `gestureState` object alongside the
 * native event object:
 *
 * ```
 * onPanResponderMove: (event, gestureState) => {}
 * ```
 *
 * A native event is a synthetic touch event with the following form:
 *
 *  - `nativeEvent`
 *      + `changedTouches` - Array of all touch events that have changed since the last event
 *      + `identifier` - The ID of the touch
 *      + `locationX` - The X position of the touch, relative to the element
 *      + `locationY` - The Y position of the touch, relative to the element
 *      + `pageX` - The X position of the touch, relative to the root element
 *      + `pageY` - The Y position of the touch, relative to the root element
 *      + `target` - The node id of the element receiving the touch event
 *      + `timestamp` - A time identifier for the touch, useful for velocity calculation
 *      + `touches` - Array of all current touches on the screen
 *
 * A `gestureState` object has the following:
 *
 *  - `stateID` - ID of the gestureState- persisted as long as there at least
 *     one touch on screen
 *  - `moveX` - the latest screen coordinates of the recently-moved touch
 *  - `moveY` - the latest screen coordinates of the recently-moved touch
 *  - `x0` - the screen coordinates of the responder grant
 *  - `y0` - the screen coordinates of the responder grant
 *  - `dx` - accumulated distance of the gesture since the touch started
 *  - `dy` - accumulated distance of the gesture since the touch started
 *  - `vx` - current velocity of the gesture
 *  - `vy` - current velocity of the gesture
 *  - `numberActiveTouches` - Number of touches currently on screen
 *
 * ### Basic Usage
 *
 * ```
 *   componentWillMount: function() {
 *     this._panResponder = PanResponder.create({
 *       // Ask to be the responder:
 *       onStartShouldSetPanResponder: (evt, gestureState) => true,
 *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,
 *       onMoveShouldSetPanResponder: (evt, gestureState) => true,
 *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,
 *
 *       onPanResponderGrant: (evt, gestureState) => {
 *         // The gesture has started. Show visual feedback so the user knows
 *         // what is happening!
 *
 *         // gestureState.d{x,y} will be set to zero now
 *       },
 *       onPanResponderMove: (evt, gestureState) => {
 *         // The most recent move distance is gestureState.move{X,Y}
 *
 *         // The accumulated gesture distance since becoming responder is
 *         // gestureState.d{x,y}
 *       },
 *       onPanResponderTerminationRequest: (evt, gestureState) => true,
 *       onPanResponderRelease: (evt, gestureState) => {
 *         // The user has released all touches while this view is the
 *         // responder. This typically means a gesture has succeeded
 *       },
 *       onPanResponderTerminate: (evt, gestureState) => {
 *         // Another component has become the responder, so this gesture
 *         // should be cancelled
 *       },
 *       onShouldBlockNativeResponder: (evt, gestureState) => {
 *         // Returns whether this component should block native components from becoming the JS
 *         // responder. Returns true by default. Is currently only supported on android.
 *         return true;
 *       },
 *     });
 *   },
 *
 *   render: function() {
 *     return (
 *       <View {...this._panResponder.panHandlers} />
 *     );
 *   },
 *
 * ```
 *
 * ### Working Example
 *
 * To see it in action, try the
 * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/HEAD/packages/rn-tester/js/examples/PanResponder/PanResponderExample.js)
 */ var PanResponder = {
    /**
   *
   * A graphical explanation of the touch data flow:
   *
   * +----------------------------+             +--------------------------------+
   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |
   * +----------------------------+             +----------+---------------------+
   * |Global store of touchHistory|             |Allocation-less math util       |
   * |including activeness, start |             |on touch history (centroids     |
   * |position, prev/cur position.|             |and multitouch movement etc)    |
   * |                            |             |                                |
   * +----^-----------------------+             +----^---------------------------+
   *      |                                          |
   *      | (records relevant history                |
   *      |  of touches relevant for                 |
   *      |  implementing higher level               |
   *      |  gestures)                               |
   *      |                                          |
   * +----+-----------------------+             +----|---------------------------+
   * | ResponderEventPlugin       |             |    |   Your App/Component      |
   * +----------------------------+             +----|---------------------------+
   * |Negotiates which view gets  | Low level   |    |             High level    |
   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |
   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |
   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|
   * +----------------------------+ attached to |  |         |     distance and  |
   *                                 each event |  +---------+     velocity.     |
   *                                            |                                |
   *                                            |                                |
   *                                            +--------------------------------+
   *
   *
   *
   * Gesture that calculates cumulative movement over time in a way that just
   * "does the right thing" for multiple touches. The "right thing" is very
   * nuanced. When moving two touches in opposite directions, the cumulative
   * distance is zero in each dimension. When two touches move in parallel five
   * pixels in the same direction, the cumulative distance is five, not ten. If
   * two touches start, one moves five in a direction, then stops and the other
   * touch moves fives in the same direction, the cumulative distance is ten.
   *
   * This logic requires a kind of processing of time "clusters" of touch events
   * so that two touch moves that essentially occur in parallel but move every
   * other frame respectively, are considered part of the same movement.
   *
   * Explanation of some of the non-obvious fields:
   *
   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is
   *   invalid. If a move event has been observed, `(moveX, moveY)` is the
   *   centroid of the most recently moved "cluster" of active touches.
   *   (Currently all move have the same timeStamp, but later we should add some
   *   threshold for what is considered to be "moving"). If a palm is
   *   accidentally counted as a touch, but a finger is moving greatly, the palm
   *   will move slightly, but we only want to count the single moving touch.
   * - x0/y0: Centroid location (non-cumulative) at the time of becoming
   *   responder.
   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch
   *   distance. Accounts for touch moves that are clustered together in time,
   *   moving the same direction. Only valid when currently responder (otherwise,
   *   it only represents the drag distance below the threshold).
   * - vx/vy: Velocity.
   */ _initializeGestureState: function(gestureState) {
        gestureState.moveX = 0;
        gestureState.moveY = 0;
        gestureState.x0 = 0;
        gestureState.y0 = 0;
        gestureState.dx = 0;
        gestureState.dy = 0;
        gestureState.vx = 0;
        gestureState.vy = 0;
        gestureState.numberActiveTouches = 0;
        // All `gestureState` accounts for timeStamps up until:
        gestureState._accountsForMovesUpTo = 0;
    },
    /**
   * This is nuanced and is necessary. It is incorrect to continuously take all
   * active *and* recently moved touches, find the centroid, and track how that
   * result changes over time. Instead, we must take all recently moved
   * touches, and calculate how the centroid has changed just for those
   * recently moved touches, and append that change to an accumulator. This is
   * to (at least) handle the case where the user is moving three fingers, and
   * then one of the fingers stops but the other two continue.
   *
   * This is very different than taking all of the recently moved touches and
   * storing their centroid as `dx/dy`. For correctness, we must *accumulate
   * changes* in the centroid of recently moved touches.
   *
   * There is also some nuance with how we handle multiple moved touches in a
   * single event. With the way `ReactNativeEventEmitter` dispatches touches as
   * individual events, multiple touches generate two 'move' events, each of
   * them triggering `onResponderMove`. But with the way `PanResponder` works,
   * all of the gesture inference is performed on the first dispatch, since it
   * looks at all of the touches (even the ones for which there hasn't been a
   * native dispatch yet). Therefore, `PanResponder` does not call
   * `onResponderMove` passed the first dispatch. This diverges from the
   * typical responder callback pattern (without using `PanResponder`), but
   * avoids more dispatches than necessary.
   */ _updateGestureStateOnMove: function(gestureState, touchHistory) {
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
        gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
        var movedAfter = gestureState._accountsForMovesUpTo;
        var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
        var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
        var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
        var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
        var nextDX = gestureState.dx + (x - prevX);
        var nextDY = gestureState.dy + (y - prevY);
        // TODO: This must be filtered intelligently.
        var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
        gestureState.vx = (nextDX - gestureState.dx) / dt;
        gestureState.vy = (nextDY - gestureState.dy) / dt;
        gestureState.dx = nextDX;
        gestureState.dy = nextDY;
        gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    /**
   * @param {object} config Enhanced versions of all of the responder callbacks
   * that provide not only the typical `ResponderSyntheticEvent`, but also the
   * `PanResponder` gesture state.  Simply replace the word `Responder` with
   * `PanResponder` in each of the typical `onResponder*` callbacks. For
   * example, the `config` object would look like:
   *
   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`
   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`
   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`
   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`
   *  - `onPanResponderReject: (e, gestureState) => {...}`
   *  - `onPanResponderGrant: (e, gestureState) => {...}`
   *  - `onPanResponderStart: (e, gestureState) => {...}`
   *  - `onPanResponderEnd: (e, gestureState) => {...}`
   *  - `onPanResponderRelease: (e, gestureState) => {...}`
   *  - `onPanResponderMove: (e, gestureState) => {...}`
   *  - `onPanResponderTerminate: (e, gestureState) => {...}`
   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`
   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`
   *
   *  In general, for events that have capture equivalents, we update the
   *  gestureState once in the capture phase and can use it in the bubble phase
   *  as well.
   *
   *  Be careful with onStartShould* callbacks. They only reflect updated
   *  `gestureState` for start/end events that bubble/capture to the Node.
   *  Once the node is the responder, you can rely on every start/end event
   *  being processed by the gesture and `gestureState` being updated
   *  accordingly. (numberActiveTouches) may not be totally accurate unless you
   *  are the responder.
   */ create: function(config) {
        var interactionState = {
            handle: null
        };
        var gestureState = {
            // Useful for debugging
            stateID: Math.random(),
            moveX: 0,
            moveY: 0,
            x0: 0,
            y0: 0,
            dx: 0,
            dy: 0,
            vx: 0,
            vy: 0,
            numberActiveTouches: 0,
            _accountsForMovesUpTo: 0
        };
        var panHandlers = {
            onStartShouldSetResponder: function(event) {
                return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);
            },
            onMoveShouldSetResponder: function(event) {
                return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);
            },
            onStartShouldSetResponderCapture: function(event) {
                // TODO: Actually, we should reinitialize the state any time
                // touches.length increases from 0 active to > 0 active.
                if (event.nativeEvent.touches.length === 1) {
                    PanResponder._initializeGestureState(gestureState);
                }
                gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;
                return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;
            },
            onMoveShouldSetResponderCapture: function(event) {
                var touchHistory = event.touchHistory;
                // Responder system incorrectly dispatches should* to current responder
                // Filter out any touch moves past the first one - we would have
                // already processed multi-touch geometry during the first event.
                if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
                    return false;
                }
                PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
                return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;
            },
            onResponderGrant: function(event) {
                if (!interactionState.handle) {
                    interactionState.handle = InteractionManager.createInteractionHandle();
                }
                gestureState.x0 = currentCentroidX(event.touchHistory);
                gestureState.y0 = currentCentroidY(event.touchHistory);
                gestureState.dx = 0;
                gestureState.dy = 0;
                if (config.onPanResponderGrant) {
                    config.onPanResponderGrant(event, gestureState);
                }
                // TODO: t7467124 investigate if this can be removed
                return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);
            },
            onResponderReject: function(event) {
                clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);
            },
            onResponderRelease: function(event) {
                clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);
                PanResponder._initializeGestureState(gestureState);
            },
            onResponderStart: function(event) {
                var touchHistory = event.touchHistory;
                gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
                if (config.onPanResponderStart) {
                    config.onPanResponderStart(event, gestureState);
                }
            },
            onResponderMove: function(event) {
                var touchHistory = event.touchHistory;
                // Guard against the dispatch of two touch moves when there are two
                // simultaneously changed touches.
                if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
                    return;
                }
                // Filter out any touch moves past the first one - we would have
                // already processed multi-touch geometry during the first event.
                PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
                if (config.onPanResponderMove) {
                    config.onPanResponderMove(event, gestureState);
                }
            },
            onResponderEnd: function(event) {
                var touchHistory = event.touchHistory;
                gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
                clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);
            },
            onResponderTerminate: function(event) {
                clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);
                PanResponder._initializeGestureState(gestureState);
            },
            onResponderTerminationRequest: function(event) {
                return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);
            }
        };
        return {
            panHandlers: panHandlers,
            getInteractionHandle: function() {
                return interactionState.handle;
            }
        };
    }
};
function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
        InteractionManager.clearInteractionHandle(interactionState.handle);
        interactionState.handle = null;
    }
    if (callback) {
        callback(event, gestureState);
    }
}
var _default = PanResponder;


}),
81927: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _ProgressBarAndroidNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(6307), exports));
var _default = _ProgressBarAndroidNativeComponent.default;


}),
81991: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeKeyboardObserver = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(10156), exports));
var _default = _NativeKeyboardObserver.default;


}),
82316: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativePermissionsAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(49243), exports));
var _default = _NativePermissionsAndroid.default;


}),
82523: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _sliced_to_array = __webpack_require__(21193);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(26044));
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76990));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79250));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18504));
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85511));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13493));
var _TextInputState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(72810));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89169));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var AndroidTextInput;
var AndroidTextInputCommands;
var RCTSinglelineTextInputView;
var RCTSinglelineTextInputNativeCommands;
var RCTMultilineTextInputView;
var RCTMultilineTextInputNativeCommands;
if (_Platform.default.OS === 'android') {
    AndroidTextInput = (__webpack_require__(8833)/* ["default"] */["default"]);
    AndroidTextInputCommands = (__webpack_require__(8833)/* .Commands */.Commands);
} else if (_Platform.default.OS === 'ios') {
    RCTSinglelineTextInputView = (__webpack_require__(37862)/* ["default"] */["default"]);
    RCTSinglelineTextInputNativeCommands = (__webpack_require__(37862)/* .Commands */.Commands);
    RCTMultilineTextInputView = (__webpack_require__(39130)/* ["default"] */["default"]);
    RCTMultilineTextInputNativeCommands = (__webpack_require__(39130)/* .Commands */.Commands);
}
var emptyFunctionThatReturnsTrue = function() {
    return true;
};
/**
 * This hook handles the synchronization between the state of the text input
 * in native and in JavaScript. This is necessary due to the asynchronous nature
 * of text input events.
 */ function useTextInputStateSynchronization_STATE(param) {
    var props = param.props, mostRecentEventCount = param.mostRecentEventCount, selection = param.selection, inputRef = param.inputRef, text = param.text, viewCommands = param.viewCommands;
    var _useState = _sliced_to_array._((0, _react.useState)(props.value), 2), lastNativeText = _useState[0], setLastNativeText = _useState[1];
    var _useState1 = _sliced_to_array._((0, _react.useState)({
        selection: {
            start: -1,
            end: -1
        },
        mostRecentEventCount: mostRecentEventCount
    }), 2), lastNativeSelectionState = _useState1[0], setLastNativeSelection = _useState1[1];
    var lastNativeSelection = lastNativeSelectionState.selection;
    // This is necessary in case native updates the text and JS decides
    // that the update should be ignored and we should stick with the value
    // that we have in JS.
    (0, _react.useLayoutEffect)(function() {
        var nativeUpdate = {};
        if (lastNativeText !== props.value && typeof props.value === 'string') {
            nativeUpdate.text = props.value;
            setLastNativeText(props.value);
        }
        if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
            nativeUpdate.selection = selection;
            setLastNativeSelection({
                selection: selection,
                mostRecentEventCount: mostRecentEventCount
            });
        }
        if (Object.keys(nativeUpdate).length === 0) {
            return;
        }
        if (inputRef.current != null) {
            var _selection_start, _selection_end;
            viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (_selection_start = selection == null ? void 0 : selection.start) != null ? _selection_start : -1, (_selection_end = selection == null ? void 0 : selection.end) != null ? _selection_end : -1);
        }
    }, [
        mostRecentEventCount,
        inputRef,
        props.value,
        props.defaultValue,
        lastNativeText,
        selection,
        lastNativeSelection,
        text,
        viewCommands
    ]);
    return {
        setLastNativeText: setLastNativeText,
        setLastNativeSelection: setLastNativeSelection
    };
}
/**
 * This hook handles the synchronization between the state of the text input
 * in native and in JavaScript. This is necessary due to the asynchronous nature
 * of text input events.
 */ function useTextInputStateSynchronization_REFS(param) {
    var props = param.props, mostRecentEventCount = param.mostRecentEventCount, selection = param.selection, inputRef = param.inputRef, text = param.text, viewCommands = param.viewCommands;
    var lastNativeTextRef = (0, _react.useRef)(props.value);
    var lastNativeSelectionRef = (0, _react.useRef)({
        selection: {
            start: -1,
            end: -1
        },
        mostRecentEventCount: mostRecentEventCount
    });
    // This is necessary in case native updates the text and JS decides
    // that the update should be ignored and we should stick with the value
    // that we have in JS.
    (0, _react.useLayoutEffect)(function() {
        var nativeUpdate = {};
        var lastNativeSelection = lastNativeSelectionRef.current.selection;
        if (lastNativeTextRef.current !== props.value && typeof props.value === 'string') {
            nativeUpdate.text = props.value;
            lastNativeTextRef.current = props.value;
        }
        if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
            nativeUpdate.selection = selection;
            lastNativeSelectionRef.current = {
                selection: selection,
                mostRecentEventCount: mostRecentEventCount
            };
        }
        if (Object.keys(nativeUpdate).length === 0) {
            return;
        }
        if (inputRef.current != null) {
            var _selection_start, _selection_end;
            viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (_selection_start = selection == null ? void 0 : selection.start) != null ? _selection_start : -1, (_selection_end = selection == null ? void 0 : selection.end) != null ? _selection_end : -1);
        }
    }, [
        mostRecentEventCount,
        inputRef,
        props.value,
        props.defaultValue,
        selection,
        text,
        viewCommands
    ]);
    return {
        setLastNativeText: function(lastNativeText) {
            lastNativeTextRef.current = lastNativeText;
        },
        setLastNativeSelection: function(lastNativeSelection) {
            lastNativeSelectionRef.current = lastNativeSelection;
        }
    };
}
/**
 * A foundational component for inputting text into the app via a
 * keyboard. Props provide configurability for several features, such as
 * auto-correction, auto-capitalization, placeholder text, and different keyboard
 * types, such as a numeric keypad.
 *
 * The simplest use case is to plop down a `TextInput` and subscribe to the
 * `onChangeText` events to read the user input. There are also other events,
 * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple
 * example:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, TextInput } from 'react-native';
 *
 * export default class UselessTextInput extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = { text: 'Useless Placeholder' };
 *   }
 *
 *   render() {
 *     return (
 *       <TextInput
 *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}
 *         onChangeText={(text) => this.setState({text})}
 *         value={this.state.text}
 *       />
 *     );
 *   }
 * }
 *
 * // skip this line if using Create React Native App
 * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);
 * ```
 *
 * Two methods exposed via the native element are .focus() and .blur() that
 * will focus or blur the TextInput programmatically.
 *
 * Note that some props are only available with `multiline={true/false}`.
 * Additionally, border styles that apply to only one side of the element
 * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if
 * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`
 * in a `View`:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, View, TextInput } from 'react-native';
 *
 * class UselessTextInput extends Component {
 *   render() {
 *     return (
 *       <TextInput
 *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below
 *         editable={true}
 *         maxLength={40}
 *       />
 *     );
 *   }
 * }
 *
 * export default class UselessTextInputMultiline extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {
 *       text: 'Useless Multiline Placeholder',
 *     };
 *   }
 *
 *   // If you type something in the text box that is a color, the background will change to that
 *   // color.
 *   render() {
 *     return (
 *      <View style={{
 *        backgroundColor: this.state.text,
 *        borderBottomColor: '#000000',
 *        borderBottomWidth: 1 }}
 *      >
 *        <UselessTextInput
 *          multiline={true}
 *          numberOfLines={4}
 *          onChangeText={(text) => this.setState({text})}
 *          value={this.state.text}
 *        />
 *      </View>
 *     );
 *   }
 * }
 *
 * // skip these lines if using Create React Native App
 * AppRegistry.registerComponent(
 *  'AwesomeProject',
 *  () => UselessTextInputMultiline
 * );
 * ```
 *
 * `TextInput` has by default a border at the bottom of its view. This border
 * has its padding set by the background image provided by the system, and it
 * cannot be changed. Solutions to avoid this is to either not set height
 * explicitly, case in which the system will take care of displaying the border
 * in the correct position, or to not display the border by setting
 * `underlineColorAndroid` to transparent.
 *
 * Note that on Android performing text selection in input can change
 * app's activity `windowSoftInputMode` param to `adjustResize`.
 * This may cause issues with components that have position: 'absolute'
 * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`
 * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )
 * or control this param programmatically with native code.
 *
 */ function InternalTextInput(props) {
    var ariaBusy = props['aria-busy'], ariaChecked = props['aria-checked'], ariaDisabled = props['aria-disabled'], ariaExpanded = props['aria-expanded'], ariaSelected = props['aria-selected'], accessibilityState = props.accessibilityState, id = props.id, tabIndex = props.tabIndex, propsSelection = props.selection, selectionColor = props.selectionColor, selectionHandleColor = props.selectionHandleColor, cursorColor = props.cursorColor, otherProps = _object_without_properties_loose._(props, [
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-selected',
        "accessibilityState",
        "id",
        "tabIndex",
        "selection",
        "selectionColor",
        "selectionHandleColor",
        "cursorColor"
    ]);
    var inputRef = (0, _react.useRef)(null);
    var _propsSelection_end;
    var selection = propsSelection == null ? null : {
        start: propsSelection.start,
        end: (_propsSelection_end = propsSelection.end) != null ? _propsSelection_end : propsSelection.start
    };
    var text = typeof props.value === 'string' ? props.value : typeof props.defaultValue === 'string' ? props.defaultValue : '';
    var viewCommands = AndroidTextInputCommands || (props.multiline === true ? RCTMultilineTextInputNativeCommands : RCTSinglelineTextInputNativeCommands);
    var _useState = _sliced_to_array._((0, _react.useState)(0), 2), mostRecentEventCount = _useState[0], setMostRecentEventCount = _useState[1];
    var useTextInputStateSynchronization = _ReactNativeFeatureFlags.useRefsForTextInputState() ? useTextInputStateSynchronization_REFS : useTextInputStateSynchronization_STATE;
    var _useTextInputStateSynchronization = useTextInputStateSynchronization({
        props: props,
        inputRef: inputRef,
        mostRecentEventCount: mostRecentEventCount,
        selection: selection,
        text: text,
        viewCommands: viewCommands
    }), setLastNativeText = _useTextInputStateSynchronization.setLastNativeText, setLastNativeSelection = _useTextInputStateSynchronization.setLastNativeSelection;
    (0, _react.useLayoutEffect)(function() {
        var inputRefValue = inputRef.current;
        if (inputRefValue != null) {
            _TextInputState.default.registerInput(inputRefValue);
            return function() {
                _TextInputState.default.unregisterInput(inputRefValue);
                if (_TextInputState.default.currentlyFocusedInput() === inputRefValue) {
                    (0, _nullthrows.default)(inputRefValue).blur();
                }
            };
        }
    }, []);
    var setLocalRef = (0, _react.useCallback)(function(instance) {
        inputRef.current = instance;
        /*
      Hi reader from the future. I'm sorry for this.

      This is a hack. Ideally we would forwardRef to the underlying
      host component. However, since TextInput has it's own methods that can be
      called as well, if we used the standard forwardRef then these
      methods wouldn't be accessible and thus be a breaking change.

      We have a couple of options of how to handle this:
      - Return a new ref with everything we methods from both. This is problematic
        because we need React to also know it is a host component which requires
        internals of the class implementation of the ref.
      - Break the API and have some other way to call one set of the methods or
        the other. This is our long term approach as we want to eventually
        get the methods on host components off the ref. So instead of calling
        ref.measure() you might call ReactNative.measure(ref). This would hopefully
        let the ref for TextInput then have the methods like `.clear`. Or we do it
        the other way and make it TextInput.clear(textInputRef) which would be fine
        too. Either way though is a breaking change that is longer term.
      - Mutate this ref. :( Gross, but accomplishes what we need in the meantime
        before we can get to the long term breaking change.
      */ if (instance != null) {
            // $FlowFixMe[incompatible-use] - See the explanation above.
            Object.assign(instance, {
                clear: function() {
                    if (inputRef.current != null) {
                        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, '', 0, 0);
                    }
                },
                // TODO: Fix this returning true on null === null, when no input is focused
                isFocused: function() {
                    return _TextInputState.default.currentlyFocusedInput() === inputRef.current;
                },
                getNativeRef: function() {
                    return inputRef.current;
                },
                setSelection: function(start, end) {
                    if (inputRef.current != null) {
                        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, null, start, end);
                    }
                }
            });
        }
    }, [
        mostRecentEventCount,
        viewCommands
    ]);
    var ref = (0, _useMergeRefs.default)(setLocalRef, props.forwardedRef);
    var _onChange = function(event) {
        var currentText = event.nativeEvent.text;
        props.onChange && props.onChange(event);
        props.onChangeText && props.onChangeText(currentText);
        if (inputRef.current == null) {
            // calling `props.onChange` or `props.onChangeText`
            // may clean up the input itself. Exits here.
            return;
        }
        setLastNativeText(currentText);
        // This must happen last, after we call setLastNativeText.
        // Different ordering can cause bugs when editing AndroidTextInputs
        // with multiple Fragments.
        // We must update this so that controlled input updates work.
        setMostRecentEventCount(event.nativeEvent.eventCount);
    };
    var _onSelectionChange = function(event) {
        props.onSelectionChange && props.onSelectionChange(event);
        if (inputRef.current == null) {
            // calling `props.onSelectionChange`
            // may clean up the input itself. Exits here.
            return;
        }
        setLastNativeSelection({
            selection: event.nativeEvent.selection,
            mostRecentEventCount: mostRecentEventCount
        });
    };
    var _onFocus = function(event) {
        _TextInputState.default.focusInput(inputRef.current);
        if (props.onFocus) {
            props.onFocus(event);
        }
    };
    var _onBlur = function(event) {
        _TextInputState.default.blurInput(inputRef.current);
        if (props.onBlur) {
            props.onBlur(event);
        }
    };
    var _onScroll = function(event) {
        props.onScroll && props.onScroll(event);
    };
    var textInput = null;
    var _props_multiline;
    var multiline = (_props_multiline = props.multiline) != null ? _props_multiline : false;
    var submitBehavior;
    if (props.submitBehavior != null) {
        // `submitBehavior` is set explicitly
        if (!multiline && props.submitBehavior === 'newline') {
            // For single line text inputs, `'newline'` is not a valid option
            submitBehavior = 'blurAndSubmit';
        } else {
            submitBehavior = props.submitBehavior;
        }
    } else if (multiline) {
        if (props.blurOnSubmit === true) {
            submitBehavior = 'blurAndSubmit';
        } else {
            submitBehavior = 'newline';
        }
    } else {
        // Single line
        if (props.blurOnSubmit !== false) {
            submitBehavior = 'blurAndSubmit';
        } else {
            submitBehavior = 'submit';
        }
    }
    var accessible = props.accessible !== false;
    var focusable = props.focusable !== false;
    var editable = props.editable, hitSlop = props.hitSlop, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, rejectResponderTermination = props.rejectResponderTermination;
    var config = _react.useMemo(function() {
        return {
            hitSlop: hitSlop,
            onPress: function(event) {
                onPress == null ? void 0 : onPress(event);
                if (editable !== false) {
                    if (inputRef.current != null) {
                        inputRef.current.focus();
                    }
                }
            },
            onPressIn: onPressIn,
            onPressOut: onPressOut,
            cancelable: _Platform.default.OS === 'ios' ? !rejectResponderTermination : null
        };
    }, [
        editable,
        hitSlop,
        onPress,
        onPressIn,
        onPressOut,
        rejectResponderTermination
    ]);
    // Hide caret during test runs due to a flashing caret
    // makes screenshot tests flakey
    var caretHidden = props.caretHidden;
    if (_Platform.default.isTesting) {
        caretHidden = true;
    }
    // TextInput handles onBlur and onFocus events
    // so omitting onBlur and onFocus pressability handlers here.
    var _ref = (0, _usePressability.default)(config) || {}, onBlur = _ref.onBlur, onFocus = _ref.onFocus, eventHandlers = _object_without_properties_loose._(_ref, [
        "onBlur",
        "onFocus"
    ]);
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
        _accessibilityState = {
            busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
            checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
            disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
            expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
            selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
        };
    }
    // Keep the original (potentially nested) style when possible, as React can diff these more efficiently
    var _style = props.style;
    var flattenedStyle = (0, _flattenStyle.default)(props.style);
    if (flattenedStyle != null) {
        var overrides = null;
        if (typeof (flattenedStyle == null ? void 0 : flattenedStyle.fontWeight) === 'number') {
            overrides = overrides || {};
            overrides.fontWeight = // $FlowFixMe[incompatible-cast]
            flattenedStyle.fontWeight.toString();
        }
        if (flattenedStyle.verticalAlign != null) {
            overrides = overrides || {};
            overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[flattenedStyle.verticalAlign];
            overrides.verticalAlign = undefined;
        }
        if (overrides != null) {
            // $FlowFixMe[incompatible-type]
            _style = [
                _style,
                overrides
            ];
        }
    }
    if (_Platform.default.OS === 'ios') {
        var RCTTextInputView = props.multiline === true ? RCTMultilineTextInputView : RCTSinglelineTextInputView;
        var useMultilineDefaultStyle = props.multiline === true && (flattenedStyle == null || flattenedStyle.padding == null && flattenedStyle.paddingVertical == null && flattenedStyle.paddingTop == null);
        textInput = /*#__PURE__*/ _react.createElement(RCTTextInputView, _extends._({
            // $FlowFixMe[incompatible-type] - Figure out imperative + forward refs.
            ref: ref
        }, otherProps, eventHandlers, {
            accessibilityState: _accessibilityState,
            accessible: accessible,
            submitBehavior: submitBehavior,
            caretHidden: caretHidden,
            dataDetectorTypes: props.dataDetectorTypes,
            focusable: tabIndex !== undefined ? !tabIndex : focusable,
            mostRecentEventCount: mostRecentEventCount,
            nativeID: id != null ? id : props.nativeID,
            onBlur: _onBlur,
            onChange: _onChange,
            onContentSizeChange: props.onContentSizeChange,
            onFocus: _onFocus,
            onScroll: _onScroll,
            onSelectionChange: _onSelectionChange,
            onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
            selection: selection,
            selectionColor: selectionColor,
            style: _StyleSheet.default.compose(useMultilineDefaultStyle ? styles.multilineDefault : null, _style),
            text: text
        }));
    } else if (_Platform.default.OS === 'android') {
        var autoCapitalize = props.autoCapitalize || 'sentences';
        var _props_arialabelledby;
        var _accessibilityLabelledBy = (_props_arialabelledby = props == null ? void 0 : props['aria-labelledby']) != null ? _props_arialabelledby : props == null ? void 0 : props.accessibilityLabelledBy;
        var _props_placeholder;
        var placeholder = (_props_placeholder = props.placeholder) != null ? _props_placeholder : '';
        var children = props.children;
        var childCount = _react.Children.count(children);
        (0, _invariant.default)(!(props.value != null && childCount), 'Cannot specify both value and children.');
        if (childCount > 1) {
            children = /*#__PURE__*/ _react.createElement(_Text.default, null, children);
        }
        // For consistency with iOS set cursor/selectionHandle color as selectionColor
        var colorProps = {
            selectionColor: selectionColor,
            selectionHandleColor: selectionHandleColor === undefined ? selectionColor : selectionHandleColor,
            cursorColor: cursorColor === undefined ? selectionColor : cursorColor
        };
        var _props_rows;
        textInput = /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match up
       * exactly with the props for TextInput. This will need to get fixed */ /* $FlowFixMe[incompatible-type] the types for AndroidTextInput don't
       * match up exactly with the props for TextInput. This will need to get
       * fixed */ /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput don't
       * match up exactly with the props for TextInput. This will need to get
       * fixed */ /*#__PURE__*/ _react.createElement(AndroidTextInput, _extends._({
            // $FlowFixMe[incompatible-type] - Figure out imperative + forward refs.
            ref: ref
        }, otherProps, colorProps, eventHandlers, {
            accessibilityState: _accessibilityState,
            accessibilityLabelledBy: _accessibilityLabelledBy,
            accessible: accessible,
            autoCapitalize: autoCapitalize,
            submitBehavior: submitBehavior,
            caretHidden: caretHidden,
            children: children,
            disableFullscreenUI: props.disableFullscreenUI,
            focusable: tabIndex !== undefined ? !tabIndex : focusable,
            mostRecentEventCount: mostRecentEventCount,
            nativeID: id != null ? id : props.nativeID,
            numberOfLines: (_props_rows = props.rows) != null ? _props_rows : props.numberOfLines,
            onBlur: _onBlur,
            onChange: _onChange,
            onFocus: _onFocus,
            /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match
         * up exactly with the props for TextInput. This will need to get fixed
         */ /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput
         * don't match up exactly with the props for TextInput. This will need
         * to get fixed */ onScroll: _onScroll,
            onSelectionChange: _onSelectionChange,
            placeholder: placeholder,
            style: _style,
            text: text,
            textBreakStrategy: props.textBreakStrategy
        }));
    }
    return /*#__PURE__*/ _react.createElement(_TextAncestor.default.Provider, {
        value: true
    }, textInput);
}
var enterKeyHintToReturnTypeMap = {
    enter: 'default',
    done: 'done',
    go: 'go',
    next: 'next',
    previous: 'previous',
    search: 'search',
    send: 'send'
};
var inputModeToKeyboardTypeMap = {
    none: 'default',
    text: 'default',
    decimal: 'decimal-pad',
    numeric: 'number-pad',
    tel: 'phone-pad',
    search: _Platform.default.OS === 'ios' ? 'web-search' : 'default',
    email: 'email-address',
    url: 'url'
};
// Map HTML autocomplete values to Android autoComplete values
var autoCompleteWebToAutoCompleteAndroidMap = {
    'address-line1': 'postal-address-region',
    'address-line2': 'postal-address-locality',
    bday: 'birthdate-full',
    'bday-day': 'birthdate-day',
    'bday-month': 'birthdate-month',
    'bday-year': 'birthdate-year',
    'cc-csc': 'cc-csc',
    'cc-exp': 'cc-exp',
    'cc-exp-month': 'cc-exp-month',
    'cc-exp-year': 'cc-exp-year',
    'cc-number': 'cc-number',
    country: 'postal-address-country',
    'current-password': 'password',
    email: 'email',
    'honorific-prefix': 'name-prefix',
    'honorific-suffix': 'name-suffix',
    name: 'name',
    'additional-name': 'name-middle',
    'family-name': 'name-family',
    'given-name': 'name-given',
    'new-password': 'password-new',
    off: 'off',
    'one-time-code': 'sms-otp',
    'postal-code': 'postal-code',
    sex: 'gender',
    'street-address': 'street-address',
    tel: 'tel',
    'tel-country-code': 'tel-country-code',
    'tel-national': 'tel-national',
    username: 'username'
};
// Map HTML autocomplete values to iOS textContentType values
var autoCompleteWebToTextContentTypeMap = {
    'address-line1': 'streetAddressLine1',
    'address-line2': 'streetAddressLine2',
    bday: 'birthdate',
    'bday-day': 'birthdateDay',
    'bday-month': 'birthdateMonth',
    'bday-year': 'birthdateYear',
    'cc-csc': 'creditCardSecurityCode',
    'cc-exp-month': 'creditCardExpirationMonth',
    'cc-exp-year': 'creditCardExpirationYear',
    'cc-exp': 'creditCardExpiration',
    'cc-given-name': 'creditCardGivenName',
    'cc-additional-name': 'creditCardMiddleName',
    'cc-family-name': 'creditCardFamilyName',
    'cc-name': 'creditCardName',
    'cc-number': 'creditCardNumber',
    'cc-type': 'creditCardType',
    'current-password': 'password',
    country: 'countryName',
    email: 'emailAddress',
    name: 'name',
    'additional-name': 'middleName',
    'family-name': 'familyName',
    'given-name': 'givenName',
    nickname: 'nickname',
    'honorific-prefix': 'namePrefix',
    'honorific-suffix': 'nameSuffix',
    'new-password': 'newPassword',
    off: 'none',
    'one-time-code': 'oneTimeCode',
    organization: 'organizationName',
    'organization-title': 'jobTitle',
    'postal-code': 'postalCode',
    'street-address': 'fullStreetAddress',
    tel: 'telephoneNumber',
    url: 'URL',
    username: 'username'
};
var ExportedForwardRef = /*#__PURE__*/ _react.forwardRef(function TextInput(_param, forwardedRef) {
    var _param_allowFontScaling = _param.allowFontScaling, allowFontScaling = _param_allowFontScaling === void 0 ? true : _param_allowFontScaling, _param_rejectResponderTermination = _param.rejectResponderTermination, rejectResponderTermination = _param_rejectResponderTermination === void 0 ? true : _param_rejectResponderTermination, _param_underlineColorAndroid = _param.underlineColorAndroid, underlineColorAndroid = _param_underlineColorAndroid === void 0 ? 'transparent' : _param_underlineColorAndroid, autoComplete = _param.autoComplete, textContentType = _param.textContentType, readOnly = _param.readOnly, editable = _param.editable, enterKeyHint = _param.enterKeyHint, returnKeyType = _param.returnKeyType, inputMode = _param.inputMode, showSoftInputOnFocus = _param.showSoftInputOnFocus, keyboardType = _param.keyboardType, restProps = _object_without_properties_loose._(_param, [
        "allowFontScaling",
        "rejectResponderTermination",
        "underlineColorAndroid",
        "autoComplete",
        "textContentType",
        "readOnly",
        "editable",
        "enterKeyHint",
        "returnKeyType",
        "inputMode",
        "showSoftInputOnFocus",
        "keyboardType"
    ]);
    var // $FlowFixMe[prop-missing]
    _autoCompleteWebToAutoCompleteAndroidMap_autoComplete;
    return /*#__PURE__*/ _react.createElement(InternalTextInput, _extends._({
        allowFontScaling: allowFontScaling,
        rejectResponderTermination: rejectResponderTermination,
        underlineColorAndroid: underlineColorAndroid,
        editable: readOnly !== undefined ? !readOnly : editable,
        returnKeyType: enterKeyHint ? enterKeyHintToReturnTypeMap[enterKeyHint] : returnKeyType,
        keyboardType: inputMode ? inputModeToKeyboardTypeMap[inputMode] : keyboardType,
        showSoftInputOnFocus: inputMode == null ? showSoftInputOnFocus : inputMode !== 'none',
        autoComplete: _Platform.default.OS === 'android' ? (_autoCompleteWebToAutoCompleteAndroidMap_autoComplete = autoCompleteWebToAutoCompleteAndroidMap[autoComplete]) != null ? _autoCompleteWebToAutoCompleteAndroidMap_autoComplete : autoComplete : undefined,
        textContentType: textContentType != null ? textContentType : _Platform.default.OS === 'ios' && autoComplete && autoComplete in autoCompleteWebToTextContentTypeMap ? // $FlowFixMe[prop-missing]
        autoCompleteWebToTextContentTypeMap[autoComplete] : textContentType
    }, restProps, {
        forwardedRef: forwardedRef
    }));
});
ExportedForwardRef.displayName = 'TextInput';
// $FlowFixMe[prop-missing]
ExportedForwardRef.State = {
    currentlyFocusedInput: _TextInputState.default.currentlyFocusedInput,
    currentlyFocusedField: _TextInputState.default.currentlyFocusedField,
    focusTextInput: _TextInputState.default.focusTextInput,
    blurTextInput: _TextInputState.default.blurTextInput
};
var styles = _StyleSheet.default.create({
    multilineDefault: {
        // This default top inset makes RCTMultilineTextInputView seem as close as possible
        // to single-line RCTSinglelineTextInputView defaults, using the system defaults
        // of font size 17 and a height of 31 points.
        paddingTop: 5
    }
});
var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
};
// $FlowFixMe[unclear-type] Unclear type. Using `any` type is not safe.
module.exports = ExportedForwardRef;


}),
83008: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
__webpack_require__(94891);
var PressabilityPerformanceEventEmitter = /*#__PURE__*/ function() {
    "use strict";
    function PressabilityPerformanceEventEmitter() {
        this._listeners = [];
    }
    var _proto = PressabilityPerformanceEventEmitter.prototype;
    _proto.addListener = function addListener(listener) {
        this._listeners.push(listener);
    };
    _proto.removeListener = function removeListener(listener) {
        var index = this._listeners.indexOf(listener);
        if (index > -1) {
            this._listeners.splice(index, 1);
        }
    };
    _proto.emitEvent = function emitEvent(constructEvent) {
        if (this._listeners.length === 0) {
            return;
        }
        var event = constructEvent();
        this._listeners.forEach(function(listener) {
            return listener(event);
        });
    };
    return PressabilityPerformanceEventEmitter;
}();
var PressabilityPerformanceEventEmitterSingleton = new PressabilityPerformanceEventEmitter();
var _default = PressabilityPerformanceEventEmitterSingleton;


}),
83150: (function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */ var TouchHistoryMath = {
    /**
   * This code is optimized and not intended to look beautiful. This allows
   * computing of touch centroids that have moved after `touchesChangedAfter`
   * timeStamp. You can compute the current centroid involving all touches
   * moves after `touchesChangedAfter`, or you can compute the previous
   * centroid of all touches that were moved after `touchesChangedAfter`.
   *
   * @param {TouchHistoryMath} touchHistory Standard Responder touch track
   * data.
   * @param {number} touchesChangedAfter timeStamp after which moved touches
   * are considered "actively moving" - not just "active".
   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.
   * @param {boolean} ofCurrent Compute current centroid for actively moving
   * touches vs. previous centroid of now actively moving touches.
   * @return {number} value of centroid in specified dimension.
   */ centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank;
        var total = 0;
        var count = 0;
        var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (oneTouchData !== null) {
            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
                total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
                count = 1;
            }
        } else {
            for(var i = 0; i < touchBank.length; i++){
                var touchTrack = touchBank[i];
                if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                    var toAdd = void 0; // Yuck, program temporarily in invalid state.
                    if (ofCurrent && isXAxis) {
                        toAdd = touchTrack.currentPageX;
                    } else if (ofCurrent && !isXAxis) {
                        toAdd = touchTrack.currentPageY;
                    } else if (!ofCurrent && isXAxis) {
                        toAdd = touchTrack.previousPageX;
                    } else {
                        toAdd = touchTrack.previousPageY;
                    }
                    total += toAdd;
                    count++;
                }
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
};
module.exports = TouchHistoryMath;


}),
83165: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeDevSettings = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(53258), exports));
var _default = _NativeDevSettings.default;


}),
83365: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _NativeToastAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43306));
/**
 * This exposes the native ToastAndroid module as a JS module. This has a function 'show'
 * which takes the following parameters:
 *
 * 1. String message: A string with the text to toast
 * 2. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG
 *
 * There is also a function `showWithGravity` to specify the layout gravity. May be
 * ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER.
 *
 * The 'showWithGravityAndOffset' function adds on the ability to specify offset
 * These offset values will translate to pixels.
 *
 * Basic usage:
 * ```javascript
 * ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
 * ToastAndroid.showWithGravity('All Your Base Are Belong To Us', ToastAndroid.SHORT, ToastAndroid.CENTER);
 * ToastAndroid.showWithGravityAndOffset('A wild toast appeared!', ToastAndroid.LONG, ToastAndroid.BOTTOM, 25, 50);
 * ```
 */ var ToastAndroidConstants = _NativeToastAndroid.default.getConstants();
var ToastAndroid = {
    // Toast duration constants
    SHORT: ToastAndroidConstants.SHORT,
    LONG: ToastAndroidConstants.LONG,
    // Toast gravity constants
    TOP: ToastAndroidConstants.TOP,
    BOTTOM: ToastAndroidConstants.BOTTOM,
    CENTER: ToastAndroidConstants.CENTER,
    show: function show(message, duration) {
        _NativeToastAndroid.default.show(message, duration);
    },
    showWithGravity: function showWithGravity(message, duration, gravity) {
        _NativeToastAndroid.default.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
        _NativeToastAndroid.default.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
};
module.exports = ToastAndroid;


}),
83514: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _requireNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65664));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35180));
function codegenNativeComponent(componentName, options) {
    if (__webpack_require__.g.RN$Bridgeless === true && false) {}
    var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
    if (options != null && options.paperComponentNameDeprecated != null) {
        if (_UIManager.default.hasViewManagerConfig(componentName)) {
            componentNameInUse = componentName;
        } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
            componentNameInUse = options.paperComponentNameDeprecated;
        } else {
            var _options_paperComponentNameDeprecated;
            throw new Error("Failed to find native component for either " + componentName + " or " + ((_options_paperComponentNameDeprecated = options.paperComponentNameDeprecated) != null ? _options_paperComponentNameDeprecated : '(unknown)'));
        }
    }
    return (0, _requireNativeComponent.default)(componentNameInUse);
}
var _default = codegenNativeComponent;


}),
83565: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
__webpack_require__(83712);
var VirtualizedSectionList = (__webpack_require__(83712)/* .VirtualizedSectionList */.VirtualizedSectionList);
module.exports = VirtualizedSectionList;


}),
83607: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "isHoverEnabled", ({
    enumerable: true,
    get: function() {
        return isHoverEnabled;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var isEnabled = false;
if (_Platform.default.OS === 'web') {
    var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
    if (canUseDOM) {
        /**
     * Web browsers emulate mouse events (and hover states) after touch events.
     * This code infers when the currently-in-use modality supports hover
     * (including for multi-modality devices) and considers "hover" to be enabled
     * if a mouse movement occurs more than 1 second after the last touch event.
     * This threshold is long enough to account for longer delays between the
     * browser firing touch and mouse events on low-powered devices.
     */ var HOVER_THRESHOLD_MS = 1000;
        var lastTouchTimestamp = 0;
        var enableHover = function() {
            if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {
                return;
            }
            isEnabled = true;
        };
        var disableHover = function() {
            lastTouchTimestamp = Date.now();
            if (isEnabled) {
                isEnabled = false;
            }
        };
        document.addEventListener('touchstart', disableHover, true);
        document.addEventListener('touchmove', disableHover, true);
        document.addEventListener('mousemove', enableHover, true);
    }
}
function isHoverEnabled() {
    return isEnabled;
}


}),
85390: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('Appearance');


}),
85672: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Pressability;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _SoundManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19920));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13111));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35180));
var _Rect = __webpack_require__(46110);
__webpack_require__(69521);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _HoverState = __webpack_require__(83607);
var _PressabilityPerformanceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83008));
__webpack_require__(94891);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var Transitions = Object.freeze({
    NOT_RESPONDER: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
        RESPONDER_RELEASE: 'ERROR',
        RESPONDER_TERMINATED: 'ERROR',
        ENTER_PRESS_RECT: 'ERROR',
        LEAVE_PRESS_RECT: 'ERROR',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_IN: {
        DELAY: 'RESPONDER_ACTIVE_PRESS_IN',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
        DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_PRESS_IN: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
        LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    ERROR: {
        DELAY: 'NOT_RESPONDER',
        RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'NOT_RESPONDER',
        LEAVE_PRESS_RECT: 'NOT_RESPONDER',
        LONG_PRESS_DETECTED: 'NOT_RESPONDER'
    }
});
var isActiveSignal = function(signal) {
    return signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
};
var isActivationSignal = function(signal) {
    return signal === 'RESPONDER_ACTIVE_PRESS_OUT' || signal === 'RESPONDER_ACTIVE_PRESS_IN';
};
var isPressInSignal = function(signal) {
    return signal === 'RESPONDER_INACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
};
var isTerminalSignal = function(signal) {
    return signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';
};
var DEFAULT_LONG_PRESS_DELAY_MS = 500;
var DEFAULT_PRESS_RECT_OFFSETS = {
    bottom: 30,
    left: 20,
    right: 20,
    top: 20
};
var DEFAULT_MIN_PRESS_DURATION = 130;
var DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE = 10;
var longPressDeactivationDistance = DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE;
var Pressability = /*#__PURE__*/ function() {
    "use strict";
    function Pressability(config) {
        var _this = this;
        this._eventHandlers = null;
        this._hoverInDelayTimeout = null;
        this._hoverOutDelayTimeout = null;
        this._isHovered = false;
        this._longPressDelayTimeout = null;
        this._pressDelayTimeout = null;
        this._pressOutDelayTimeout = null;
        this._responderID = null;
        this._responderRegion = null;
        this._touchState = 'NOT_RESPONDER';
        this._measureCallback = function(left, top, width, height, pageX, pageY) {
            if (!left && !top && !width && !height && !pageX && !pageY) {
                return;
            }
            _this._responderRegion = {
                bottom: pageY + height,
                left: pageX,
                right: pageX + width,
                top: pageY
            };
        };
        this.configure(config);
    }
    var _proto = Pressability.prototype;
    _proto.configure = function configure(config) {
        this._config = config;
    };
    /**
   * Resets any pending timers. This should be called on unmount.
   */ _proto.reset = function reset() {
        this._cancelHoverInDelayTimeout();
        this._cancelHoverOutDelayTimeout();
        this._cancelLongPressDelayTimeout();
        this._cancelPressDelayTimeout();
        this._cancelPressOutDelayTimeout();
        // Ensure that, if any async event handlers are fired after unmount
        // due to a race, we don't call any configured callbacks.
        this._config = Object.freeze({});
    };
    /**
   * Returns a set of props to spread into the interactive element.
   */ _proto.getEventHandlers = function getEventHandlers() {
        if (this._eventHandlers == null) {
            this._eventHandlers = this._createEventHandlers();
        }
        return this._eventHandlers;
    };
    _proto._createEventHandlers = function _createEventHandlers() {
        var _this = this;
        var focusEventHandlers = {
            onBlur: function(event) {
                var onBlur = _this._config.onBlur;
                if (onBlur != null) {
                    onBlur(event);
                }
            },
            onFocus: function(event) {
                var onFocus = _this._config.onFocus;
                if (onFocus != null) {
                    onFocus(event);
                }
            }
        };
        var responderEventHandlers = {
            onStartShouldSetResponder: function() {
                var disabled = _this._config.disabled;
                var _ref;
                return (_ref = !disabled) != null ? _ref : true;
            },
            onResponderGrant: function(event) {
                event.persist();
                _this._cancelPressOutDelayTimeout();
                _this._responderID = event.currentTarget;
                _this._touchState = 'NOT_RESPONDER';
                _this._receiveSignal('RESPONDER_GRANT', event);
                var delayPressIn = normalizeDelay(_this._config.delayPressIn);
                if (delayPressIn > 0) {
                    _this._pressDelayTimeout = setTimeout(function() {
                        _this._receiveSignal('DELAY', event);
                    }, delayPressIn);
                } else {
                    _this._receiveSignal('DELAY', event);
                }
                var delayLongPress = normalizeDelay(_this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn);
                _this._longPressDelayTimeout = setTimeout(function() {
                    _this._handleLongPress(event);
                }, delayLongPress + delayPressIn);
                return _this._config.blockNativeResponder === true;
            },
            onResponderMove: function(event) {
                var onPressMove = _this._config.onPressMove;
                if (onPressMove != null) {
                    onPressMove(event);
                }
                // Region may not have finished being measured, yet.
                var responderRegion = _this._responderRegion;
                if (responderRegion == null) {
                    return;
                }
                var touch = getTouchFromPressEvent(event);
                if (touch == null) {
                    _this._cancelLongPressDelayTimeout();
                    _this._receiveSignal('LEAVE_PRESS_RECT', event);
                    return;
                }
                if (_this._touchActivatePosition != null) {
                    var deltaX = _this._touchActivatePosition.pageX - touch.pageX;
                    var deltaY = _this._touchActivatePosition.pageY - touch.pageY;
                    if (Math.hypot(deltaX, deltaY) > longPressDeactivationDistance) {
                        _this._cancelLongPressDelayTimeout();
                    }
                }
                if (_this._isTouchWithinResponderRegion(touch, responderRegion)) {
                    _this._receiveSignal('ENTER_PRESS_RECT', event);
                } else {
                    _this._cancelLongPressDelayTimeout();
                    _this._receiveSignal('LEAVE_PRESS_RECT', event);
                }
            },
            onResponderRelease: function(event) {
                _this._receiveSignal('RESPONDER_RELEASE', event);
            },
            onResponderTerminate: function(event) {
                _this._receiveSignal('RESPONDER_TERMINATED', event);
            },
            onResponderTerminationRequest: function() {
                var cancelable = _this._config.cancelable;
                return cancelable != null ? cancelable : true;
            },
            onClick: function(event) {
                var _event_nativeEvent_hasOwnProperty, _event_nativeEvent;
                // If event has `pointerType`, it was emitted from a PointerEvent and
                // we should ignore it to avoid triggering `onPress` twice.
                if (event == null ? void 0 : (_event_nativeEvent = event.nativeEvent) == null ? void 0 : (_event_nativeEvent_hasOwnProperty = _event_nativeEvent.hasOwnProperty) == null ? void 0 : _event_nativeEvent_hasOwnProperty.call(_event_nativeEvent, 'pointerType')) {
                    return;
                }
                // for non-pointer click events (e.g. accessibility clicks), we should only dispatch when we're the "real" target
                // in particular, we shouldn't respond to clicks from nested pressables
                if ((event == null ? void 0 : event.currentTarget) !== (event == null ? void 0 : event.target)) {
                    event == null ? void 0 : event.stopPropagation();
                    return;
                }
                var _this__config = _this._config, onPress = _this__config.onPress, disabled = _this__config.disabled;
                if (onPress != null && disabled !== true) {
                    onPress(event);
                }
            }
        };
        if (false) {}
        if (_ReactNativeFeatureFlags.default.shouldPressibilityUseW3CPointerEventsForHover()) {
            var hoverPointerEvents = {
                onPointerEnter: undefined,
                onPointerLeave: undefined
            };
            var _this__config = this._config, onHoverIn = _this__config.onHoverIn, onHoverOut = _this__config.onHoverOut;
            if (onHoverIn != null) {
                hoverPointerEvents.onPointerEnter = function(event) {
                    _this._isHovered = true;
                    _this._cancelHoverOutDelayTimeout();
                    if (onHoverIn != null) {
                        var delayHoverIn = normalizeDelay(_this._config.delayHoverIn);
                        if (delayHoverIn > 0) {
                            event.persist();
                            _this._hoverInDelayTimeout = setTimeout(function() {
                                onHoverIn(convertPointerEventToMouseEvent(event));
                            }, delayHoverIn);
                        } else {
                            onHoverIn(convertPointerEventToMouseEvent(event));
                        }
                    }
                };
            }
            if (onHoverOut != null) {
                hoverPointerEvents.onPointerLeave = function(event) {
                    if (_this._isHovered) {
                        _this._isHovered = false;
                        _this._cancelHoverInDelayTimeout();
                        if (onHoverOut != null) {
                            var delayHoverOut = normalizeDelay(_this._config.delayHoverOut);
                            if (delayHoverOut > 0) {
                                event.persist();
                                _this._hoverOutDelayTimeout = setTimeout(function() {
                                    onHoverOut(convertPointerEventToMouseEvent(event));
                                }, delayHoverOut);
                            } else {
                                onHoverOut(convertPointerEventToMouseEvent(event));
                            }
                        }
                    }
                };
            }
            return _extends._({}, focusEventHandlers, responderEventHandlers, hoverPointerEvents);
        } else {
            var mouseEventHandlers = _Platform.default.OS === 'ios' || _Platform.default.OS === 'android' ? null : {
                onMouseEnter: function(event) {
                    if ((0, _HoverState.isHoverEnabled)()) {
                        _this._isHovered = true;
                        _this._cancelHoverOutDelayTimeout();
                        var onHoverIn = _this._config.onHoverIn;
                        if (onHoverIn != null) {
                            var delayHoverIn = normalizeDelay(_this._config.delayHoverIn);
                            if (delayHoverIn > 0) {
                                event.persist();
                                _this._hoverInDelayTimeout = setTimeout(function() {
                                    onHoverIn(event);
                                }, delayHoverIn);
                            } else {
                                onHoverIn(event);
                            }
                        }
                    }
                },
                onMouseLeave: function(event) {
                    if (_this._isHovered) {
                        _this._isHovered = false;
                        _this._cancelHoverInDelayTimeout();
                        var onHoverOut = _this._config.onHoverOut;
                        if (onHoverOut != null) {
                            var delayHoverOut = normalizeDelay(_this._config.delayHoverOut);
                            if (delayHoverOut > 0) {
                                event.persist();
                                _this._hoverInDelayTimeout = setTimeout(function() {
                                    onHoverOut(event);
                                }, delayHoverOut);
                            } else {
                                onHoverOut(event);
                            }
                        }
                    }
                }
            };
            return _extends._({}, focusEventHandlers, responderEventHandlers, mouseEventHandlers);
        }
    };
    /**
   * Receives a state machine signal, performs side effects of the transition
   * and stores the new state. Validates the transition as well.
   */ _proto._receiveSignal = function _receiveSignal(signal, event) {
        var _Transitions_prevState;
        // Especially on iOS, not all events have timestamps associated.
        // For telemetry purposes, this doesn't matter too much, as long as *some* do.
        // Since the native timestamp is integral for logging telemetry, just skip
        // events if they don't have a timestamp attached.
        if (event.nativeEvent.timestamp != null) {
            _PressabilityPerformanceEventEmitter.default.emitEvent(function() {
                return {
                    signal: signal,
                    nativeTimestamp: event.nativeEvent.timestamp
                };
            });
        }
        var prevState = this._touchState;
        var nextState = (_Transitions_prevState = Transitions[prevState]) == null ? void 0 : _Transitions_prevState[signal];
        if (this._responderID == null && signal === 'RESPONDER_RELEASE') {
            return;
        }
        (0, _invariant.default)(nextState != null && nextState !== 'ERROR', 'Pressability: Invalid signal `%s` for state `%s` on responder: %s', signal, prevState, typeof this._responderID === 'number' ? this._responderID : '<<host component>>');
        if (prevState !== nextState) {
            this._performTransitionSideEffects(prevState, nextState, signal, event);
            this._touchState = nextState;
        }
    };
    /**
   * Performs a transition between touchable states and identify any activations
   * or deactivations (and callback invocations).
   */ _proto._performTransitionSideEffects = function _performTransitionSideEffects(prevState, nextState, signal, event) {
        if (isTerminalSignal(signal)) {
            this._touchActivatePosition = null;
            this._cancelLongPressDelayTimeout();
        }
        var isInitialTransition = prevState === 'NOT_RESPONDER' && nextState === 'RESPONDER_INACTIVE_PRESS_IN';
        var isActivationTransition = !isActivationSignal(prevState) && isActivationSignal(nextState);
        if (isInitialTransition || isActivationTransition) {
            this._measureResponderRegion();
        }
        if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {
            var onLongPress = this._config.onLongPress;
            if (onLongPress != null) {
                onLongPress(event);
            }
        }
        var isPrevActive = isActiveSignal(prevState);
        var isNextActive = isActiveSignal(nextState);
        if (!isPrevActive && isNextActive) {
            this._activate(event);
        } else if (isPrevActive && !isNextActive) {
            this._deactivate(event);
        }
        if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {
            // If we never activated (due to delays), activate and deactivate now.
            if (!isNextActive && !isPrevActive) {
                this._activate(event);
                this._deactivate(event);
            }
            var _this__config = this._config, onLongPress1 = _this__config.onLongPress, onPress = _this__config.onPress, android_disableSound = _this__config.android_disableSound;
            if (onPress != null) {
                var isPressCanceledByLongPress = onLongPress1 != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
                if (!isPressCanceledByLongPress) {
                    if (_Platform.default.OS === 'android' && android_disableSound !== true) {
                        _SoundManager.default.playTouchSound();
                    }
                    onPress(event);
                }
            }
        }
        this._cancelPressDelayTimeout();
    };
    _proto._activate = function _activate(event) {
        var onPressIn = this._config.onPressIn;
        var _getTouchFromPressEvent = getTouchFromPressEvent(event), pageX = _getTouchFromPressEvent.pageX, pageY = _getTouchFromPressEvent.pageY;
        this._touchActivatePosition = {
            pageX: pageX,
            pageY: pageY
        };
        this._touchActivateTime = Date.now();
        if (onPressIn != null) {
            onPressIn(event);
        }
    };
    _proto._deactivate = function _deactivate(event) {
        var onPressOut = this._config.onPressOut;
        if (onPressOut != null) {
            var minPressDuration = normalizeDelay(this._config.minPressDuration, 0, DEFAULT_MIN_PRESS_DURATION);
            var _this__touchActivateTime;
            var pressDuration = Date.now() - ((_this__touchActivateTime = this._touchActivateTime) != null ? _this__touchActivateTime : 0);
            var delayPressOut = Math.max(minPressDuration - pressDuration, normalizeDelay(this._config.delayPressOut));
            if (delayPressOut > 0) {
                event.persist();
                this._pressOutDelayTimeout = setTimeout(function() {
                    onPressOut(event);
                }, delayPressOut);
            } else {
                onPressOut(event);
            }
        }
        this._touchActivateTime = null;
    };
    _proto._measureResponderRegion = function _measureResponderRegion() {
        if (this._responderID == null) {
            return;
        }
        if (typeof this._responderID === 'number') {
            _UIManager.default.measure(this._responderID, this._measureCallback);
        } else {
            this._responderID.measure(this._measureCallback);
        }
    };
    _proto._isTouchWithinResponderRegion = function _isTouchWithinResponderRegion(touch, responderRegion) {
        var hitSlop = (0, _Rect.normalizeRect)(this._config.hitSlop);
        var pressRectOffset = (0, _Rect.normalizeRect)(this._config.pressRectOffset);
        var regionBottom = responderRegion.bottom;
        var regionLeft = responderRegion.left;
        var regionRight = responderRegion.right;
        var regionTop = responderRegion.top;
        if (hitSlop != null) {
            if (hitSlop.bottom != null) {
                regionBottom += hitSlop.bottom;
            }
            if (hitSlop.left != null) {
                regionLeft -= hitSlop.left;
            }
            if (hitSlop.right != null) {
                regionRight += hitSlop.right;
            }
            if (hitSlop.top != null) {
                regionTop -= hitSlop.top;
            }
        }
        var _pressRectOffset_bottom;
        regionBottom += (_pressRectOffset_bottom = pressRectOffset == null ? void 0 : pressRectOffset.bottom) != null ? _pressRectOffset_bottom : DEFAULT_PRESS_RECT_OFFSETS.bottom;
        var _pressRectOffset_left;
        regionLeft -= (_pressRectOffset_left = pressRectOffset == null ? void 0 : pressRectOffset.left) != null ? _pressRectOffset_left : DEFAULT_PRESS_RECT_OFFSETS.left;
        var _pressRectOffset_right;
        regionRight += (_pressRectOffset_right = pressRectOffset == null ? void 0 : pressRectOffset.right) != null ? _pressRectOffset_right : DEFAULT_PRESS_RECT_OFFSETS.right;
        var _pressRectOffset_top;
        regionTop -= (_pressRectOffset_top = pressRectOffset == null ? void 0 : pressRectOffset.top) != null ? _pressRectOffset_top : DEFAULT_PRESS_RECT_OFFSETS.top;
        return touch.pageX > regionLeft && touch.pageX < regionRight && touch.pageY > regionTop && touch.pageY < regionBottom;
    };
    _proto._handleLongPress = function _handleLongPress(event) {
        if (this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' || this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN') {
            this._receiveSignal('LONG_PRESS_DETECTED', event);
        }
    };
    _proto._cancelHoverInDelayTimeout = function _cancelHoverInDelayTimeout() {
        if (this._hoverInDelayTimeout != null) {
            clearTimeout(this._hoverInDelayTimeout);
            this._hoverInDelayTimeout = null;
        }
    };
    _proto._cancelHoverOutDelayTimeout = function _cancelHoverOutDelayTimeout() {
        if (this._hoverOutDelayTimeout != null) {
            clearTimeout(this._hoverOutDelayTimeout);
            this._hoverOutDelayTimeout = null;
        }
    };
    _proto._cancelLongPressDelayTimeout = function _cancelLongPressDelayTimeout() {
        if (this._longPressDelayTimeout != null) {
            clearTimeout(this._longPressDelayTimeout);
            this._longPressDelayTimeout = null;
        }
    };
    _proto._cancelPressDelayTimeout = function _cancelPressDelayTimeout() {
        if (this._pressDelayTimeout != null) {
            clearTimeout(this._pressDelayTimeout);
            this._pressDelayTimeout = null;
        }
    };
    _proto._cancelPressOutDelayTimeout = function _cancelPressOutDelayTimeout() {
        if (this._pressOutDelayTimeout != null) {
            clearTimeout(this._pressOutDelayTimeout);
            this._pressOutDelayTimeout = null;
        }
    };
    Pressability.setLongPressDeactivationDistance = function setLongPressDeactivationDistance(distance) {
        longPressDeactivationDistance = distance;
    };
    return Pressability;
}();
function normalizeDelay(delay, min, fallback) {
    if (min === void 0) min = 0;
    if (fallback === void 0) fallback = 0;
    return Math.max(min, delay != null ? delay : fallback);
}
var getTouchFromPressEvent = function(event) {
    var _event_nativeEvent = event.nativeEvent, changedTouches = _event_nativeEvent.changedTouches, touches = _event_nativeEvent.touches;
    if (touches != null && touches.length > 0) {
        return touches[0];
    }
    if (changedTouches != null && changedTouches.length > 0) {
        return changedTouches[0];
    }
    return event.nativeEvent;
};
function convertPointerEventToMouseEvent(input) {
    var _input_nativeEvent = input.nativeEvent, clientX = _input_nativeEvent.clientX, clientY = _input_nativeEvent.clientY;
    return _extends._({}, input, {
        nativeEvent: {
            clientX: clientX,
            clientY: clientY,
            pageX: clientX,
            pageY: clientY,
            timestamp: input.timeStamp
        }
    });
}


}),
86402: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _ActivityIndicatorViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(38593), exports));
var _default = _ActivityIndicatorViewNativeComponent.default;


}),
86912: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79250));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Image = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57597));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * Very simple drop-in replacement for <Image> which supports nesting views.
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, View, ImageBackground, Text } from 'react-native';
 *
 * class DisplayAnImageBackground extends Component {
 *   render() {
 *     return (
 *       <ImageBackground
 *         style={{width: 50, height: 50}}
 *         source={{uri: 'https://reactnative.dev/img/opengraph.png'}}
 *       >
 *         <Text>React</Text>
 *       </ImageBackground>
 *     );
 *   }
 * }
 *
 * // App registration and rendering
 * AppRegistry.registerComponent('DisplayAnImageBackground', () => DisplayAnImageBackground);
 * ```
 */ var ImageBackground = /*#__PURE__*/ function(_React_Component) {
    _inherits._(ImageBackground, _React_Component);
    function ImageBackground() {
        var _this;
        _this = _React_Component.apply(this, arguments) || this, _this._viewRef = null, _this._captureRef = function(ref) {
            _this._viewRef = ref;
        };
        return _this;
    }
    var _proto = ImageBackground.prototype;
    _proto.setNativeProps = function setNativeProps(props) {
        // Work-around flow
        var viewRef = this._viewRef;
        if (viewRef) {
            viewRef.setNativeProps(props);
        }
    };
    _proto.render = function render() {
        var _this_props = this.props, children = _this_props.children, style = _this_props.style, imageStyle = _this_props.imageStyle, imageRef = _this_props.imageRef, importantForAccessibility = _this_props.importantForAccessibility, props = _object_without_properties_loose._(_this_props, [
            "children",
            "style",
            "imageStyle",
            "imageRef",
            "importantForAccessibility"
        ]);
        // $FlowFixMe[underconstrained-implicit-instantiation]
        var flattenedStyle = (0, _flattenStyle.default)(style);
        return /*#__PURE__*/ _react.createElement(_View.default, {
            accessibilityIgnoresInvertColors: true,
            importantForAccessibility: importantForAccessibility,
            style: style,
            ref: this._captureRef
        }, /*#__PURE__*/ _react.createElement(_Image.default, _extends._({}, props, {
            importantForAccessibility: importantForAccessibility,
            style: [
                _StyleSheet.default.absoluteFill,
                {
                    // Temporary Workaround:
                    // Current (imperfect yet) implementation of <Image> overwrites width and height styles
                    // (which is not quite correct), and these styles conflict with explicitly set styles
                    // of <ImageBackground> and with our internal layout model here.
                    // So, we have to proxy/reapply these styles explicitly for actual <Image> component.
                    // This workaround should be removed after implementing proper support of
                    // intrinsic content size of the <Image>.
                    // $FlowFixMe[prop-missing]
                    width: flattenedStyle == null ? void 0 : flattenedStyle.width,
                    // $FlowFixMe[prop-missing]
                    height: flattenedStyle == null ? void 0 : flattenedStyle.height
                },
                imageStyle
            ],
            ref: imageRef
        })), children);
    };
    return ImageBackground;
}(_react.Component);
module.exports = ImageBackground;


}),
87330: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _type_of = __webpack_require__(29936);
var infoLog = __webpack_require__(51515);
var invariant = __webpack_require__(27761);
var DEBUG = false;
/**
 * TaskQueue - A system for queueing and executing a mix of simple callbacks and
 * trees of dependent tasks based on Promises. No tasks are executed unless
 * `processNext` is called.
 *
 * `enqueue` takes a Task object with either a simple `run` callback, or a
 * `gen` function that returns a `Promise` and puts it in the queue.  If a gen
 * function is supplied, then the promise it returns will block execution of
 * tasks already in the queue until it resolves. This can be used to make sure
 * the first task is fully resolved (including asynchronous dependencies that
 * also schedule more tasks via `enqueue`) before starting on the next task.
 * The `onMoreTasks` constructor argument is used to inform the owner that an
 * async task has resolved and that the queue should be processed again.
 *
 * Note: Tasks are only actually executed with explicit calls to `processNext`.
 */ var TaskQueue = /*#__PURE__*/ function() {
    function TaskQueue(param) {
        var onMoreTasks = param.onMoreTasks;
        this._onMoreTasks = onMoreTasks;
        this._queueStack = [
            {
                tasks: [],
                popable: false
            }
        ];
    }
    var _proto = TaskQueue.prototype;
    /**
   * Add a task to the queue.  It is recommended to name your tasks for easier
   * async debugging. Tasks will not be executed until `processNext` is called
   * explicitly.
   */ _proto.enqueue = function enqueue(task) {
        this._getCurrentQueue().push(task);
    };
    _proto.enqueueTasks = function enqueueTasks(tasks) {
        var _this = this;
        tasks.forEach(function(task) {
            return _this.enqueue(task);
        });
    };
    _proto.cancelTasks = function cancelTasks(tasksToCancel) {
        // search through all tasks and remove them.
        this._queueStack = this._queueStack.map(function(queue) {
            return _extends._({}, queue, {
                tasks: queue.tasks.filter(function(task) {
                    return tasksToCancel.indexOf(task) === -1;
                })
            });
        }).filter(function(queue, idx) {
            return queue.tasks.length > 0 || idx === 0;
        });
    };
    /**
   * Check to see if `processNext` should be called.
   *
   * @returns {boolean} Returns true if there are tasks that are ready to be
   * processed with `processNext`, or returns false if there are no more tasks
   * to be processed right now, although there may be tasks in the queue that
   * are blocked by earlier `PromiseTask`s that haven't resolved yet.
   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are
   * tasks ready to run at that point.
   */ _proto.hasTasksToProcess = function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
    };
    /**
   * Executes the next task in the queue.
   */ _proto.processNext = function processNext() {
        var queue = this._getCurrentQueue();
        if (queue.length) {
            var task = queue.shift();
            try {
                if ((typeof task === "undefined" ? "undefined" : _type_of._(task)) === 'object' && task.gen) {
                    DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);
                    this._genPromise(task);
                } else if ((typeof task === "undefined" ? "undefined" : _type_of._(task)) === 'object' && task.run) {
                    DEBUG && infoLog('TaskQueue: run task ' + task.name);
                    task.run();
                } else {
                    invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
                    DEBUG && infoLog('TaskQueue: run anonymous task');
                    task();
                }
            } catch (e) {
                e.message = // $FlowFixMe[incompatible-type]
                'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
                throw e;
            }
        }
    };
    _proto._getCurrentQueue = function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];
        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
            this._queueStack.pop();
            DEBUG && infoLog('TaskQueue: popped queue: ', {
                stackIdx: stackIdx,
                queueStackSize: this._queueStack.length
            });
            return this._getCurrentQueue();
        } else {
            return queue.tasks;
        }
    };
    _proto._genPromise = function _genPromise(task) {
        var _this = this;
        // Each async task pushes it's own queue onto the queue stack. This
        // effectively defers execution of previously queued tasks until the promise
        // resolves, at which point we allow the new queue to be popped, which
        // happens once it is fully processed.
        this._queueStack.push({
            tasks: [],
            popable: false
        });
        var stackIdx = this._queueStack.length - 1;
        var stackItem = this._queueStack[stackIdx];
        DEBUG && infoLog('TaskQueue: push new queue: ', {
            stackIdx: stackIdx
        });
        DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);
        task.gen().then(function() {
            DEBUG && infoLog('TaskQueue: onThen for gen task ' + task.name, {
                stackIdx: stackIdx,
                queueStackSize: _this._queueStack.length
            });
            stackItem.popable = true;
            _this.hasTasksToProcess() && _this._onMoreTasks();
        })["catch"](function(ex) {
            setTimeout(function() {
                ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
                throw ex;
            }, 0);
        });
    };
    return TaskQueue;
}();
module.exports = TaskQueue;


}),
87644: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeSoundManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(69323), exports));
var _default = _NativeSoundManager.default;


}),
8818: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedModulo;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79333));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var AnimatedModulo = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedModulo, AnimatedWithChildren);
    function AnimatedModulo(a, modulus) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this;
        _this._a = a;
        _this._modulus = modulus;
        return _this;
    }
    var _proto = AnimatedModulo.prototype;
    _proto.__makeNative = function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getValue = function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
    };
    _proto.interpolate = function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
    };
    _proto.__attach = function __attach() {
        this._a.__addChild(this);
    };
    _proto.__detach = function __detach() {
        this._a.__removeChild(this);
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        return {
            type: 'modulus',
            input: this._a.__getNativeTag(),
            modulus: this._modulus
        };
    };
    return AnimatedModulo;
}(_AnimatedWithChildren.default);


}),
88682: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _RCTInputAccessoryViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(47546), exports));
var _default = _RCTInputAccessoryViewNativeComponent.default;


}),
89067: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('I18nManager');


}),
89546: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeAccessibilityInfo = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(36152), exports));
var _default = _NativeAccessibilityInfo.default;


}),
9082: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedDivision;
    }
}));
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79333));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(43705));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95338));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var AnimatedDivision = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedDivision, AnimatedWithChildren);
    function AnimatedDivision(a, b) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this, _this._warnedAboutDivideByZero = false;
        if (b === 0 || b instanceof _AnimatedNode.default && b.__getValue() === 0) {
            console.error('Detected potential division by zero in AnimatedDivision');
        }
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    var _proto = AnimatedDivision.prototype;
    _proto.__makeNative = function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        AnimatedWithChildren.prototype.__makeNative.call(this, platformConfig);
    };
    _proto.__getValue = function __getValue() {
        var a = this._a.__getValue();
        var b = this._b.__getValue();
        if (b === 0) {
            // Prevent spamming the console/LogBox
            if (!this._warnedAboutDivideByZero) {
                console.error('Detected division by zero in AnimatedDivision');
                this._warnedAboutDivideByZero = true;
            }
            // Passing infinity/NaN to Fabric will cause a native crash
            return 0;
        }
        this._warnedAboutDivideByZero = false;
        return a / b;
    };
    _proto.interpolate = function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
    };
    _proto.__attach = function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
    };
    _proto.__detach = function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        return {
            type: 'division',
            input: [
                this._a.__getNativeTag(),
                this._b.__getNativeTag()
            ]
        };
    };
    return AnimatedDivision;
}(_AnimatedWithChildren.default);


}),
90933: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var NativeModule = _TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
    getConstants: function() {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    },
    getHeight: function(callback) {
        NativeModule.getHeight(callback);
    },
    setNetworkActivityIndicatorVisible: function(visible) {
        NativeModule.setNetworkActivityIndicatorVisible(visible);
    },
    addListener: function(eventType) {
        NativeModule.addListener(eventType);
    },
    removeListeners: function(count) {
        NativeModule.removeListeners(count);
    },
    setStyle: function(statusBarStyle, animated) {
        NativeModule.setStyle(statusBarStyle, animated);
    },
    setHidden: function(hidden, withAnimation) {
        NativeModule.setHidden(hidden, withAnimation);
    }
};
var _default = NativeStatusBarManager;


}),
91429: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeAccessibilityManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(27890), exports));
var _default = _NativeAccessibilityManager.default;


}),
91769: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAndroidRippleForView;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83900));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _ViewNativeComponent = __webpack_require__(95606);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27761));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
function useAndroidRippleForView(rippleConfig, viewRef) {
    var _ref = rippleConfig != null ? rippleConfig : {}, color = _ref.color, borderless = _ref.borderless, radius = _ref.radius, foreground = _ref.foreground;
    return (0, _react.useMemo)(function() {
        if (_Platform.default.OS === 'android' && (color != null || borderless != null || radius != null)) {
            var processedColor = (0, _processColor.default)(color);
            (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
            var nativeRippleValue = {
                type: 'RippleAndroid',
                color: processedColor,
                borderless: borderless === true,
                rippleRadius: radius
            };
            return {
                viewProps: foreground === true ? {
                    nativeForegroundAndroid: nativeRippleValue
                } : {
                    nativeBackgroundAndroid: nativeRippleValue
                },
                onPressIn: function(event) {
                    var view = viewRef.current;
                    if (view != null) {
                        var _event_nativeEvent_locationX, _event_nativeEvent_locationY;
                        _ViewNativeComponent.Commands.hotspotUpdate(view, (_event_nativeEvent_locationX = event.nativeEvent.locationX) != null ? _event_nativeEvent_locationX : 0, (_event_nativeEvent_locationY = event.nativeEvent.locationY) != null ? _event_nativeEvent_locationY : 0);
                        _ViewNativeComponent.Commands.setPressed(view, true);
                    }
                },
                onPressMove: function(event) {
                    var view = viewRef.current;
                    if (view != null) {
                        var _event_nativeEvent_locationX, _event_nativeEvent_locationY;
                        _ViewNativeComponent.Commands.hotspotUpdate(view, (_event_nativeEvent_locationX = event.nativeEvent.locationX) != null ? _event_nativeEvent_locationX : 0, (_event_nativeEvent_locationY = event.nativeEvent.locationY) != null ? _event_nativeEvent_locationY : 0);
                    }
                },
                onPressOut: function(event) {
                    var view = viewRef.current;
                    if (view != null) {
                        _ViewNativeComponent.Commands.setPressed(view, false);
                    }
                }
            };
        }
        return null;
    }, [
        borderless,
        color,
        foreground,
        radius,
        viewRef
    ]);
}


}),
92288: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _SafeAreaView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(71069));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91145));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _useWindowDimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74594));
var _RCTInputAccessoryViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88682));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
/**
 * Note: iOS only
 *
 * A component which enables customization of the keyboard input accessory view.
 * The input accessory view is displayed above the keyboard whenever a TextInput
 * has focus. This component can be used to create custom toolbars.
 *
 * To use this component wrap your custom toolbar with the
 * InputAccessoryView component, and set a nativeID. Then, pass that nativeID
 * as the inputAccessoryViewID of whatever TextInput you desire. A simple
 * example:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';
 *
 * export default class UselessTextInput extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {text: 'Placeholder Text'};
 *   }
 *
 *   render() {
 *     const inputAccessoryViewID = "uniqueID";
 *     return (
 *       <View>
 *         <ScrollView keyboardDismissMode="interactive">
 *           <TextInput
 *             style={{
 *               padding: 10,
 *               paddingTop: 50,
 *             }}
 *             inputAccessoryViewID=inputAccessoryViewID
 *             onChangeText={text => this.setState({text})}
 *             value={this.state.text}
 *           />
 *         </ScrollView>
 *         <InputAccessoryView nativeID=inputAccessoryViewID>
 *           <Button
 *             onPress={() => this.setState({text: 'Placeholder Text'})}
 *             title="Reset Text"
 *           />
 *         </InputAccessoryView>
 *       </View>
 *     );
 *   }
 * }
 *
 * // skip this line if using Create React Native App
 * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);
 * ```
 *
 * This component can also be used to create sticky text inputs (text inputs
 * which are anchored to the top of the keyboard). To do this, wrap a
 * TextInput with the InputAccessoryView component, and don't set a nativeID.
 * For an example, look at InputAccessoryViewExample.js in RNTester.
 */ var InputAccessoryView = function(props) {
    var width = (0, _useWindowDimensions.default)().width;
    if (_Platform.default.OS === 'ios') {
        if (_react.Children.count(props.children) === 0) {
            return null;
        }
        return /*#__PURE__*/ _react.createElement(_RCTInputAccessoryViewNativeComponent.default, {
            style: [
                props.style,
                styles.container
            ],
            nativeID: props.nativeID,
            backgroundColor: props.backgroundColor
        }, /*#__PURE__*/ _react.createElement(_SafeAreaView.default, {
            style: [
                styles.safeAreaView,
                {
                    width: width
                }
            ]
        }, props.children));
    } else {
        console.warn('<InputAccessoryView> is only supported on iOS.');
        return null;
    }
};
var styles = _StyleSheet.default.create({
    container: {
        position: 'absolute'
    },
    safeAreaView: {
        flex: 1
    }
});
var _default = InputAccessoryView;


}),
92800: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeAppState = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(28308), exports));
var _default = _NativeAppState.default;


}),
93671: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return createAnimatedComponent;
    }
}));
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _sliced_to_array = __webpack_require__(21193);
var _composeStyles = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29384));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13493));
var _useAnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41201));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
function createAnimatedComponent(Component) {
    var AnimatedComponent = /*#__PURE__*/ _react.forwardRef(function(props, forwardedRef) {
        var _useAnimatedProps1 = _sliced_to_array._((0, _useAnimatedProps.default)(// $FlowFixMe[incompatible-call]
        props), 2), reducedProps = _useAnimatedProps1[0], callbackRef = _useAnimatedProps1[1];
        var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
        // Some components require explicit passthrough values for animation
        // to work properly. For example, if an animated component is
        // transformed and Pressable, onPress will not work after transform
        // without these passthrough values.
        // $FlowFixMe[prop-missing]
        var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues, style = reducedProps.style;
        var passthroughStyle = passthroughAnimatedPropExplicitValues == null ? void 0 : passthroughAnimatedPropExplicitValues.style;
        var mergedStyle = (0, _react.useMemo)(function() {
            return (0, _composeStyles.default)(style, passthroughStyle);
        }, [
            passthroughStyle,
            style
        ]);
        // NOTE: It is important that `passthroughAnimatedPropExplicitValues` is
        // spread after `reducedProps` but before `style`.
        return /*#__PURE__*/ _react.createElement(Component, _extends._({}, reducedProps, passthroughAnimatedPropExplicitValues, {
            style: mergedStyle,
            ref: ref
        }));
    });
    AnimatedComponent.displayName = "Animated(" + (Component.displayName || 'Anonymous') + ")";
    return AnimatedComponent;
}


}),
93917: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeLinkingManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(23289), exports));
var _default = _NativeLinkingManager.default;


}),
94363: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeVibration = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(79039), exports));
var _default = _NativeVibration.default;


}),
94891: (function () {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 

}),
95029: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var NativeComponentRegistry = __webpack_require__(72499);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(83089)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(22841)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'AndroidSwipeRefreshLayout';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidSwipeRefreshLayout',
    directEventTypes: {
        topRefresh: {
            registrationName: 'onRefresh'
        }
    },
    validAttributes: _extends._({
        enabled: true,
        colors: {
            process: __webpack_require__(36551)
        },
        progressBackgroundColor: {
            process: (__webpack_require__(28936)/* ["default"] */["default"])
        },
        size: true,
        progressViewOffset: true,
        refreshing: true
    }, ConditionallyIgnoredEventHandlers({
        onRefresh: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});
var Commands = {
    setNativeRefreshing: function(ref, value) {
        dispatchCommand(ref, "setNativeRefreshing", [
            value
        ]);
    }
};


}),
95300: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83514));
var NativeComponentRegistry = __webpack_require__(72499);
var nativeComponentName = 'RCTSafeAreaView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSafeAreaView',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
95338: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return AnimatedValue;
    },
    get flushValue () {
        return flushValue;
    }
});
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _InteractionManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(46846));
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66466));
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79333));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65129));
var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
function flushValue(rootNode) {
    // eslint-disable-next-line func-call-spacing
    var leaves = new Set();
    function findAnimatedStyles(node) {
        // $FlowFixMe[prop-missing]
        if (typeof node.update === 'function') {
            leaves.add(node);
        } else {
            node.__getChildren().forEach(findAnimatedStyles);
        }
    }
    findAnimatedStyles(rootNode);
    leaves.forEach(function(leaf) {
        return leaf.update();
    });
}
/**
 * Some operations are executed only on batch end, which is _mostly_ scheduled when
 * Animated component props change. For some of the changes which require immediate execution
 * (e.g. setValue), we create a separate batch in case none is scheduled.
 */ function _executeAsAnimatedBatch(id, operation) {
    NativeAnimatedAPI.setWaitingForIdentifier(id);
    operation();
    NativeAnimatedAPI.unsetWaitingForIdentifier(id);
}
var AnimatedValue = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedValue, AnimatedWithChildren);
    function AnimatedValue(value, config) {
        var _this;
        _this = AnimatedWithChildren.call(this) || this;
        if (typeof value !== 'number') {
            throw new Error('AnimatedValue: Attempting to set value to undefined');
        }
        _this._startingValue = _this._value = value;
        _this._offset = 0;
        _this._animation = null;
        if (config && config.useNativeDriver) {
            _this.__makeNative();
        }
        return _this;
    }
    var _proto = AnimatedValue.prototype;
    _proto.__detach = function __detach() {
        var _this = this;
        if (this.__isNative) {
            NativeAnimatedAPI.getValue(this.__getNativeTag(), function(value) {
                _this._value = value - _this._offset;
            });
        }
        this.stopAnimation();
        AnimatedWithChildren.prototype.__detach.call(this);
    };
    _proto.__getValue = function __getValue() {
        return this._value + this._offset;
    };
    /**
   * Directly set the value.  This will stop any animations running on the value
   * and update all the bound properties.
   *
   * See https://reactnative.dev/docs/animatedvalue#setvalue
   */ _proto.setValue = function setValue(value) {
        var _this = this;
        if (this._animation) {
            this._animation.stop();
            this._animation = null;
        }
        this._updateValue(value, !this.__isNative /* don't perform a flush for natively driven values */ );
        if (this.__isNative) {
            _executeAsAnimatedBatch(this.__getNativeTag().toString(), function() {
                return NativeAnimatedAPI.setAnimatedNodeValue(_this.__getNativeTag(), value);
            });
        }
    };
    /**
   * Sets an offset that is applied on top of whatever value is set, whether via
   * `setValue`, an animation, or `Animated.event`.  Useful for compensating
   * things like the start of a pan gesture.
   *
   * See https://reactnative.dev/docs/animatedvalue#setoffset
   */ _proto.setOffset = function setOffset(offset) {
        this._offset = offset;
        if (this.__isNative) {
            NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
    };
    /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvalue#flattenoffset
   */ _proto.flattenOffset = function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;
        if (this.__isNative) {
            NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
    };
    /**
   * Sets the offset value to the base value, and resets the base value to zero.
   * The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvalue#extractoffset
   */ _proto.extractOffset = function extractOffset() {
        this._offset += this._value;
        this._value = 0;
        if (this.__isNative) {
            NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
    };
    /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   *
   * See https://reactnative.dev/docs/animatedvalue#stopanimation
   */ _proto.stopAnimation = function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        if (callback) {
            if (this.__isNative) {
                NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);
            } else {
                callback(this.__getValue());
            }
        }
    };
    /**
   * Stops any animation and resets the value to its original.
   *
   * See https://reactnative.dev/docs/animatedvalue#resetanimation
   */ _proto.resetAnimation = function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
        if (this.__isNative) {
            NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);
        }
    };
    _proto.__onAnimatedValueUpdateReceived = function __onAnimatedValueUpdateReceived(value) {
        this._updateValue(value, false);
    };
    /**
   * Interpolates the value before updating the property, e.g. mapping 0-1 to
   * 0-10.
   */ _proto.interpolate = function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
    };
    /**
   * Typically only used internally, but could be used by a custom Animation
   * class.
   *
   * See https://reactnative.dev/docs/animatedvalue#animate
   */ _proto.animate = function animate(animation, callback) {
        var _this = this;
        var handle = null;
        if (animation.__isInteraction) {
            handle = _InteractionManager.default.createInteractionHandle();
        }
        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function(value) {
            // Natively driven animations will never call into that callback, therefore we can always
            // pass flush = true to allow the updated value to propagate to native with setNativeProps
            _this._updateValue(value, true);
        }, function(result) {
            _this._animation = null;
            if (handle !== null) {
                _InteractionManager.default.clearInteractionHandle(handle);
            }
            callback && callback(result);
        }, previousAnimation, this);
    };
    /**
   * Typically only used internally.
   */ _proto.stopTracking = function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
    };
    /**
   * Typically only used internally.
   */ _proto.track = function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
        // Make sure that the tracking animation starts executing
        this._tracking && this._tracking.update();
    };
    _proto._updateValue = function _updateValue(value, flush) {
        if (value === undefined) {
            throw new Error('AnimatedValue: Attempting to set value to undefined');
        }
        this._value = value;
        if (flush) {
            flushValue(this);
        }
        this.__callListeners(this.__getValue());
    };
    _proto.__getNativeConfig = function __getNativeConfig() {
        return {
            type: 'value',
            value: this._value,
            offset: this._offset
        };
    };
    return AnimatedValue;
}(_AnimatedWithChildren.default);


}),
96689: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _define_property = __webpack_require__(5303);
var _inherits = __webpack_require__(85428);
var _interop_require_default = __webpack_require__(48810);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31043));
__webpack_require__(74765);
var _ModalInjection = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79532));
var _NativeModalManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76257));
var _RCTModalHostViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13972));
var _virtualizedlists = __webpack_require__(83712);
var ScrollView = __webpack_require__(11418);
var View = __webpack_require__(8198);
var AppContainer = __webpack_require__(26167);
var I18nManager = __webpack_require__(28141);
var RootTagContext = (__webpack_require__(28360)/* .RootTagContext */.RootTagContext);
var StyleSheet = __webpack_require__(91145);
var Platform = __webpack_require__(29861);
var React = __webpack_require__(41845);
var ModalEventEmitter = Platform.OS === 'ios' && _NativeModalManager.default != null ? new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
// If you want to use the native module on other platforms, please remove this condition and test its behavior
Platform.OS !== 'ios' ? null : _NativeModalManager.default) : null;
/**
 * The Modal component is a simple way to present content above an enclosing view.
 *
 * See https://reactnative.dev/docs/modal
 */ // In order to route onDismiss callbacks, we need to uniquely identifier each
// <Modal> on screen. There can be different ones, either nested or as siblings.
// We cannot pass the onDismiss callback to native as the view will be
// destroyed before the callback is fired.
var uniqueModalIdentifier = 0;
function confirmProps(props) {
    if (false) {}
}
// Create a state to track whether the Modal is rendering or not.
// This is the only prop that controls whether the modal is rendered or not.
var Modal = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(Modal, _React_Component);
    function Modal(props) {
        var _this;
        _this = _React_Component.call(this, props) || this;
        if (false) {}
        _this._identifier = uniqueModalIdentifier++;
        _this.state = {
            isRendered: props.visible === true
        };
        return _this;
    }
    var _proto = Modal.prototype;
    _proto.componentDidMount = function componentDidMount() {
        var _this = this;
        // 'modalDismissed' is for the old renderer in iOS only
        if (ModalEventEmitter) {
            this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function(event) {
                _this.setState({
                    isRendered: false
                }, function() {
                    if (event.modalID === _this._identifier && _this.props.onDismiss) {
                        _this.props.onDismiss();
                    }
                });
            });
        }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        if (this._eventSubscription) {
            this._eventSubscription.remove();
        }
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (prevProps.visible === false && this.props.visible === true) {
            this.setState({
                isRendered: true
            });
        }
        if (false) {}
    };
    // Helper function to encapsulate platform specific logic to show or not the Modal.
    _proto._shouldShowModal = function _shouldShowModal() {
        if (Platform.OS === 'ios') {
            return this.props.visible === true || this.state.isRendered === true;
        }
        return this.props.visible === true;
    };
    _proto.render = function render() {
        var _this = this;
        if (!this._shouldShowModal()) {
            return null;
        }
        var containerStyles = {
            backgroundColor: this.props.transparent === true ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType || 'none';
        var presentationStyle = this.props.presentationStyle;
        if (!presentationStyle) {
            presentationStyle = 'fullScreen';
            if (this.props.transparent === true) {
                presentationStyle = 'overFullScreen';
            }
        }
        var innerChildren =  false ? /*#__PURE__*/ 0 : this.props.children;
        var onDismiss = function() {
            // OnDismiss is implemented on iOS only.
            if (Platform.OS === 'ios') {
                _this.setState({
                    isRendered: false
                }, function() {
                    if (_this.props.onDismiss) {
                        _this.props.onDismiss();
                    }
                });
            }
        };
        return /*#__PURE__*/ React.createElement(_RCTModalHostViewNativeComponent.default, {
            animationType: animationType,
            presentationStyle: presentationStyle,
            transparent: this.props.transparent,
            hardwareAccelerated: this.props.hardwareAccelerated,
            onRequestClose: this.props.onRequestClose,
            onShow: this.props.onShow,
            onDismiss: onDismiss,
            visible: this.props.visible,
            statusBarTranslucent: this.props.statusBarTranslucent,
            identifier: this._identifier,
            style: styles.modal,
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            onStartShouldSetResponder: this._shouldSetResponder,
            supportedOrientations: this.props.supportedOrientations,
            onOrientationChange: this.props.onOrientationChange,
            testID: this.props.testID
        }, /*#__PURE__*/ React.createElement(_virtualizedlists.VirtualizedListContextResetter, null, /*#__PURE__*/ React.createElement(ScrollView.Context.Provider, {
            value: null
        }, /*#__PURE__*/ React.createElement(View, {
            style: [
                styles.container,
                containerStyles
            ],
            collapsable: false
        }, innerChildren))));
    };
    // We don't want any responder events bubbling out of the modal.
    _proto._shouldSetResponder = function _shouldSetResponder() {
        return true;
    };
    return Modal;
}(React.Component);
Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
};
Modal.contextType = RootTagContext;
var side = I18nManager.getConstants().isRTL ? 'right' : 'left';
var _obj;
var styles = StyleSheet.create({
    modal: {
        position: 'absolute'
    },
    container: (_obj = {}, /* $FlowFixMe[invalid-computed-prop] (>=0.111.0 site=react_native_fb) This
     * comment suppresses an error found when Flow v0.111 was deployed. To see
     * the error, delete this comment and run Flow. */ _define_property._(_obj, side, 0), _define_property._(_obj, "top", 0), _define_property._(_obj, "flex", 1), _obj)
});
var _ModalInjection_unstable_Modal;
var ExportedModal = (_ModalInjection_unstable_Modal = _ModalInjection.default.unstable_Modal) != null ? _ModalInjection_unstable_Modal : Modal;
module.exports = ExportedModal;


}),
96800: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(38504);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(68493));
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
        decelerationRate: true,
        disableIntervalMomentum: true,
        maintainVisibleContentPosition: true,
        endFillColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        fadingEdgeLength: true,
        nestedScrollEnabled: true,
        overScrollMode: true,
        pagingEnabled: true,
        persistentScrollbar: true,
        horizontal: true,
        enableSyncOnScroll: true,
        scrollEnabled: true,
        scrollEventThrottle: true,
        scrollPerfTag: true,
        sendMomentumEvents: true,
        showsHorizontalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToStart: true,
        snapToOffsets: true,
        contentOffset: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        borderRadius: true,
        borderStyle: true,
        borderRightColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderBottomColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderTopLeftRadius: true,
        borderTopColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        removeClippedSubviews: true,
        borderTopRightRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        pointerEvents: true
    }
};
var AndroidHorizontalScrollViewNativeComponent = _NativeComponentRegistry.get('AndroidHorizontalScrollView', function() {
    return __INTERNAL_VIEW_CONFIG;
});
var _default = AndroidHorizontalScrollViewNativeComponent;


}),
98117: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(30478);
var _interop_require_default = __webpack_require__(48810);
var _NativeImageLoaderAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(36408), exports));
var _default = _NativeImageLoaderAndroid.default;


}),
98425: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ // This function dismisses the currently-open keyboard, if any.

var TextInputState = __webpack_require__(72810);
function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedInput());
}
module.exports = dismissKeyboard;


}),
98492: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(38504);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(66030));
var _default = _TurboModuleRegistry.get('IntentAndroid');


}),
98620: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _inherits = __webpack_require__(85428);
var _interop_require_wildcard = __webpack_require__(38504);
var _object_without_properties_loose = __webpack_require__(35684);
var _AndroidSwipeRefreshLayoutNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(39104));
var _PullToRefreshViewNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(37330));
var Platform = __webpack_require__(29861);
var React = __webpack_require__(41845);
/**
 * This component is used inside a ScrollView or ListView to add pull to refresh
 * functionality. When the ScrollView is at `scrollY: 0`, swiping down
 * triggers an `onRefresh` event.
 *
 * ### Usage example
 *
 * ``` js
 * class RefreshableList extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {
 *       refreshing: false,
 *     };
 *   }
 *
 *   _onRefresh() {
 *     this.setState({refreshing: true});
 *     fetchData().then(() => {
 *       this.setState({refreshing: false});
 *     });
 *   }
 *
 *   render() {
 *     return (
 *       <ListView
 *         refreshControl={
 *           <RefreshControl
 *             refreshing={this.state.refreshing}
 *             onRefresh={this._onRefresh.bind(this)}
 *           />
 *         }
 *         ...
 *       >
 *       ...
 *       </ListView>
 *     );
 *   }
 *   ...
 * }
 * ```
 *
 * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true
 * in the `onRefresh` function otherwise the refresh indicator will stop immediately.
 */ var RefreshControl = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(RefreshControl, _React_Component);
    function RefreshControl() {
        var _this;
        _this = _React_Component.apply(this, arguments) || this, _this._lastNativeRefreshing = false, _this._onRefresh = function() {
            _this._lastNativeRefreshing = true;
            // $FlowFixMe[unused-promise]
            _this.props.onRefresh && _this.props.onRefresh();
            // The native component will start refreshing so force an update to
            // make sure it stays in sync with the js component.
            _this.forceUpdate();
        }, _this._setNativeRef = function(ref) {
            _this._nativeRef = ref;
        };
        return _this;
    }
    var _proto = RefreshControl.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this._lastNativeRefreshing = this.props.refreshing;
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        // RefreshControl is a controlled component so if the native refreshing
        // value doesn't match the current js refreshing prop update it to
        // the js value.
        if (this.props.refreshing !== prevProps.refreshing) {
            this._lastNativeRefreshing = this.props.refreshing;
        } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {
            if (Platform.OS === 'android') {
                _AndroidSwipeRefreshLayoutNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
            } else {
                _PullToRefreshViewNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
            }
            this._lastNativeRefreshing = this.props.refreshing;
        }
    };
    _proto.render = function render() {
        if (Platform.OS === 'ios') {
            var _this_props = this.props, enabled = _this_props.enabled, colors = _this_props.colors, progressBackgroundColor = _this_props.progressBackgroundColor, size = _this_props.size, props = _object_without_properties_loose._(_this_props, [
                "enabled",
                "colors",
                "progressBackgroundColor",
                "size"
            ]);
            return /*#__PURE__*/ React.createElement(_PullToRefreshViewNativeComponent.default, _extends._({}, props, {
                ref: this._setNativeRef,
                onRefresh: this._onRefresh
            }));
        } else {
            var _this_props1 = this.props, tintColor = _this_props1.tintColor, titleColor = _this_props1.titleColor, title = _this_props1.title, props1 = _object_without_properties_loose._(_this_props1, [
                "tintColor",
                "titleColor",
                "title"
            ]);
            return /*#__PURE__*/ React.createElement(_AndroidSwipeRefreshLayoutNativeComponent.default, _extends._({}, props1, {
                ref: this._setNativeRef,
                onRefresh: this._onRefresh
            }));
        }
    };
    return RefreshControl;
}(React.Component);
module.exports = RefreshControl;


}),
99475: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get allowInterpolationParam () {
        return allowInterpolationParam;
    },
    get allowStyleProp () {
        return allowStyleProp;
    },
    get allowTransformProp () {
        return allowTransformProp;
    },
    get isSupportedColorStyleProp () {
        return isSupportedColorStyleProp;
    },
    get isSupportedInterpolationParam () {
        return isSupportedInterpolationParam;
    },
    get isSupportedStyleProp () {
        return isSupportedStyleProp;
    },
    get isSupportedTransformProp () {
        return isSupportedTransformProp;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_wildcard = __webpack_require__(38504);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(26044));
var SUPPORTED_COLOR_STYLES = {
    backgroundColor: true,
    borderBottomColor: true,
    borderColor: true,
    borderEndColor: true,
    borderLeftColor: true,
    borderRightColor: true,
    borderStartColor: true,
    borderTopColor: true,
    color: true,
    tintColor: true
};
var SUPPORTED_STYLES = _extends._({}, SUPPORTED_COLOR_STYLES, {
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    elevation: true,
    opacity: true,
    transform: true,
    zIndex: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
});
var SUPPORTED_TRANSFORMS = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    rotateZ: true,
    perspective: true,
    skewX: true,
    skewY: true,
    matrix: _ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform()
};
var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
};
function allowInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
}
function allowStyleProp(prop) {
    SUPPORTED_STYLES[prop] = true;
}
function allowTransformProp(prop) {
    SUPPORTED_TRANSFORMS[prop] = true;
}
function isSupportedColorStyleProp(prop) {
    return SUPPORTED_COLOR_STYLES[prop] === true;
}
function isSupportedInterpolationParam(param) {
    return SUPPORTED_INTERPOLATION_PARAMS[param] === true;
}
function isSupportedStyleProp(prop) {
    return SUPPORTED_STYLES[prop] === true;
}
function isSupportedTransformProp(prop) {
    return SUPPORTED_TRANSFORMS[prop] === true;
}


}),
99614: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get HScrollContentViewNativeComponent () {
        return HScrollContentViewNativeComponent;
    },
    get HScrollViewNativeComponent () {
        return HScrollViewNativeComponent;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _sliced_to_array = __webpack_require__(21193);
var _AndroidHorizontalScrollViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(96800));
var _ScrollContentViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18002));
var _ScrollViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56852));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29861));
var _AndroidHorizontalScrollContentViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73465));
var _useSyncOnScroll = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57440));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
var HScrollViewNativeComponentForPlatform = _Platform.default.OS === 'android' ? _AndroidHorizontalScrollViewNativeComponent.default : _ScrollViewNativeComponent.default;
var HScrollViewNativeComponent = /*#__PURE__*/ (0, _react.forwardRef)(function HScrollViewNativeComponent(props, ref) {
    var _useSyncOnScroll1 = _sliced_to_array._((0, _useSyncOnScroll.default)(ref), 2), componentRef = _useSyncOnScroll1[0], enableSyncOnScroll = _useSyncOnScroll1[1];
    // NOTE: When `useSyncOnScroll` triggers an update, `props` will not have
    // changed. Notably, `props.children` will be the same, allowing React to
    // bail out during reconciliation.
    return /*#__PURE__*/ _react.createElement(HScrollViewNativeComponentForPlatform, _extends._({}, props, {
        ref: componentRef,
        enableSyncOnScroll: enableSyncOnScroll
    }));
});
var HScrollContentViewNativeComponent = _Platform.default.OS === 'android' ? _AndroidHorizontalScrollContentViewNativeComponent.default : _ScrollContentViewNativeComponent.default;


}),
9966: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PressabilityDebugView () {
        return PressabilityDebugView;
    },
    get isEnabled () {
        return isEnabled;
    },
    get setEnabled () {
        return setEnabled;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8198));
var _normalizeColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89103));
var _Rect = __webpack_require__(46110);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41845));
function PressabilityDebugView(props) {
    if (false) { var baseColor, _hitSlop_left, _hitSlop_right, normalizedColor, _hitSlop_bottom, hitSlop, _hitSlop_top }
    return null;
}
var isDebugEnabled = false;
function isEnabled() {
    if (false) {}
    return false;
}
function setEnabled(value) {
    if (false) {}
}


}),
99663: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getImageSourcesFromImageProps", ({
    enumerable: true,
    get: function() {
        return getImageSourcesFromImageProps;
    }
}));
var _interop_require_default = __webpack_require__(48810);
var _sliced_to_array = __webpack_require__(21193);
var _resolveAssetSource = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61558));
function getImageSourcesFromImageProps(imageProps) {
    var source = (0, _resolveAssetSource.default)(imageProps.source);
    var sources;
    var crossOrigin = imageProps.crossOrigin, referrerPolicy = imageProps.referrerPolicy, src = imageProps.src, srcSet = imageProps.srcSet, width = imageProps.width, height = imageProps.height;
    var headers = {};
    if (crossOrigin === 'use-credentials') {
        headers['Access-Control-Allow-Credentials'] = 'true';
    }
    if (referrerPolicy != null) {
        headers['Referrer-Policy'] = referrerPolicy;
    }
    if (srcSet != null) {
        var sourceList = [];
        var srcSetList = srcSet.split(', ');
        // `src` prop should be used with default scale if `srcSet` does not have 1x scale.
        var shouldUseSrcForDefaultScale = true;
        srcSetList.forEach(function(imageSrc) {
            var _imageSrc_split = _sliced_to_array._(imageSrc.split(' '), 2), uri = _imageSrc_split[0], tmp = _imageSrc_split[1], xScale = tmp === void 0 ? '1x' : tmp;
            if (!xScale.endsWith('x')) {
                console.warn('The provided format for scale is not supported yet. Please use scales like 1x, 2x, etc.');
            } else {
                var scale = parseInt(xScale.split('x')[0], 10);
                if (!isNaN(scale)) {
                    // 1x scale is provided in `srcSet` prop so ignore the `src` prop if provided.
                    shouldUseSrcForDefaultScale = scale === 1 ? false : shouldUseSrcForDefaultScale;
                    sourceList.push({
                        headers: headers,
                        scale: scale,
                        uri: uri,
                        width: width,
                        height: height
                    });
                }
            }
        });
        if (shouldUseSrcForDefaultScale && src != null) {
            sourceList.push({
                headers: headers,
                scale: 1,
                uri: src,
                width: width,
                height: height
            });
        }
        if (sourceList.length === 0) {
            console.warn('The provided value for srcSet is not valid.');
        }
        sources = sourceList;
    } else if (src != null) {
        sources = [
            {
                uri: src,
                headers: headers,
                width: width,
                height: height
            }
        ];
    } else {
        sources = source;
    }
    return sources;
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_index_js.chunk.bundle.map?platform=android/* RCSSB */eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYXNoIjoiNjE1ZWViOGMyMGFiN2NmYjI1ZjU3NTQ1ODc3OWE3ZTFiOTU5YzY4NmRiODk5ZGM4YjQyYjI4ZGM5ZDQ4Y2ZkZiIsImlhdCI6MTc0ODkzMDgzMH0.XemSlMVelWf2Z8cOWbIBX51eMesUI-cea0sS-AePmQ2lFbvOnuoCJ3RKw96KnH4WQyHyGwqvbrVlGicqrCLNwf2kPL4yffnroE-Jwvy1Pk6-ZLX_9IsaSXsNzbocY4IaY6mqqIIFL7ucLWw7zjcXtCVsWhnzM3u3c5r_kBfRkcP7NMDCQ99HrX0dCA2J_T-gwBJzuqql6bH3YdwM7mpgpTlICdO4WowD9iHEvsMJrEbHSHIwY3oaVk4gDeCB2BE6APrUG_HQnUJgmaKDHYAZ0YI2KeeGk8DqAcRhHuu2kfnBY7_mJgnhG4mA8WxfpPLwNPNNNtCvq6fniJJ2IHVOfg                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              