(self["webpackChunksas_auth"] = self["webpackChunksas_auth"] || []).push([["vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-155e24"], {
27254: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(29936);
var logListeners;
function unstable_setLogListeners(listeners) {
    logListeners = listeners;
}
/*
 * @returns {bool} true if different, false if equal
 */ var deepDiffer = function deepDiffer1(one, two, maxDepthOrOptions, maybeOptions) {
    if (maxDepthOrOptions === void 0) maxDepthOrOptions = -1;
    var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
    var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;
    if (maxDepth === 0) {
        return true;
    }
    if (one === two) {
        // Short circuit on identical object references instead of traversing them.
        return false;
    }
    if (typeof one === 'function' && typeof two === 'function') {
        // We consider all functions equal unless explicitly configured otherwise
        var unsafelyIgnoreFunctions = options == null ? void 0 : options.unsafelyIgnoreFunctions;
        if (unsafelyIgnoreFunctions == null) {
            if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
                logListeners.onDifferentFunctionsIgnored(one.name, two.name);
            }
            unsafelyIgnoreFunctions = true;
        }
        return !unsafelyIgnoreFunctions;
    }
    if ((typeof one === "undefined" ? "undefined" : _type_of._(one)) !== 'object' || one === null) {
        // Primitives can be directly compared
        return one !== two;
    }
    if ((typeof two === "undefined" ? "undefined" : _type_of._(two)) !== 'object' || two === null) {
        // We know they are different because the previous case would have triggered
        // otherwise.
        return true;
    }
    if (one.constructor !== two.constructor) {
        return true;
    }
    if (Array.isArray(one)) {
        // We know two is also an array because the constructors are equal
        var len = one.length;
        if (two.length !== len) {
            return true;
        }
        for(var ii = 0; ii < len; ii++){
            if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
                return true;
            }
        }
    } else {
        for(var key in one){
            if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
                return true;
            }
        }
        for(var twoKey in two){
            // The only case we haven't checked yet is keys that are in two but aren't
            // in one, which means they are different.
            if (one[twoKey] === undefined && two[twoKey] !== undefined) {
                return true;
            }
        }
    }
    return false;
};
deepDiffer.unstable_setLogListeners = unstable_setLogListeners;
module.exports = deepDiffer;


}),
37862: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _extends = __webpack_require__(87383);
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(68493));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var _RCTTextInputViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49436));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = _extends._({
    uiViewClassName: 'RCTSinglelineTextInputView'
}, _RCTTextInputViewConfig.default);
var SinglelineTextInputNativeComponent = _NativeComponentRegistry.get('RCTSinglelineTextInputView', function() {
    return __INTERNAL_VIEW_CONFIG;
});
var _default = SinglelineTextInputNativeComponent;


}),
49436: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(87383);
var _ViewConfigIgnore = __webpack_require__(89529);
var RCTTextInputViewConfig = {
    bubblingEventTypes: {
        topBlur: {
            phasedRegistrationNames: {
                bubbled: 'onBlur',
                captured: 'onBlurCapture'
            }
        },
        topChange: {
            phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture'
            }
        },
        topEndEditing: {
            phasedRegistrationNames: {
                bubbled: 'onEndEditing',
                captured: 'onEndEditingCapture'
            }
        },
        topFocus: {
            phasedRegistrationNames: {
                bubbled: 'onFocus',
                captured: 'onFocusCapture'
            }
        },
        topKeyPress: {
            phasedRegistrationNames: {
                bubbled: 'onKeyPress',
                captured: 'onKeyPressCapture'
            }
        },
        topSubmitEditing: {
            phasedRegistrationNames: {
                bubbled: 'onSubmitEditing',
                captured: 'onSubmitEditingCapture'
            }
        },
        topTouchCancel: {
            phasedRegistrationNames: {
                bubbled: 'onTouchCancel',
                captured: 'onTouchCancelCapture'
            }
        },
        topTouchEnd: {
            phasedRegistrationNames: {
                bubbled: 'onTouchEnd',
                captured: 'onTouchEndCapture'
            }
        },
        topTouchMove: {
            phasedRegistrationNames: {
                bubbled: 'onTouchMove',
                captured: 'onTouchMoveCapture'
            }
        }
    },
    directEventTypes: {
        topScroll: {
            registrationName: 'onScroll'
        },
        topSelectionChange: {
            registrationName: 'onSelectionChange'
        },
        topContentSizeChange: {
            registrationName: 'onContentSizeChange'
        },
        topChangeSync: {
            registrationName: 'onChangeSync'
        },
        topKeyPressSync: {
            registrationName: 'onKeyPressSync'
        }
    },
    validAttributes: _extends._({
        dynamicTypeRamp: true,
        fontSize: true,
        fontWeight: true,
        fontVariant: true,
        // flowlint-next-line untyped-import:off
        textShadowOffset: {
            diff: __webpack_require__(26703)
        },
        allowFontScaling: true,
        fontStyle: true,
        textTransform: true,
        textAlign: true,
        fontFamily: true,
        lineBreakModeIOS: true,
        lineHeight: true,
        isHighlighted: true,
        writingDirection: true,
        textDecorationLine: true,
        textShadowRadius: true,
        letterSpacing: true,
        textDecorationStyle: true,
        textDecorationColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        color: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        maxFontSizeMultiplier: true,
        textShadowColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        editable: true,
        inputAccessoryViewID: true,
        caretHidden: true,
        enablesReturnKeyAutomatically: true,
        placeholderTextColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        clearButtonMode: true,
        keyboardType: true,
        selection: true,
        returnKeyType: true,
        submitBehavior: true,
        mostRecentEventCount: true,
        scrollEnabled: true,
        selectionColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        contextMenuHidden: true,
        secureTextEntry: true,
        placeholder: true,
        autoCorrect: true,
        multiline: true,
        textContentType: true,
        maxLength: true,
        autoCapitalize: true,
        keyboardAppearance: true,
        passwordRules: true,
        spellCheck: true,
        selectTextOnFocus: true,
        text: true,
        clearTextOnFocus: true,
        showSoftInputOnFocus: true,
        autoFocus: true,
        lineBreakStrategyIOS: true,
        smartInsertDelete: true
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onChange: true,
        onSelectionChange: true,
        onContentSizeChange: true,
        onScroll: true,
        onChangeSync: true,
        onKeyPressSync: true
    }))
};
module.exports = RCTTextInputViewConfig;


}),
61379: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(48810);
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35180));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89169));
/**
 * This is a function exposed to the React Renderer that can be used by the
 * pre-Fabric renderer to emit accessibility events to pre-Fabric nodes.
 */ function legacySendAccessibilityEvent(reactTag, eventType) {
    if (eventType === 'focus') {
        (0, _nullthrows.default)(_UIManager.default.sendAccessibilityEvent)(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewFocused);
    }
    if (eventType === 'click') {
        (0, _nullthrows.default)(_UIManager.default.sendAccessibilityEvent)(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewClicked);
    }
}
module.exports = legacySendAccessibilityEvent;


}),
72810: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // This class is responsible for coordinating the "focused" state for
// TextInputs. All calls relating to the keyboard should be funneled
// through here.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _AndroidTextInputNativeComponent = __webpack_require__(8833);
var _RCTSingelineTextInputNativeComponent = __webpack_require__(37862);
var findNodeHandle = (__webpack_require__(14288)/* .findNodeHandle */.findNodeHandle);
var Platform = __webpack_require__(29861);
var React = __webpack_require__(41845);
var currentlyFocusedInputRef = null;
var inputs = new Set();
function currentlyFocusedInput() {
    return currentlyFocusedInputRef;
}
/**
 * Returns the ID of the currently focused text field, if one exists
 * If no text field is focused it returns null
 */ function currentlyFocusedField() {
    if (false) {}
    return findNodeHandle(currentlyFocusedInputRef);
}
function focusInput(textField) {
    if (currentlyFocusedInputRef !== textField && textField != null) {
        currentlyFocusedInputRef = textField;
    }
}
function blurInput(textField) {
    if (currentlyFocusedInputRef === textField && textField != null) {
        currentlyFocusedInputRef = null;
    }
}
function focusField(textFieldID) {
    if (false) {}
    return;
}
function blurField(textFieldID) {
    if (false) {}
    return;
}
/**
 * @param {number} TextInputID id of the text field to focus
 * Focuses the specified text field
 * noop if the text field was already focused or if the field is not editable
 */ function focusTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    if (textField != null) {
        var // $FlowFixMe - `currentProps` is missing in `NativeMethods`
        _textField_currentProps;
        var fieldCanBeFocused = currentlyFocusedInputRef !== textField && ((_textField_currentProps = textField.currentProps) == null ? void 0 : _textField_currentProps.editable) !== false;
        if (!fieldCanBeFocused) {
            return;
        }
        focusInput(textField);
        if (Platform.OS === 'ios') {
            // This isn't necessarily a single line text input
            // But commands don't actually care as long as the thing being passed in
            // actually has a command with that name. So this should work with single
            // and multiline text inputs. Ideally we'll merge them into one component
            // in the future.
            _RCTSingelineTextInputNativeComponent.Commands.focus(textField);
        } else if (Platform.OS === 'android') {
            _AndroidTextInputNativeComponent.Commands.focus(textField);
        }
    }
}
/**
 * @param {number} textFieldID id of the text field to unfocus
 * Unfocuses the specified text field
 * noop if it wasn't focused
 */ function blurTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    if (currentlyFocusedInputRef === textField && textField != null) {
        blurInput(textField);
        if (Platform.OS === 'ios') {
            // This isn't necessarily a single line text input
            // But commands don't actually care as long as the thing being passed in
            // actually has a command with that name. So this should work with single
            // and multiline text inputs. Ideally we'll merge them into one component
            // in the future.
            _RCTSingelineTextInputNativeComponent.Commands.blur(textField);
        } else if (Platform.OS === 'android') {
            _AndroidTextInputNativeComponent.Commands.blur(textField);
        }
    }
}
function registerInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    inputs.add(textField);
}
function unregisterInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    inputs["delete"](textField);
}
function isTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return false;
    }
    return inputs.has(textField);
}
module.exports = {
    currentlyFocusedInput: currentlyFocusedInput,
    focusInput: focusInput,
    blurInput: blurInput,
    currentlyFocusedField: currentlyFocusedField,
    focusField: focusField,
    blurField: blurField,
    focusTextInput: focusTextInput,
    blurTextInput: blurTextInput,
    registerInput: registerInput,
    unregisterInput: unregisterInput,
    isTextInput: isTextInput
};


}),
8833: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(48810);
var _interop_require_wildcard = __webpack_require__(38504);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(68493));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5739));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidTextInput',
    bubblingEventTypes: {
        topBlur: {
            phasedRegistrationNames: {
                bubbled: 'onBlur',
                captured: 'onBlurCapture'
            }
        },
        topEndEditing: {
            phasedRegistrationNames: {
                bubbled: 'onEndEditing',
                captured: 'onEndEditingCapture'
            }
        },
        topFocus: {
            phasedRegistrationNames: {
                bubbled: 'onFocus',
                captured: 'onFocusCapture'
            }
        },
        topKeyPress: {
            phasedRegistrationNames: {
                bubbled: 'onKeyPress',
                captured: 'onKeyPressCapture'
            }
        },
        topSubmitEditing: {
            phasedRegistrationNames: {
                bubbled: 'onSubmitEditing',
                captured: 'onSubmitEditingCapture'
            }
        }
    },
    directEventTypes: {
        topScroll: {
            registrationName: 'onScroll'
        }
    },
    validAttributes: {
        maxFontSizeMultiplier: true,
        adjustsFontSizeToFit: true,
        minimumFontScale: true,
        autoFocus: true,
        placeholder: true,
        inlineImagePadding: true,
        contextMenuHidden: true,
        textShadowColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        maxLength: true,
        selectTextOnFocus: true,
        textShadowRadius: true,
        underlineColorAndroid: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        textDecorationLine: true,
        submitBehavior: true,
        textAlignVertical: true,
        fontStyle: true,
        textShadowOffset: true,
        selectionColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        selectionHandleColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        placeholderTextColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        importantForAutofill: true,
        lineHeight: true,
        textTransform: true,
        returnKeyType: true,
        keyboardType: true,
        multiline: true,
        color: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        autoComplete: true,
        numberOfLines: true,
        letterSpacing: true,
        returnKeyLabel: true,
        fontSize: true,
        onKeyPress: true,
        cursorColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        text: true,
        showSoftInputOnFocus: true,
        textAlign: true,
        autoCapitalize: true,
        autoCorrect: true,
        caretHidden: true,
        secureTextEntry: true,
        textBreakStrategy: true,
        onScroll: true,
        onContentSizeChange: true,
        disableFullscreenUI: true,
        includeFontPadding: true,
        fontWeight: true,
        fontFamily: true,
        allowFontScaling: true,
        onSelectionChange: true,
        mostRecentEventCount: true,
        inlineImageLeft: true,
        editable: true,
        fontVariant: true,
        borderBottomRightRadius: true,
        borderBottomColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderRadius: true,
        borderRightColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderTopRightRadius: true,
        borderStyle: true,
        borderBottomLeftRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        },
        borderTopLeftRadius: true,
        borderTopColor: {
            process: (__webpack_require__(83900)/* ["default"] */["default"])
        }
    }
};
var AndroidTextInputNativeComponent = _NativeComponentRegistry.get('AndroidTextInput', function() {
    return __INTERNAL_VIEW_CONFIG;
});
var _default = AndroidTextInputNativeComponent;


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-155e24.chunk.bundle.map?platform=android/* RCSSB */eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYXNoIjoiYjVjMDZiYWQ3NThmZmU1MjU3Mjg3OWRjNDM5MjljMzBjMjlmZTE4ZTY0YzIwYTg1ZjgwMDVjMGIwN2FmMjliZCIsImlhdCI6MTc0ODkzMDgzMH0.JlIV3QwrHvxDeP0Re4edkcIvNvRJGsaViti22irRHk_FpNrUshr9G9o1bzkrGD6sYxItshXhdfFM5G8GcsfvA4BrA42J2VlPhHXN33jSiobhdNvqnvQeUKvHCUSTod_2-EBlXOv3dO4408MFB2aZSkjeQOz4aGlzcLN93BIQZOCWjFcvlgYVdCJkmdY0GbVAaRQJ1hsrqahvcqgsbAvqjCw7tP3gEyl2O1-aev6R5WaHAHQNh5s311S_RTzV4ElSsV98_Zh_Cvri27Fkh8hWfZDp8vPe3nAnJQ9jn5K9b9viWEqcPhR796750G4Bfq9qQGa1KYf6wfhbcO-MSg0Nkg                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              