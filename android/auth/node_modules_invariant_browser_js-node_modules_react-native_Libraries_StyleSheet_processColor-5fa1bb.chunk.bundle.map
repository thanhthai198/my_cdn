{"version":3,"file":"node_modules_invariant_browser_js-node_modules_react-native_Libraries_StyleSheet_processColor-5fa1bb.chunk.bundle","sources":["webpack:///./node_modules/react-native/src/private/specs/modules/NativePlatformConstantsAndroid.js","webpack:///./node_modules/invariant/browser.js","webpack:///./node_modules/react-native/Libraries/Utilities/Platform.android.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/processColorArray.js","webpack:///./node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/processColor.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/normalizeColor.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypes.android.js"],"sourcesContent":["                                                                               \nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n                                          \n                \n                \n                \n                      \n   \n                                         \n                     \n                                \n                                                \n                  \n                  \n                 \n                      \n                \n                      \n                 \n                \n                       \n   \n                                           \n                                                \n                              \n \nexport default (TurboModuleRegistry.getEnforcing      ('PlatformConstants')      );","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n             \n                           \n                     \n                         \n\nimport NativePlatformConstantsAndroid from './NativePlatformConstantsAndroid';\n\nconst Platform               = {\n  __constants: null,\n  OS: 'android',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version()         {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.Version;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants()    \n                       \n                                  \n                          \n                    \n                    \n                    \n                          \n       \n                    \n                    \n                   \n                        \n                  \n                        \n                   \n                  \n                         \n     {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting()          {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isDisableAnimations()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isDisableAnimations ?? this.isTesting;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.uiMode === 'tv';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isVision()          {\n    return false;\n  },\n  select:    (spec                       )    =>\n    'android' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.android\n      : 'native' in spec\n        ? // $FlowFixMe[incompatible-return]\n          spec.native\n        : // $FlowFixMe[incompatible-return]\n          spec.default,\n};\n\nmodule.exports = Platform;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n'use strict';\n\n                                             \n\nimport processColor, {                        } from './processColor';\n\nconst TRANSPARENT = 0; // rgba(0, 0, 0, 0)\n\nfunction processColorArray(\n  colors                             ,\n)                                       {\n  return colors == null ? null : colors.map(processColorElement);\n}\n\nfunction processColorElement(color            )                      {\n  const value = processColor(color);\n  // For invalid colors, fallback to transparent.\n  if (value == null) {\n    console.error('Invalid value in color array:', color);\n    return TRANSPARENT;\n  }\n  return value;\n}\n\nmodule.exports = processColorArray;\n","export * from '../../src/private/specs/modules/NativePlatformConstantsAndroid';\nimport NativePlatformConstantsAndroid from '../../src/private/specs/modules/NativePlatformConstantsAndroid';\nexport default NativePlatformConstantsAndroid;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n'use strict';\n\n                                                               \n\nconst Platform = require('../Utilities/Platform');\nconst normalizeColor = require('./normalizeColor');\n\n                                                            \n\n/* eslint no-bitwise: 0 */\nfunction processColor(color                         )                       {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor === 'object') {\n    const processColorObject =\n      require('./PlatformColorValueTypes').processColorObject;\n\n    const processedColorObj = processColorObject(normalizedColor);\n\n    if (processedColorObj != null) {\n      return processedColorObj;\n    }\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  // Converts 0xrrggbbaa into 0xaarrggbb\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0;\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n  return normalizedColor;\n}\n\nexport default processColor;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n/* eslint no-bitwise: 0 */\n\n                                                        \n                                             \n\nimport _normalizeColor from '@react-native/normalize-colors';\n\nfunction normalizeColor(\n  color                                     ,\n)                       {\n  if (typeof color === 'object' && color != null) {\n    const {normalizeColorObject} = require('./PlatformColorValueTypes');\n    const normalizedColor = normalizeColorObject(color);\n    if (normalizedColor != null) {\n      return normalizedColor;\n    }\n  }\n\n  if (typeof color === 'string' || typeof color === 'number') {\n    return _normalizeColor(color);\n  }\n}\n\nmodule.exports = normalizeColor;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n                                                        \n                                                               \n\n/** The actual type of the opaque NativeColorValue on Android platform */\n                              \n                                 \n  \n\nexport const PlatformColor = (...names               )             => {\n  /* $FlowExpectedError[incompatible-return]\n   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */\n  return ({resource_paths: names}                       );\n};\n\nexport const normalizeColorObject = (\n  color                  ,\n)                       => {\n  /* $FlowExpectedError[incompatible-cast]\n   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */\n  if ('resource_paths' in (color                       )) {\n    return color;\n  }\n  return null;\n};\n\nexport const processColorObject = (\n  color                  ,\n)                    => {\n  return color;\n};\n"],"names":["_default","_TurboModuleRegistry","invariant","condition","format","a","b","c","d","e","f","process","undefined","Error","error","args","argIndex","module","Platform","_NativePlatformConstantsAndroid","__DEV__","_this_constants_isDisableAnimations","spec","TRANSPARENT","processColorArray","colors","processColorElement","color","value","_processColor","console","require","normalizeColor","processColor","normalizedColor","_type_of","processColorObject","processedColorObj","normalizeColorObject","_normalizecolors","PlatformColor","names"],"mappings":"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"}