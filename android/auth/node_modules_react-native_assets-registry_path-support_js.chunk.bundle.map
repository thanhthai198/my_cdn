{"version":3,"file":"node_modules_react-native_assets-registry_path-support_js.chunk.bundle","sources":["webpack:///./node_modules/@react-native/assets-registry/path-support.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n'use strict';\n\n                                                 \n\nconst androidScaleSuffix = {\n  '0.75': 'ldpi',\n  '1': 'mdpi',\n  '1.5': 'hdpi',\n  '2': 'xhdpi',\n  '3': 'xxhdpi',\n  '4': 'xxxhdpi',\n};\n\nconst ANDROID_BASE_DENSITY = 160;\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale        )         {\n  if (scale.toString() in androidScaleSuffix) {\n    // $FlowFixMe[invalid-computed-prop]\n    return androidScaleSuffix[scale.toString()];\n  }\n  // NOTE: Android Gradle Plugin does not fully support the nnndpi format.\n  // See https://issuetracker.google.com/issues/72884435\n  if (Number.isFinite(scale) && scale > 0) {\n    return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';\n  }\n  throw new Error('no such scale ' + scale.toString());\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nconst drawableFileTypes = new Set([\n  'gif',\n  'jpeg',\n  'jpg',\n  'ktx',\n  'png',\n  'svg',\n  'webp',\n  'xml',\n]);\n\nfunction getAndroidResourceFolderName(\n  asset               ,\n  scale        ,\n)                                    {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  const suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      \"Don't know which android drawable suffix to use for scale: \" +\n        scale +\n        '\\nAsset: ' +\n        JSON.stringify(asset, null, '\\t') +\n        '\\nPossible scales are:' +\n        JSON.stringify(androidScaleSuffix, null, '\\t'),\n    );\n  }\n  return 'drawable-' + suffix;\n}\n\nfunction getAndroidResourceIdentifier(asset               )         {\n  return (getBasePath(asset) + '/' + asset.name)\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset               )         {\n  const basePath = asset.httpServerLocation;\n  return basePath.startsWith('/') ? basePath.slice(1) : basePath;\n}\n\nmodule.exports = {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n};\n"],"names":["androidScaleSuffix","ANDROID_BASE_DENSITY","getAndroidAssetSuffix","scale","Number","Math","Error","drawableFileTypes","Set","getAndroidResourceFolderName","asset","suffix","JSON","getAndroidResourceIdentifier","getBasePath","basePath","module"],"mappings":";;;AAAA;;;;;;;;CAQC,GAEY;AAIb,IAAMA,qBAAqB;IACzB,QAAQ;IACR,KAAK;IACL,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;AACP;AAEA,IAAMC,uBAAuB;AAE7B;;;CAGC,GACD,SAASC,sBAAsBC,KAAK;IAClC,IAAIA,MAAM,QAAQ,MAAMH,oBAAoB;QAC1C,oCAAoC;QACpC,OAAOA,kBAAkB,CAACG,MAAM,QAAQ,GAAG;IAC7C;IACA,wEAAwE;IACxE,sDAAsD;IACtD,IAAIC,OAAO,QAAQ,CAACD,UAAUA,QAAQ,GAAG;QACvC,OAAOE,KAAK,KAAK,CAACF,QAAQF,wBAAwB;IACpD;IACA,MAAM,IAAIK,MAAM,mBAAmBH,MAAM,QAAQ;AACnD;AAEA,kFAAkF;AAClF,IAAMI,oBAAoB,IAAIC,IAAI;IAChC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,SAASC,6BACPC,KAAK,EACLP,KAAK;IAEL,IAAI,CAACI,kBAAkB,GAAG,CAACG,MAAM,IAAI,GAAG;QACtC,OAAO;IACT;IACA,IAAMC,SAAST,sBAAsBC;IACrC,IAAI,CAACQ,QAAQ;QACX,MAAM,IAAIL,MACR,gEACEH,QACA,cACAS,KAAK,SAAS,CAACF,OAAO,MAAM,QAC5B,2BACAE,KAAK,SAAS,CAACZ,oBAAoB,MAAM;IAE/C;IACA,OAAO,cAAcW;AACvB;AAEA,SAASE,6BAA6BH,KAAK;IACzC,OAAQI,CAAAA,YAAYJ,SAAS,MAAMA,MAAM,IAAG,EACzC,WAAW,GACX,OAAO,CAAC,OAAO,KAAK,uCAAuC;KAC3D,OAAO,CAAC,iBAAiB,IAAI,uBAAuB;KACpD,OAAO,CAAC,YAAY,KAAK,0BAA0B;AACxD;AAEA,SAASI,YAAYJ,KAAK;IACxB,IAAMK,WAAWL,MAAM,kBAAkB;IACzC,OAAOK,SAAS,UAAU,CAAC,OAAOA,SAAS,KAAK,CAAC,KAAKA;AACxD;AAEAC,cAAc,GAAG;IACfP,8BAAAA;IACAI,8BAAAA;IACAC,aAAAA;AACF"}